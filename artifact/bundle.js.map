{"version":3,"file":"bundle.js","mappings":"+HACA,IAAIA,EAAsB,CAAC,ECA3BA,EAAoBC,EAAI,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXH,EAAoBK,EAAEF,EAAYC,KAASJ,EAAoBK,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDJ,EAAoBK,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCuD3E,MAAMI,EAAkB,CAC3BC,wBAAyB,uBACzBC,sBAAuB,4BACvBC,wBAAyB,+BAEhBC,EACW,iBADXA,EAEQ,sBC5Dd,SAASC,EAAyBC,GACrC,OAAKC,EAAEC,SAASF,GAETA,EAAIG,QAAQ,4BAA6B,MAFnBH,CAGjC,CAiIA,SAASI,EAAuBJ,EAAaK,GACzC,IAAIC,EAAa,EACbC,GAAU,EACVC,EAAY,GAEhB,IAAK,IAAIC,EAAIJ,EAAUI,EAAIT,EAAIU,OAAQD,IAAK,CACxC,MAAME,EAAOX,EAAIS,GACXG,EAAWH,EAAI,EAAIT,EAAIS,EAAI,GAAK,GAgBtC,GAXc,MAATE,GAAyB,OAATA,GAAyB,MAATA,GAA8B,OAAbC,IAC7CL,EAGMI,IAASH,IAChBD,GAAU,IAHVA,GAAU,EACVC,EAAYG,KAQfJ,EACD,GAAa,MAATI,EACAL,SACG,GAAa,MAATK,IACPL,IACmB,IAAfA,GACA,OAAOG,CAIvB,CAEA,OAAQ,CACZ,CAGO,SAASI,EAAgBC,GAC5B,MAAMC,EAAmB,GACzB,IAAIC,EAAe,GACfT,GAAU,EACVC,EAAY,GACZS,EAAe,EACfC,EAAa,EAEjB,IAAK,IAAIT,EAAI,EAAGA,EAAIK,EAAaJ,OAAQD,IAAK,CAC1C,MAAME,EAAOG,EAAaL,GAIZ,MAATE,GAAyB,OAATA,GAAyB,MAATA,GAC1B,IAANF,GAAmC,OAAxBK,EAAaL,EAAI,KAExBF,EAGMI,IAASH,IAChBD,GAAU,IAHVA,GAAU,EACVC,EAAYG,IAOP,MAATA,GAAcM,IACL,MAATN,GAAcM,IAGL,MAATN,GAAcO,IACL,MAATP,GAAcO,IAGL,MAATP,GAAiBJ,GAA4B,IAAjBU,GAAqC,IAAfC,EAMtDF,GAAgBL,GALZI,EAAOI,KAAKH,EAAaI,QACzBJ,EAAe,GAKvB,CAOA,OAJIA,EAAaI,QACbL,EAAOI,KAAKH,EAAaI,QAGtBL,CACX,CAEOM,eAAeC,EAAqBC,GACvC,OACIC,gBACIvB,EAAEwB,YAAYC,MACTC,MAAM,EAAGJ,EAAa,GACtBK,KAAIC,GAAgB5B,EAAEb,IAAIyC,EAAc,CAAC,YAAaA,EAAaC,UAAY,MAC/EC,UAASC,GAAa/B,EAAEgC,IAAID,EAAW,iBAC3CE,cAEb,CAEA,SAASC,EAAQC,GACb,MAAMC,EAAW,GACjB,IAAIC,EAAiB,GACjBC,GAAW,EACX/B,EAAY,GAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAI2B,EAAK1B,OAAQD,IAAK,CAClC,MAAME,EAAOyB,EAAK3B,GAGJ,MAATE,GAAyB,OAATA,GAAwB,IAANF,GAA2B,OAAhB2B,EAAK3B,EAAI,GASvC,MAATE,GAAiB4B,EAIxBD,GAAkB3B,GAHlB0B,EAASlB,KAAKmB,GACdA,EAAiB,IAVZC,EAGM5B,IAASH,EAChB+B,GAAW,EAEXD,GAAkB3B,GALlB4B,GAAW,EACX/B,EAAYG,EAYxB,CAMA,OAJI2B,GACAD,EAASlB,KAAKmB,GAGXD,EAASG,KAAK,IACzB,CAUOnB,eAAeoB,EAClBC,EACAN,EACAO,EACAC,EAAiB,GACjBC,GAAwB,GAExB,MAAMC,EAAeJ,EAAUK,WAAWD,aACpCE,EAAaN,EAAUK,WAAWC,WACxC,GAAI/C,EAAEgC,IAAIS,EAAWN,GAAO,CACxB,MAAMa,EAAehD,EAAEb,IAAIsD,EAAWN,GACtC,GAAIc,MAAMC,QAAQF,IAAyC,IAAxBA,EAAavC,OAAc,CAE1D,MAAM0C,EAAWnD,EAAEoD,UAAUJ,EAAa,IAC1CA,EAAa,GAAKN,EAClB1C,EAAEqD,IAAIZ,EAAWN,EAAMa,GACvB,MAAMM,EAAaX,EAAS,IAAIA,KAAY,GACtCY,EAAc,GAAGzD,EAAyB0D,KAAKC,UAAUN,QAAerD,EAAyB0D,KAAKC,UAAUf,OAAeY,IAcrI,OAbIT,GAAc7C,EAAEqD,IAAIR,EAAcV,EAAMoB,GACxCR,GAAY/C,EAAEqD,IAAIN,EAAYZ,EAAMoB,GACxCG,QAAQC,KACJ,QAAQxB,UAAarC,EAAyB0D,KAAKC,UAAUf,QAAgBY,KAE7EV,SACMgB,UACFnE,EAAgBC,wBAChB+C,EACAN,EACAgB,EACAT,IAED,CACX,CAAO,CACH,MAAMS,EAAWnD,EAAEoD,UAAUJ,GAC7BhD,EAAEqD,IAAIZ,EAAWN,EAAMO,GACvB,MAAMY,EAAaX,EAAS,IAAIA,KAAY,GACtCkB,EAAiB/D,EAAyB0D,KAAKC,UAAUf,IACzDa,EAAc,GAAGzD,EAAyB0D,KAAKC,UAAUN,QAAeU,KAAkBP,IAYhG,OAXIT,GAAc7C,EAAEqD,IAAIR,EAAcV,EAAMoB,GACxCR,GAAY/C,EAAEqD,IAAIN,EAAYZ,EAAMoB,GACxCG,QAAQC,KAAK,QAAQxB,UAAa0B,MAAmBP,KACjDV,SACMgB,UACFnE,EAAgBC,wBAChB+C,EACAN,EACAgB,EACAT,IAED,CACX,CACJ,CACA,OAAO,CACX,CAEOtB,eAAe0C,EAClBC,EACAhC,GAEA,MAAMiC,GAAiB,EACjBC,EAAkCjE,EAAEoD,UAAUrB,GAC9CmC,EAAoC,CAAEzB,UAAW,CAAC,GAClD0B,EAnTH,SAA4BC,GAC/B,MAAMC,EAAwB,GAC9B,IAAI7D,EAAI,EAER,KAAOA,EAAI4D,EAAU3D,QAAQ,CAEzB,MAAM6D,EAAWF,EAAUG,QAAQ,SAAU/D,GAC7C,IAAkB,IAAd8D,EAAiB,MAGrB,MAAME,EAAYF,EAAW,EAIvBG,EAAatE,EAAuBiE,EAAWI,GACrD,IAAoB,IAAhBC,EAAmB,CAEnBjE,EAAIgE,EAAY,EAChB,QACJ,CAGA,IAAIE,EAASD,EAAa,EAC1B,GAAIC,EAASN,EAAU3D,QAAgC,MAAtB2D,EAAUM,GAAiB,CAKxD,IAJAA,IAIOA,EAASN,EAAU3D,QAAgC,MAAtB2D,EAAUM,IAC1CA,IAIJ,IAAIC,EAAU,GACd,GACID,EAAS,EAAIN,EAAU3D,QACD,MAAtB2D,EAAUM,IACgB,MAA1BN,EAAUM,EAAS,GACrB,CAEE,MAAME,EAAaR,EAAUG,QAAQ,KAAMG,IACvB,IAAhBE,GACAD,EAAUP,EAAUS,UAAUH,EAAS,EAAGE,GAAYzD,OACtDuD,EAASE,IAGTD,EAAUP,EAAUS,UAAUH,EAAS,GAAGvD,OAC1CuD,EAASN,EAAU3D,OAE3B,CAGA,MAAMI,EAAeuD,EAAUS,UAAUL,EAAWC,GAC9CK,EAAYV,EAAUS,UAAUP,EAAUI,GAG1C5D,EAASF,EAAgBC,GAG3BC,EAAOL,QAAU,EAEjB4D,EAAQnD,KAAK,CACT4D,UAAWA,EACX3C,KAAMrC,EAAyBgB,EAAO,IACtCqC,SAAUrD,EAAyBgB,EAAO,IAC1CiE,SAAUjF,EAAyBgB,EAAO,IAC1C6B,OAAQgC,IAEa,IAAlB7D,EAAOL,QAGd4D,EAAQnD,KAAK,CACT4D,UAAWA,EACX3C,KAAMrC,EAAyBgB,EAAO,IACtCqC,SAAUrD,EAAyBgB,EAAO,IAC1CiE,SAAUjF,EAAyBgB,EAAO,IAC1C6B,OAAQgC,IAKhBnE,EAAIkE,CACR,MAEIlE,EAAIiE,EAAa,CAEzB,CAEA,OAAOJ,CACX,CA0NwBW,CAAmBjB,GACvChC,EAAUU,UAAUK,UAAY,CAC5BD,aAAcoB,EAAWxB,UACzBM,WAAYmB,EAAazB,iBAEvBmB,UAAUnE,EAAgBG,wBAAyBmC,EAAWiC,GACpE,IAAIiB,GAAoB,EACxB,IAAK,MAAMC,KAAcf,EAAa,CAClC,IAAI,KAAEhC,EAAI,SAAE4C,EAAQ,OAAEpC,GAAWuC,EAGjC,GAFA/C,EAAOD,EAAQC,GAEXnC,EAAEgC,IAAID,EAAUU,UAAWN,GAAO,CAClC,MAAMa,EAAehD,EAAEb,IAAI4C,EAAUU,UAAWN,GAEhD,GACInC,EAAEC,SAAS8E,IACXA,EAAS5D,OAAOgE,WAAW,MAC3BJ,EAAS5D,OAAOiE,SAAS,KAEzB,IACI,MAAMC,EAAcC,KAAKC,MAAMR,GAC3B9B,MAAMC,QAAQmC,IAAgBA,EAAY5E,OAAS,IACnDsE,EAAWM,EAAY,GAE/B,CAAE,MAAOG,GACL9B,QAAQ8B,MAAM,iCAAiCrD,OAAUqD,EAAMC,UACnE,CAGJ,GAA4B,iBAAjBzC,EAA2B,CAElC,MAAM0C,EAAiBC,OAAOZ,GACxB5B,EAAWH,EACjBhD,EAAEqD,IAAItB,EAAUU,UAAWN,EAAMuD,GACjC,MAAMpC,EAAaX,EAAS,IAAIA,KAAY,GACtCY,EAAc,GAAGJ,MAAauC,KAAkBpC,IACtDtD,EAAEqD,IAAIY,EAAWxB,UAAWN,EAAMoB,GAClCvD,EAAEqD,IAAIa,EAAazB,UAAWN,EAAMoB,GACpC0B,GAAoB,EACpBvB,QAAQC,KAAK,QAAQxB,UAAauD,MAAmBpC,WAC/CM,UACFnE,EAAgBC,wBAChBqC,EAAUU,UACVN,EACAgB,EACAuC,EAER,MAAO,GAAIzC,MAAMC,QAAQF,IAAyC,IAAxBA,EAAavC,OAAc,CAEjE,MAAMmF,EACyB,iBAApB5C,EAAa,GACd2C,OAAOZ,GACPjF,EAAyBiF,GAC7B5B,EAAWnD,EAAEoD,UAAUJ,EAAa,IAC1CA,EAAa,GAAK4C,EAClB5F,EAAEqD,IAAItB,EAAUU,UAAWN,EAAMa,GACjC,MAAMM,EAAaX,EAAS,IAAIA,KAAY,GACtCY,EAAc,GAAGzD,EAAyB0D,KAAKC,UAAUN,QAAerD,EAAyB0D,KAAKC,UAAUsB,OAAczB,IACpItD,EAAEqD,IAAIY,EAAWxB,UAAWN,EAAMoB,GAClCvD,EAAEqD,IAAIa,EAAazB,UAAWN,EAAMoB,GACpC0B,GAAoB,EACpBvB,QAAQC,KACJ,QAAQxB,UAAarC,EAAyB0D,KAAKC,UAAUmC,QAAqBtC,WAGhFM,UACFnE,EAAgBC,wBAChBqC,EAAUU,UACVN,EACAgB,EACAyC,EAER,KAAO,CAEH,MAAMC,EAAkB/F,EAAyBiF,GAC3C5B,EAAWnD,EAAEoD,UAAUJ,GAC7BhD,EAAEqD,IAAItB,EAAUU,UAAWN,EAAM0D,GACjC,MAAMvC,EAAaX,EAAS,IAAIA,KAAY,GACtCkB,EAAiB/D,EAAyB0D,KAAKC,UAAUoC,IACzDtC,EAAc,GAAGzD,EAAyB0D,KAAKC,UAAUN,QAAeU,KAAkBP,IAChGtD,EAAEqD,IAAIY,EAAWxB,UAAWN,EAAMoB,GAClCvD,EAAEqD,IAAIa,EAAazB,UAAWN,EAAMoB,GACpC0B,GAAoB,EACpBvB,QAAQC,KAAK,QAAQxB,UAAa0B,MAAmBP,WAC/CM,UACFnE,EAAgBC,wBAChBqC,EAAUU,UACVN,EACAgB,EACA0C,EAER,CACJ,KAAO,CACH,MAAMtC,EAAc,mBAAmBpB,MAAS4C,MAAapC,KAC7De,QAAQ8B,MAAMjC,EAClB,CACJ,CAQA,OANAxB,EAAUc,aAAeoB,EAAWxB,UACpCV,EAAUgB,WAAamB,EAAazB,gBAC9BmB,UAAUnE,EAAgBE,sBAAuBoC,EAAWiC,UAG3DjC,EAAUU,UAAUK,UACpBmC,GAAqBjB,CAChC,CAEO5C,eAAe0E,EAAyBxE,GAC3C,MAAMM,EAAemE,gBAAgBzE,GAAY0E,IAAI,GACrD,IAAKpE,EACD,OAGJ,MAAMqE,EAAkBrE,EAAa6D,QAC/B1D,QAAkBV,EAAqBC,GAC7C,IAAKtB,EAAEgC,IAAID,EAAW,aAElB,YADA2B,QAAQ8B,MAAM,8BAA8BlE,KAKhD,SADoCwC,EAAgBmC,EAAiBlE,GAC1C,CACvB,MAAMmE,EAAiBjE,aAAa,CAAEkE,KAAM,SAE5CD,EAAezD,UAAYV,EAAUU,UACrCyD,EAAerD,aAAed,EAAUc,aACxCqD,EAAenD,WAAahB,EAAUgB,WACtCmD,EAAeE,sBAAwBrE,EAAUqE,4BAC3CC,iBAAiBH,EAAgB,CAAEC,KAAM,QACnD,OACMG,wBACF,CACI7D,UAAWV,EAAUU,UACrBI,aAAcd,EAAUc,aACxBE,WAAYhB,EAAUgB,WACtBqD,sBAAuBrE,EAAUqE,uBAErC,CAAED,KAAM,UAAW7E,WAAYA,IAGT,SAAtBM,EAAa2E,MAAoBN,EAAgBO,SAAS,mCACpDC,gBACF,CACI,CACInF,WAAYA,EACZmE,QAASQ,EAAkB,iCAGnC,CACIS,QAAS,YAIzB,CAEOtF,eAAeuF,EAClBV,EACAW,GAEA,QAA2CC,IAAvCD,EAAqBE,cACrB,OAEJF,EAAqBG,cAAgB/G,EAAEoD,UAAUwD,EAAqBE,eACtE,MAAM/E,EAAY6E,EAAqBG,oBAEhBjD,EAAgBmC,EAAiBlE,WAElC6E,EAAqBG,aAE/C,CCreO,SAASC,EACZC,EACAC,EACAC,EACAC,GAEApH,EAAEqH,QAAQH,GAAW,CAACI,EAAOxI,KACzB,MAAMyI,EAAezI,EAErB,GAAIkB,EAAEkD,QAAQoE,IAEV,GAAqB,IAAjBA,EAAM7G,QAAgBT,EAAEC,SAASqH,EAAM,KAEvC,GAAItH,EAAEkD,QAAQlD,EAAEb,IAAIgI,EAAUI,IAAgB,CAC1C,MAAMC,EAAWxH,EAAEb,IAAIgI,EAAUI,GACjC,GAAwB,IAApBC,EAAS/G,OAKT,GAHAT,EAAEqD,IAAI+D,EAAa,GAAGG,OAAmBD,EAAM,IAG3CtH,EAAEyH,SAASH,EAAM,MAAQtH,EAAEkD,QAAQoE,EAAM,IAAK,CAE9C,MAAMI,EAAY1H,EAAEb,IAAIiI,EAAa,GAAGtI,QAIpCkB,EAAEgC,IAAIsF,EAAM,GAAI,gBAChBtH,EAAEC,SAASqH,EAAM,GAAGK,cAEhB3H,EAAEgC,IAAIwF,EAAS,GAAI,gBACnBxH,EAAEqD,IACE+D,EACA,GAAGG,mBACHD,EAAM,GAAGK,aAMrBX,EACI,GAAGO,OACHD,EAAM,GACNE,EAAS,GACTE,EAER,MAAW1H,EAAEkD,QAAQoE,EAAM,KAEvBN,EACI,GAAGO,OACHD,EAAM,GACNE,EAAS,GACTJ,EAAY,GAI5B,OACG,GAAIpH,EAAEkD,QAAQlD,EAAEb,IAAIgI,EAAUI,IAAgB,CAEjD,MAAMK,EAAY5H,EAAEb,IAAIgI,EAAUI,GAClCD,EAAMD,SAAQ,CAACQ,EAAMC,KACjB,GAAIA,EAAQF,EAAUnH,QACdT,EAAEyH,SAASI,GAAO,CAClB,MAAME,EAAiB/H,EAAEb,IAAIiI,EAAa,GAAGG,KAAgBO,MAEzD9H,EAAEgC,IAAI6F,EAAM,gBAAkB7H,EAAEC,SAAS4H,EAAKF,cAC1C3H,EAAEgC,IAAI4F,EAAUE,GAAQ,gBACxB9H,EAAEqD,IAAI0E,EAAgB,cAAeF,EAAKF,aAIlDX,EACI,GAAGO,KAAgBO,KACnBR,EAAMQ,GACNF,EAAUE,GACVC,EAER,CACJ,GAER,OACG,GAAI/H,EAAEyH,SAASH,GAAQ,CAE1B,GAAItH,EAAEgC,IAAIsF,EAAO,gBAAkBtH,EAAEC,SAASqH,EAAMK,aAAc,CAG9D,MAAMK,EAAmB,GAAGlJ,gBACxBkB,EAAEgC,IAAImF,EAAUa,IAChBhI,EAAEqD,IAAI+D,EAAaY,EAAkBV,EAAMK,YAEnD,CAGI3H,EAAEgC,IAAImF,EAAUrI,IAAQkB,EAAEyH,SAASN,EAASrI,KAC5CkI,EAAmBO,EAAcD,EAAOH,EAASrI,GAAMsI,EAAYtI,GAE3E,IAER,CCpHA,MAAM,EAJE,CAACmJ,IACR,IAAIC,EAAI,CAAC,EAAgC,OAA7BxJ,EAAoBC,EAAEuJ,EAAGD,GAAWC,GAGZA,CAAE,CAAE,MAAW,IAAOC,EAAqF,QCAhJ,MAAM,EAJE,CAACF,IACR,IAAIC,EAAI,CAAC,EAAgC,OAA7BxJ,EAAoBC,EAAEuJ,EAAGD,GAAWC,GAGZ,CAAE,CAAE,MAAW,IAAOE,EAAoF,QCuBxIhH,eAAeiH,EAClBC,EACAC,GAEA,MAAMC,EAAwBD,SAjB3BnH,iBACH,MACMoH,EAAwB,WADEC,uBACoBC,2BAC9CC,QAAsBC,gCAI5B,OAHsB,OAAlBD,GACAH,EAAsBtH,KAAKyH,GAExBH,CACX,CAS0DK,GACtD,IAAIC,GAAa,EAEjB,IAAK,MAAMC,KAAoBP,EAAuB,CAClD,GAAIF,EAASlC,sBAAsBI,SAASuC,GAAmB,SAC/DT,EAASlC,sBAAsBlF,KAAK6H,GACpC,MAAMC,QAAsBC,mBAAmBF,GAE/C,IAAK,MAAMG,KAASF,EAChB,GAAIE,EAAMvE,SAASwE,cAAc3C,SAAS,aAAc,CACpD,MAAM4C,EAAUC,iBAAiBH,EAAME,SACvC,IAAIE,EAAkB,KAClBC,EAA2B,KAG/B,IACID,EAAahE,KAAKC,MAAM6D,EAC5B,CAAE,MAAOI,GAEL,IACIF,EAAa,QAAYF,EAC7B,CAAE,MAAOK,GAEL,IACIH,EAAa,QAAWF,EAC5B,CAAE,MAAOM,GACLH,EAAa,IAAII,MACb,yDAAyDD,IAEjE,CACJ,CACJ,CAEA,GAAIH,EAMA,MALA7F,QAAQ8B,MAAM,mCAAmC+D,KAEjDK,OAAOpE,MAAM+D,EAAW9D,QAAS,iCAAkC,CAC/DoE,QAAS,MAEPN,EAGND,IACAhB,EAAS7F,UAAYzC,EAAE8J,MAAMxB,EAAS7F,UAAW6G,GAEzD,CAEJR,GAAa,CACjB,CAEA,OAAOA,CACX,CA6EO1H,eAAe2I,IAClB,IAAIC,EACAjI,EAEJ,IACI,MAAMkI,QAjEP7I,iBAIH,IAAI8I,EAAqC,GACzC,IACIA,QAAuBnE,iBAAiB,EAAG,CACvCQ,KAAM,YACN4D,gBAAgB,GAExB,CAAE,MAAOX,GAET,CAEA,IAAKU,GAAiBA,EAAczJ,QAAU,EAAG,CAC7C,MAAM2J,QAAkBrE,gBAAgB,EAAG,CACvCoE,gBAAgB,IAEpB,KAAIC,GAAaA,EAAU3J,OAAS,GAGhC,MAAM,IAAIkJ,MAAM,aAFhBO,EAAgBE,CAIxB,CAEA,MAAMJ,EAAWE,EAAc,GAG/B,MAAO,CAAEzE,QAASuE,EAAUjI,UAFViI,EAASK,YAAYL,EAASnI,UAGpD,CAoC6ByI,GACrBN,EAAWC,EAAOxE,QAClB1D,EAAYkI,EAAOlI,WA9EhB,CACHc,aAAc,CAAC,EACfuD,sBAAuB,GACvB3D,UAAW,CAAC,EACZM,WAAY,CAAC,EA2EjB,CAAE,MAAOyG,GAEL,YADA9F,QAAQ8B,MAAM,eAElB,MAGkBqB,IAAd9E,IACAA,EAtFG,CACHc,aAAc,CAAC,EACfuD,sBAAuB,GACvB3D,UAAW,CAAC,EACZM,WAAY,CAAC,IAoFZ/C,EAAEgC,IAAID,EAAW,2BAClBA,EAAUqE,sBAAwB,IAEjCrE,EAAUU,YACXV,EAAUU,UAAY,CAAC,GAK3B,SADyB4F,EAAgBtG,GACzC,CAIA2B,QAAQC,KAAK,8BACP2C,wBAAwBvE,GAG9B,IAAK,IAAIvB,EAAI,EAAGA,EAAIwJ,EAASO,OAAO9J,OAAQD,IAAK,CAC7C,MAAMgK,EAAqBxK,EAAEoD,UAAUrB,SACjC+B,EAAgBuF,iBAAiBW,EAASO,OAAO/J,IAAKgK,SAGtDC,eAAe,CAAEC,KAAMF,GAAsBR,EAAS1I,WAAY,CACpEoF,QAAS,OACT7E,SAAUrB,GAElB,OArEGY,iBAGH,MAAMuJ,EAAyC,CAC3CC,WAAY,EACZC,mBAAoB,IACpBC,WAAY,EACZC,gBAAiB,EACjBC,UAAW,EACXC,oBAAqB,EAErBC,mBAAoB,kBAEpBC,eAAe,EACfC,WAAW,EACXC,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBC,gBAAgB,GAEdC,EAAWhD,sBACZzI,EAAE0L,QAAQ1L,EAAE8J,MAAM,CAAC,EAAG2B,EAAUd,GAAcc,IAC/CE,oBAAoBhB,EAE5B,CAgDUiB,EAlBN,CAmBJ,CC1MA,MAAMC,EAAU,CAAC,SAAU,YAWpB,SAASC,KAThB,WACI,MAAMC,EAAkBC,iBAAiBC,eACnCC,EAAuBH,EAAgBpK,KAAIwK,GAAKA,EAAEC,OACxD,IAAK,MAAMC,KAAUR,EAAQS,QAAOH,IAAMD,EAAqB1F,SAAS2F,KACpEJ,EAAgB7K,KAAK,CAAEkL,KAAMC,EAAQE,SAAS,IAElDC,qBAAqBP,cAAeF,EACxC,CAGIU,GAEAC,cAAc,UAAUtL,iBACpB,MAAM4I,EAAW2C,mBACb3C,EAAW,GACiB,IAA5BxI,YAAYC,KAAKhB,eACfmM,eAAe,YAAa,CAAEzG,KAAM,UAAW7E,WAAY0I,UAC3D4C,eAAe,aAAc,CAAEzG,KAAM,UAAW7E,WAAY0I,UAC5D4C,eAAe,eAAgB,CAAEzG,KAAM,UAAW7E,WAAY0I,UAE9DlE,EAAyB6G,oBACnC,IAEAD,cAAc,YAAYtL,iBAEtB,MAAMyL,EDyDH,CACHhK,aAAc,CAAC,EACfuD,sBAAuB,GACvB3D,UAAW,CAAC,EACZM,WAAY,CAAC,GC3Db,IAEI,UAD0BsF,EAAgBwE,GAItC,OAFAnJ,QAAQ8B,MAAM,wBACdoE,OAAOpE,MAAM,kBAAmB,GAAI,CAAEqE,QAAS,KAGvD,CAAE,MAAOL,GAEL,YADA9F,QAAQ8B,MAAM,mBAAoBgE,EAEtC,CAGA,MAAMlI,EAAaqL,mBACnB,GAAIrL,EAAa,EAGb,OAFAoC,QAAQ8B,MAAM,eACdoE,OAAOpE,MAAM,SAAU,GAAI,CAAEqE,QAAS,MAI1C,MAAMiD,QAAwBzL,EAAqBC,GAEnD,IAAKtB,EAAEgC,IAAI8K,EAAiB,aAGxB,OAFApJ,QAAQ8B,MAAM,4BACdoE,OAAOpE,MAAM,oBAAqB,GAAI,CAAEqE,QAAS,MAMrD,MAAMkD,EAAcxL,gBAAgBsL,GACpCE,EAAYtK,UAAYzC,EAAE8J,MAAMiD,EAAYtK,UAAWqK,EAAgBrK,WAGvEuE,EACI,EACA6F,EAAiBpK,UACjBqK,EAAgBrK,UAChBsK,EAAYtK,iBAIV4D,iBAAiB0G,EAAa,CAAE5G,KAAM,UAAW7E,WAAYA,IAEnEoC,QAAQC,KAAK,eACbiG,OAAOoD,QAAQ,eAAgB,GAAI,CAAEnD,QAAS,KAClD,GACJ,CCtEA,SAASoD,IAqRL,MApRY,CAmFRC,OAAQzN,EAaR0N,aAAc/L,eACVqE,EACA2H,GAEA,MAAMC,EAA6B,CAC/BvG,cAAesG,GAGnB,aADMzG,EAA0BlB,EAAS4H,GAClCA,EAAatG,aACxB,EAUAuG,WAAY,SAAUC,GAElB,OADetL,aAAasL,EAEhC,EASAC,eAAgBpM,eAAgBkH,EAAmBiF,SACzClH,iBAAiBiC,EAAUiF,EACrC,EAQAE,kBAAmB,WAEf,OADkBxL,aAAa,CAAEkE,KAAM,UAAW7E,WAAYoM,uBAElE,EAQAC,sBAAuBvM,eAAgBkH,SAC7BjC,iBAAiBiC,EAAU,CAC7BnC,KAAM,UACN7E,WAAYoM,uBAEpB,EASAE,cAAexM,eAAgBkH,GAC3B,aAAaD,EAAgBC,EACjC,EAyBAuF,eAAgBzM,eACZkH,EACAnG,EACAO,GACA,OAAEC,EAAS,GAAE,aAAEC,GAAe,GAAuD,CAAC,GAEtF,aAAaJ,EAAe8F,EAAS7F,UAAWN,EAAMO,EAAWC,EAAQC,EAC7E,EAwBAkL,eAAgB,SACZxF,EACAnG,GACA,SACI4L,EAAW,OAAM,cACjBC,GACkE,CAAC,GAEvE,IAAItD,EACJ,OAAQqD,GACJ,IAAK,OACDrD,EAAOpC,EAAS7F,UAChB,MACJ,IAAK,UACDiI,EAAOpC,EAASzF,aAChB,MACJ,IAAK,QACD6H,EAAOpC,EAASvF,WAIxB,MAAMuE,EAAQtH,EAAEb,IAAIuL,EAAMvI,EAAM6L,GAGhC,OP7PL,SAAmC1G,GACtC,OAAOrE,MAAMC,QAAQoE,IAA2B,IAAjBA,EAAM7G,QAAoC,iBAAb6G,EAAM,EACtE,CO2PgB2G,CAA4B3G,GACrBA,EAAM,GAIVA,CACX,EAmBA4G,qBAAsB,SAClB5F,EACAyF,GAEA,OPzLL,SAAuBA,EAAwCI,GAClE,IAAIzD,EACJ,OAAQqD,GACJ,IAAK,OACDrD,EAAOyD,EAAU1L,UACjB,MACJ,IAAK,UACDiI,EAAOyD,EAAUtL,aACjB,MACJ,IAAK,QACD6H,EAAOyD,EAAUpL,WAGzB,OAAO2H,CACX,CO2KmB0D,CAAcL,EAAUzF,EACnC,EAGR,CC1RA+F,GAAE,KACEvC,ID+RG,WACH,MAAMwC,EAAMrB,IACZjN,EAAEqD,IAAIkL,OAAQ,MAAOD,GACrBtO,EAAEqD,IAAIkL,OAAOC,OAAQ,MAAOF,EAChC,CClSIG,GACAC,QAAQC,cAAcC,mBAAoB7E,GAC1C2E,QAAQC,cAAcE,aAAc9E,GACpC2E,QAAQC,cAAcE,aAAc/I,GACpC4I,QAAQC,cAAcG,iBAAkBhJ,GACxC4I,QAAQ7O,EAAoC8G,GAC5C+H,QAAQ7O,EAAiC2C,GAGzCxC,EAAEqD,IAAIkL,OAAQ,2BAA4BzI,EAAyB","sources":["webpack://mag-variable-update/webpack/bootstrap","webpack://mag-variable-update/webpack/runtime/define property getters","webpack://mag-variable-update/webpack/runtime/hasOwnProperty shorthand","webpack://mag-variable-update/./src/variable_def.ts","webpack://mag-variable-update/./src/function.ts","webpack://mag-variable-update/./src/update_descriptions.ts","webpack://mag-variable-update/external module \"https://testingcf.jsdelivr.net/npm/json5/+esm\"","webpack://mag-variable-update/external module \"https://testingcf.jsdelivr.net/npm/toml/+esm\"","webpack://mag-variable-update/./src/variable_init.ts","webpack://mag-variable-update/./src/button.ts","webpack://mag-variable-update/./src/export_globals.ts","webpack://mag-variable-update/./src/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export type ValueWithDescription<T> = [T, string];\n\nexport function isValueWithDescription<T>(value: unknown): value is ValueWithDescription<T> {\n    return Array.isArray(value) && value.length === 2 && typeof value[1] === 'string';\n}\n\nexport type MvuData = {\n    /** 已初始化的 lorebook 列表 */\n    initialized_lorebooks: string[];\n\n    /**\n     * 状态数据 - 存储实际的变量值\n     * 支持嵌套对象结构，通过路径（如 \"player.health\"）访问\n     * $internal 属性在更新过程中临时存储 display_data 和 delta_data 的引用\n     *\n     * 更新逻辑：\n     * 1. 普通值：直接更新为新值\n     * 2. ValueWithDescription 类型：更新数组的第一个元素（实际值），保留第二个元素（描述）\n     * 3. 数字类型：自动将字符串新值转换为数字\n     */\n    stat_data: Record<string, any> & { $internal?: InternalData };\n\n    /**\n     * 显示数据 - 存储变量变化的可视化表示\n     * 格式：\"{旧值}->{新值} ({原因})\"\n     * 例如：\"100->80 (受到伤害)\"\n     *\n     * 默认情况下包含完整的 stat_data ，但是在变更后，会将变更的元素变为上面含原因的表示。\n     * 更新时机：每次 stat_data 中的值发生变化时同步更新\n     * 用途：在UI中展示变量的变化历史，让用户了解数值是如何变化的\n     */\n    display_data: Record<string, any>;\n\n    /**\n     * 增量数据 - 存储本次更新中发生变化的变量\n     * 格式：与 display_data 相同，\"{旧值}->{新值} (原因)\"\n     *\n     * 更新时机：\n     * - 在 updateVariables 开始时初始化为空对象\n     * - 每次变量更新时记录变化\n     * - 更新结束后保存到消息的 variables 中\n     *\n     * 用途：仅显示当前消息/操作中实际发生变化的变量，而不是所有历史变化\n     */\n    delta_data: Record<string, any>;\n};\n\nexport interface VariableData {\n    old_variables: MvuData;\n    /**\n     * 输出变量，仅当实际产生了变量变更的场合，会产生 newVariables\n     */\n    new_variables?: MvuData;\n}\n\nexport const variable_events = {\n    SINGLE_VARIABLE_UPDATED: 'mag_variable_updated',\n    VARIABLE_UPDATE_ENDED: 'mag_variable_update_ended',\n    VARIABLE_UPDATE_STARTED: 'mag_variable_update_started',\n} as const;\nexport const exported_events = {\n    INVOKE_MVU_PROCESS: 'mag_invoke_mvu',\n    UPDATE_VARIABLE: 'mag_update_variable',\n};\n\nexport type InternalData = {\n    //不存自己，会导致环形引用\n    //stat_data: Record<string, any>;\n    display_data: Record<string, any>;\n    delta_data: Record<string, any>;\n};\n\nexport type ExtendedListenerType = {\n    [variable_events.SINGLE_VARIABLE_UPDATED]: (\n        stat_data: Record<string, any>,\n        path: string,\n        _oldValue: any,\n        _newValue: any\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_STARTED]: (\n        variables: MvuData,\n        out_is_updated: boolean\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_ENDED]: (variables: MvuData, out_is_updated: boolean) => void;\n    [exported_events.INVOKE_MVU_PROCESS]: (\n        message_content: string,\n        variable_info: VariableData\n    ) => void;\n    [exported_events.UPDATE_VARIABLE]: (\n        stat_data: Record<string, any>,\n        path: string,\n        newValue: any,\n        reason: string,\n        isRecursive: boolean\n    ) => void;\n};\n\nexport type DataCategory = 'stat' | 'display' | 'delta';\n\nexport function extractRecord(category: 'stat' | 'display' | 'delta', game_data: MvuData) {\n    let data: Record<string, any> | undefined = undefined;\n    switch (category) {\n        case 'stat':\n            data = game_data.stat_data;\n            break;\n        case 'display':\n            data = game_data.display_data;\n            break;\n        case 'delta':\n            data = game_data.delta_data;\n            break;\n    }\n    return data;\n}\n","import { variable_events, VariableData } from '@/variable_def';\n\nexport function trimQuotesAndBackslashes(str: string): string {\n    if (!_.isString(str)) return str;\n    // Regular expression to match backslashes and quotes (including backticks) at the beginning and end\n    return str.replace(/^[\\\\\"'` ]*(.*?)[\\\\\"'` ]*$/, '$1');\n}\n\n/**\n * 从大字符串中提取所有 .set(${path}, ${new_value});//${reason} 格式的模式\n * 并解析出每个匹配项的路径、新值和原因部分\n */\ninterface SetCommand {\n    fullMatch: string;\n    path: string;\n    oldValue: string;\n    newValue: string;\n    reason: string;\n}\n\n/**\n * 从输入文本中提取所有 _.set() 调用\n *\n * 问题背景：\n * 原本使用正则表达式 /_\\.set\\(([\\s\\S]*?)\\);/ 来匹配，但这种非贪婪匹配会在遇到\n * 嵌套的 ); 时提前结束。例如：\n * _.set('path', [\"text with _.set('inner',null);//comment\"], []);\n * 会在 \"comment\") 处错误地结束匹配\n *\n * 解决方案：\n * 使用状态机方法，通过计数括号配对来准确找到 _.set() 调用的结束位置\n */\nexport function extractSetCommands(inputText: string): SetCommand[] {\n    const results: SetCommand[] = [];\n    let i = 0;\n\n    while (i < inputText.length) {\n        // 步骤1: 查找 _.set( 的起始位置\n        const setStart = inputText.indexOf('_.set(', i);\n        if (setStart === -1) break;\n\n        // 步骤2: 定位开始括号\n        const openParen = setStart + 6; // '_.set(' 的长度\n\n        // 步骤3: 使用括号配对算法找到对应的闭括号\n        // 这个算法会正确处理引号内的括号，避免误匹配\n        const closeParen = findMatchingCloseParen(inputText, openParen);\n        if (closeParen === -1) {\n            // 如果找不到匹配的闭括号，跳过这个位置继续查找\n            i = openParen + 1;\n            continue;\n        }\n\n        // 步骤4: 检查闭括号后是否紧跟分号（_.set()调用的标准格式）\n        let endPos = closeParen + 1;\n        if (endPos < inputText.length && inputText[endPos] === ';') {\n            endPos++;\n\n            // 步骤5: 处理可能的注释部分\n            // 跳过分号后的空格\n            while (endPos < inputText.length && inputText[endPos] === ' ') {\n                endPos++;\n            }\n\n            // 检查是否有 // 注释\n            let comment = '';\n            if (\n                endPos + 1 < inputText.length &&\n                inputText[endPos] === '/' &&\n                inputText[endPos + 1] === '/'\n            ) {\n                // 找到注释的结束位置（换行符或文本结束）\n                const commentEnd = inputText.indexOf('\\n', endPos);\n                if (commentEnd !== -1) {\n                    comment = inputText.substring(endPos + 2, commentEnd).trim();\n                    endPos = commentEnd;\n                } else {\n                    // 注释延续到文本结尾\n                    comment = inputText.substring(endPos + 2).trim();\n                    endPos = inputText.length;\n                }\n            }\n\n            // 步骤6: 提取参数并解析\n            const paramsString = inputText.substring(openParen, closeParen);\n            const fullMatch = inputText.substring(setStart, endPos);\n\n            // 使用 parseParameters 解析参数，它能正确处理嵌套的数组、对象和引号\n            const params = parseParameters(paramsString);\n\n            // 步骤7: 根据参数数量构建结果\n            if (params.length >= 3) {\n                // 标准格式：_.set(path, oldValue, newValue)\n                results.push({\n                    fullMatch: fullMatch,\n                    path: trimQuotesAndBackslashes(params[0]),\n                    oldValue: trimQuotesAndBackslashes(params[1]),\n                    newValue: trimQuotesAndBackslashes(params[2]),\n                    reason: comment,\n                });\n            } else if (params.length === 2) {\n                // 简化格式：_.set(path, value)\n                // 在这种情况下，oldValue 和 newValue 都设为相同的值\n                results.push({\n                    fullMatch: fullMatch,\n                    path: trimQuotesAndBackslashes(params[0]),\n                    oldValue: trimQuotesAndBackslashes(params[1]),\n                    newValue: trimQuotesAndBackslashes(params[1]),\n                    reason: comment,\n                });\n            }\n\n            // 更新搜索位置，继续查找下一个 _.set() 调用\n            i = endPos;\n        } else {\n            // 如果没有分号，跳过这个位置\n            i = closeParen + 1;\n        }\n    }\n\n    return results;\n}\n\n/**\n * 辅助函数：找到匹配的闭括号\n *\n * 算法说明：\n * 1. 使用括号计数器，遇到 ( 加1，遇到 ) 减1\n * 2. 当计数器归零时，找到了匹配的闭括号\n * 3. 重要：忽略引号内的括号，避免字符串内容干扰匹配\n *\n * @param str 要搜索的字符串\n * @param startPos 开始括号的位置\n * @returns 匹配的闭括号位置，如果找不到返回 -1\n */\nfunction findMatchingCloseParen(str: string, startPos: number): number {\n    let parenCount = 1; // 从1开始，因为已经有一个开括号\n    let inQuote = false;\n    let quoteChar = '';\n\n    for (let i = startPos; i < str.length; i++) {\n        const char = str[i];\n        const prevChar = i > 0 ? str[i - 1] : '';\n\n        // 处理引号状态\n        // 支持三种引号：双引号、单引号和反引号（模板字符串）\n        // 注意：需要检查前一个字符不是反斜杠，以正确处理转义的引号\n        if ((char === '\"' || char === \"'\" || char === '`') && prevChar !== '\\\\') {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        // 只在不在引号内时计算括号\n        // 这确保了像 \"text with )\" 这样的字符串不会影响括号匹配\n        if (!inQuote) {\n            if (char === '(') {\n                parenCount++;\n            } else if (char === ')') {\n                parenCount--;\n                if (parenCount === 0) {\n                    return i;\n                }\n            }\n        }\n    }\n\n    return -1; // 没有找到匹配的闭括号\n}\n\n// 解析参数字符串，处理嵌套结构\nexport function parseParameters(paramsString: string): string[] {\n    const params: string[] = [];\n    let currentParam = '';\n    let inQuote = false;\n    let quoteChar = '';\n    let bracketCount = 0;\n    let braceCount = 0;\n\n    for (let i = 0; i < paramsString.length; i++) {\n        const char = paramsString[i];\n\n        // 处理引号（包括反引号）\n        if (\n            (char === '\"' || char === \"'\" || char === '`') &&\n            (i === 0 || paramsString[i - 1] !== '\\\\')\n        ) {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        // 处理方括号 (数组)\n        if (char === '[') bracketCount++;\n        if (char === ']') bracketCount--;\n\n        // 处理花括号 (对象)\n        if (char === '{') braceCount++;\n        if (char === '}') braceCount--;\n\n        // 处理参数分隔符\n        if (char === ',' && !inQuote && bracketCount === 0 && braceCount === 0) {\n            params.push(currentParam.trim());\n            currentParam = '';\n            continue;\n        }\n\n        currentParam += char;\n    }\n\n    // 添加最后一个参数\n    if (currentParam.trim()) {\n        params.push(currentParam.trim());\n    }\n\n    return params;\n}\n\nexport async function getLastValidVariable(message_id: number): Promise<Record<string, any>> {\n    return (\n        structuredClone(\n            _(SillyTavern.chat)\n                .slice(0, message_id + 1)\n                .map(chat_message => _.get(chat_message, ['variables', chat_message.swipe_id ?? 0]))\n                .findLast(variables => _.has(variables, 'stat_data'))\n        ) ?? getVariables()\n    );\n}\n\nfunction pathFix(path: string): string {\n    const segments = [];\n    let currentSegment = '';\n    let inQuotes = false;\n    let quoteChar = '';\n\n    for (let i = 0; i < path.length; i++) {\n        const char = path[i];\n\n        // Handle quotes\n        if ((char === '\"' || char === \"'\") && (i === 0 || path[i - 1] !== '\\\\')) {\n            if (!inQuotes) {\n                inQuotes = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuotes = false;\n            } else {\n                currentSegment += char;\n            }\n        } else if (char === '.' && !inQuotes) {\n            segments.push(currentSegment);\n            currentSegment = '';\n        } else {\n            currentSegment += char;\n        }\n    }\n\n    if (currentSegment) {\n        segments.push(currentSegment);\n    }\n\n    return segments.join('.');\n}\n\n/**\n * MVU 风格的变量更新操作，同时会更新 display_data/delta_data\n * @param stat_data 当前的变量状态，来源应当是 mag_variable_updated 回调中提供的 stat_data。其他来源则不会修改 display_data 等。\n * @param path 要更改的变量路径\n * @param new_value 新值\n * @param reason 修改原因（可选，默认为空）\n * @param is_recursive 此次修改是否允许触发 mag_variable_updated 回调（默认不允许）\n */\nexport async function updateVariable(\n    stat_data: Record<string, any>,\n    path: string,\n    new_value: any,\n    reason: string = '',\n    is_recursive: boolean = false\n): Promise<boolean> {\n    const display_data = stat_data.$internal?.display_data;\n    const delta_data = stat_data.$internal?.delta_data;\n    if (_.has(stat_data, path)) {\n        const currentValue = _.get(stat_data, path);\n        if (Array.isArray(currentValue) && currentValue.length === 2) {\n            //VWD 处理\n            const oldValue = _.cloneDeep(currentValue[0]);\n            currentValue[0] = new_value;\n            _.set(stat_data, path, currentValue);\n            const reason_str = reason ? `(${reason})` : '';\n            const display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${trimQuotesAndBackslashes(JSON.stringify(new_value))} ${reason_str}`;\n            if (display_data) _.set(display_data, path, display_str);\n            if (delta_data) _.set(delta_data, path, display_str);\n            console.info(\n                `Set '${path}' to '${trimQuotesAndBackslashes(JSON.stringify(new_value))}' ${reason_str}`\n            );\n            if (is_recursive)\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    stat_data,\n                    path,\n                    oldValue,\n                    new_value\n                );\n            return true;\n        } else {\n            const oldValue = _.cloneDeep(currentValue);\n            _.set(stat_data, path, new_value);\n            const reason_str = reason ? `(${reason})` : '';\n            const stringNewValue = trimQuotesAndBackslashes(JSON.stringify(new_value));\n            const display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${stringNewValue} ${reason_str}`;\n            if (display_data) _.set(display_data, path, display_str);\n            if (delta_data) _.set(delta_data, path, display_str);\n            console.info(`Set '${path}' to '${stringNewValue}' ${reason_str}`);\n            if (is_recursive)\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    stat_data,\n                    path,\n                    oldValue,\n                    new_value\n                );\n            return true;\n        }\n    }\n    return false;\n}\n\nexport async function updateVariables(\n    current_message_content: string,\n    variables: any\n): Promise<boolean> {\n    const out_is_modifed = false;\n    const out_status: Record<string, any> = _.cloneDeep(variables);\n    const delta_status: Record<string, any> = { stat_data: {} };\n    const matched_set = extractSetCommands(current_message_content);\n    variables.stat_data.$internal = {\n        display_data: out_status.stat_data,\n        delta_data: delta_status.stat_data,\n    };\n    await eventEmit(variable_events.VARIABLE_UPDATE_STARTED, variables, out_is_modifed);\n    let variable_modified = false;\n    for (const setCommand of matched_set) {\n        let { path, newValue, reason } = setCommand;\n        path = pathFix(path);\n\n        if (_.has(variables.stat_data, path)) {\n            const currentValue = _.get(variables.stat_data, path);\n            //有时候llm会返回整个数组，处理它\n            if (\n                _.isString(newValue) &&\n                newValue.trim().startsWith('[') &&\n                newValue.trim().endsWith(']')\n            ) {\n                try {\n                    const parsedArray = YAML.parse(newValue);\n                    if (Array.isArray(parsedArray) && parsedArray.length > 0) {\n                        newValue = parsedArray[0];\n                    }\n                } catch (error: any) {\n                    console.error(`Error parsing JSON array for '${path}': ${error.message}`);\n                }\n            }\n            // Check the type of the current value\n            if (typeof currentValue === 'number') {\n                // If the current value is a number, convert the new value to a number\n                const newValueNumber = Number(newValue);\n                const oldValue = currentValue;\n                _.set(variables.stat_data, path, newValueNumber);\n                const reason_str = reason ? `(${reason})` : '';\n                const display_str = `${oldValue}->${newValueNumber} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(`Set '${path}' to '${newValueNumber}' ${reason_str}`);\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    newValueNumber\n                );\n            } else if (Array.isArray(currentValue) && currentValue.length === 2) {\n                // If the current value is of type ValueWithDescription<T>\n                const newValueParsed =\n                    typeof currentValue[0] === 'number'\n                        ? Number(newValue)\n                        : trimQuotesAndBackslashes(newValue);\n                const oldValue = _.cloneDeep(currentValue[0]);\n                currentValue[0] = newValueParsed;\n                _.set(variables.stat_data, path, currentValue);\n                const reason_str = reason ? `(${reason})` : '';\n                const display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${trimQuotesAndBackslashes(JSON.stringify(newValue))} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(\n                    `Set '${path}' to '${trimQuotesAndBackslashes(JSON.stringify(newValueParsed))}' ${reason_str}`\n                );\n                // Call the onVariableUpdated function after updating the variable\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    newValueParsed\n                );\n            } else {\n                // Otherwise, set the new value directly\n                const trimmedNewValue = trimQuotesAndBackslashes(newValue);\n                const oldValue = _.cloneDeep(currentValue);\n                _.set(variables.stat_data, path, trimmedNewValue);\n                const reason_str = reason ? `(${reason})` : '';\n                const stringNewValue = trimQuotesAndBackslashes(JSON.stringify(trimmedNewValue));\n                const display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${stringNewValue} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(`Set '${path}' to '${stringNewValue}' ${reason_str}`);\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    trimmedNewValue\n                );\n            }\n        } else {\n            const display_str = `undefined Path: ${path}->${newValue} (${reason})`;\n            console.error(display_str);\n        }\n    }\n\n    variables.display_data = out_status.stat_data;\n    variables.delta_data = delta_status.stat_data;\n    await eventEmit(variable_events.VARIABLE_UPDATE_ENDED, variables, out_is_modifed);\n\n    //在结束事件中也可能设置变量\n    delete variables.stat_data.$internal;\n    return variable_modified || out_is_modifed;\n}\n\nexport async function handleVariablesInMessage(message_id: number) {\n    const chat_message = getChatMessages(message_id).at(-1);\n    if (!chat_message) {\n        return;\n    }\n\n    const message_content = chat_message.message;\n    const variables = await getLastValidVariable(message_id);\n    if (!_.has(variables, 'stat_data')) {\n        console.error(`cannot found stat_data for ${message_id}`);\n        return;\n    }\n\n    const has_variable_modified = await updateVariables(message_content, variables);\n    if (has_variable_modified) {\n        const chat_variables = getVariables({ type: 'chat' });\n        // _.merge 可能使变量无法被正常移除，因此使用赋值的方式\n        chat_variables.stat_data = variables.stat_data;\n        chat_variables.display_data = variables.display_data;\n        chat_variables.delta_data = variables.delta_data;\n        chat_variables.initialized_lorebooks = variables.initialized_lorebooks;\n        await replaceVariables(chat_variables, { type: 'chat' });\n    }\n    await insertOrAssignVariables(\n        {\n            stat_data: variables.stat_data,\n            display_data: variables.display_data,\n            delta_data: variables.delta_data,\n            initialized_lorebooks: variables.initialized_lorebooks,\n        },\n        { type: 'message', message_id: message_id }\n    );\n\n    if (chat_message.role !== 'user' && !message_content.includes('<StatusPlaceHolderImpl/>')) {\n        await setChatMessages(\n            [\n                {\n                    message_id: message_id,\n                    message: message_content + '\\n\\n<StatusPlaceHolderImpl/>',\n                },\n            ],\n            {\n                refresh: 'affected',\n            }\n        );\n    }\n}\n\nexport async function handleVariablesInCallback(\n    message_content: string,\n    in_out_variable_info: VariableData\n) {\n    if (in_out_variable_info.old_variables === undefined) {\n        return;\n    }\n    in_out_variable_info.new_variables = _.cloneDeep(in_out_variable_info.old_variables);\n    const variables = in_out_variable_info.new_variables;\n\n    const modified = await updateVariables(message_content, variables);\n    //如果没有修改，则不产生 newVariable\n    if (!modified) delete in_out_variable_info.new_variables;\n    return;\n}\n","/**\n * 递归更新描述字段\n *\n * 示例数据结构：\n * initData: {\n *   \"属性\": {\n *     \"value\": 100,\n *     \"description\": \"这是初始描述\"  // 条件 4(a)\n *   },\n *   \"生命值\": [100, \"初始生命值\"],  // 条件 4(b): ValueWithDescription<number>\n *   \"技能\": [{\n *     \"name\": \"攻击\",\n *     \"damage\": [50, \"基础伤害\"],  // 嵌套的 ValueWithDescription\n *     \"description\": \"普通攻击\"\n *   }],\n *   \"装备\": {\n *     \"武器\": [\"剑\", \"初始武器\"],  // ValueWithDescription<string>\n *     \"属性加成\": {\n *       \"攻击力\": [10, \"武器攻击力加成\"]\n *     }\n *   }\n * }\n */\nexport function updateDescriptions(\n    _init_path: string,\n    init_data: any,\n    msg_data: any,\n    target_data: any\n) {\n    _.forEach(init_data, (value, key) => {\n        const current_path = key; //init_path ? `${init_path}.${key}` : key;\n\n        if (_.isArray(value)) {\n            // 检查是否为 ValueWithDescription<T> 类型 (长度为2，第二个元素是字符串)\n            if (value.length === 2 && _.isString(value[1])) {\n                // 条件 4(b): 满足 ValueWithDescription<T> 定义\n                if (_.isArray(_.get(msg_data, current_path))) {\n                    const msgValue = _.get(msg_data, current_path);\n                    if (msgValue.length === 2) {\n                        // 更新描述(第二个元素)\n                        _.set(target_data, `${current_path}[1]`, value[1]);\n\n                        // 如果第一个元素是对象或数组，需要递归处理\n                        if (_.isObject(value[0]) && !_.isArray(value[0])) {\n                            // 处理对象\n                            const targetObj = _.get(target_data, `${key}[0]`);\n\n                            // 如果对象包含description属性，需要特殊处理\n                            if (\n                                _.has(value[0], 'description') &&\n                                _.isString(value[0].description)\n                            ) {\n                                if (_.has(msgValue[0], 'description')) {\n                                    _.set(\n                                        target_data,\n                                        `${current_path}[0].description`,\n                                        value[0].description\n                                    );\n                                }\n                            }\n\n                            // 递归处理对象的其他属性\n                            updateDescriptions(\n                                `${current_path}[0]`,\n                                value[0],\n                                msgValue[0],\n                                targetObj\n                            );\n                        } else if (_.isArray(value[0])) {\n                            // 处理数组\n                            updateDescriptions(\n                                `${current_path}[0]`,\n                                value[0],\n                                msgValue[0],\n                                target_data[0]\n                            );\n                        }\n                    }\n                }\n            } else if (_.isArray(_.get(msg_data, current_path))) {\n                // 普通数组，递归处理每个元素\n                const msg_array = _.get(msg_data, current_path);\n                value.forEach((item, index) => {\n                    if (index < msg_array.length) {\n                        if (_.isObject(item)) {\n                            const current_target = _.get(target_data, `${current_path}[${index}]`);\n                            // 如果对象包含description属性，需要特殊处理\n                            if (_.has(item, 'description') && _.isString(item.description)) {\n                                if (_.has(msg_array[index], 'description')) {\n                                    _.set(current_target, `description`, item.description);\n                                }\n                            }\n\n                            updateDescriptions(\n                                `${current_path}[${index}]`,\n                                value[index],\n                                msg_array[index],\n                                current_target\n                            );\n                        }\n                    }\n                });\n            }\n        } else if (_.isObject(value)) {\n            // 处理对象\n            if (_.has(value, 'description') && _.isString(value.description)) {\n                // 条件 4(a): 对象包含 description 字段且为字符串\n                //msg_data 等已经在递归时跟着进入了更深的层次，不需要 currentPath前缀\n                const description_path = `${key}.description`;\n                if (_.has(msg_data, description_path)) {\n                    _.set(target_data, description_path, value.description);\n                }\n            }\n\n            // 继续递归处理对象的其他属性\n            if (_.has(msg_data, key) && _.isObject(msg_data[key])) {\n                updateDescriptions(current_path, value, msg_data[key], target_data[key]);\n            }\n        }\n    });\n}\n","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"parse\"]: () => (__WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_json5_esm_143ca249__.parse) });","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"parse\"]: () => (__WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_toml_esm_005ece54__.parse) });","// 整体游戏数据类型\nimport { updateVariables } from '@/function';\nimport { MvuData } from '@/variable_def';\nimport * as JSON5 from 'json5';\nimport * as TOML from 'toml';\n\ntype LorebookEntry = {\n    content: string;\n    comment?: string;\n};\n\n/**\n * 获取所有启用的 lorebook 列表\n */\nexport async function getEnabledLorebookList(): Promise<string[]> {\n    const lorebook_settings = await getLorebookSettings();\n    const enabled_lorebook_list = [...lorebook_settings.selected_global_lorebooks];\n    const char_lorebook = await getCurrentCharPrimaryLorebook();\n    if (char_lorebook !== null) {\n        enabled_lorebook_list.push(char_lorebook);\n    }\n    return enabled_lorebook_list;\n}\n\n/**\n * 从 lorebook 中加载所有 InitVar 数据并合并到提供的 GameData 中\n */\nexport async function loadInitVarData(\n    mvu_data: MvuData,\n    lorebook_list?: string[]\n): Promise<boolean> {\n    const enabled_lorebook_list = lorebook_list || (await getEnabledLorebookList());\n    let is_updated = false;\n\n    for (const current_lorebook of enabled_lorebook_list) {\n        if (mvu_data.initialized_lorebooks.includes(current_lorebook)) continue;\n        mvu_data.initialized_lorebooks.push(current_lorebook);\n        const init_entries = (await getLorebookEntries(current_lorebook)) as LorebookEntry[];\n\n        for (const entry of init_entries) {\n            if (entry.comment?.toLowerCase().includes('[initvar]')) {\n                const content = substitudeMacros(entry.content);\n                let parsedData: any = null;\n                let parseError: Error | null = null;\n\n                // Try YAML first (which also handles JSON)\n                try {\n                    parsedData = YAML.parse(content);\n                } catch (e) {\n                    // Try JSON5\n                    try {\n                        parsedData = JSON5.parse(content);\n                    } catch (e2) {\n                        // Try TOML\n                        try {\n                            parsedData = TOML.parse(content);\n                        } catch (e3) {\n                            parseError = new Error(\n                                `Failed to parse content as YAML/JSON, JSON5, or TOML: ${e3}`\n                            );\n                        }\n                    }\n                }\n\n                if (parseError) {\n                    console.error(`Failed to parse lorebook entry: ${parseError}`);\n                    // @ts-ignore\n                    toastr.error(parseError.message, 'Failed to parse lorebook entry', {\n                        timeOut: 5000,\n                    });\n                    throw parseError;\n                }\n\n                if (parsedData) {\n                    mvu_data.stat_data = _.merge(mvu_data.stat_data, parsedData);\n                }\n            }\n        }\n        is_updated = true;\n    }\n\n    return is_updated;\n}\n\n/**\n * 创建一个新的空 GameData 对象\n */\nexport function createEmptyGameData(): MvuData {\n    return {\n        display_data: {},\n        initialized_lorebooks: [],\n        stat_data: {},\n        delta_data: {},\n    };\n}\n\n/**\n * 获取最后一条消息的变量数据\n */\nexport async function getLastMessageVariables(): Promise<{\n    message: ChatMessageSwiped;\n    variables: MvuData | undefined;\n}> {\n    let last_chat_msg: ChatMessageSwiped[] = [];\n    try {\n        last_chat_msg = (await getChatMessages(-2, {\n            role: 'assistant',\n            include_swipes: true,\n        })) as ChatMessageSwiped[];\n    } catch (e) {\n        // 在第一行时，必定发生异常。\n    }\n\n    if (!last_chat_msg || last_chat_msg.length <= 0) {\n        const first_msg = await getChatMessages(0, {\n            include_swipes: true,\n        });\n        if (first_msg && first_msg.length > 0) {\n            last_chat_msg = first_msg;\n        } else {\n            throw new Error('不存在任何一条消息');\n        }\n    }\n\n    const last_msg = last_chat_msg[0];\n    const variables = last_msg.swipes_data[last_msg.swipe_id] as MvuData & Record<string, any>;\n\n    return { message: last_msg, variables };\n}\n\n/**\n * 更新 lorebook 设置为推荐配置\n */\nexport async function updateLorebookSettings(): Promise<void> {\n    /*Ref:https://github.com/lolo-desu/lolocard/blob/master/src/%E6%97%A5%E8%AE%B0%E7%BB%9C%E7%BB%9C/%E8%84%9A%E6%9C%AC/%E8%B0%83%E6%95%B4%E4%B8%96%E7%95%8C%E4%B9%A6%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE.ts\n     */\n    const dst_setting: Partial<LorebookSettings> = {\n        scan_depth: 2,\n        context_percentage: 100,\n        budget_cap: 0,\n        min_activations: 0,\n        max_depth: 0,\n        max_recursion_steps: 0,\n\n        insertion_strategy: 'character_first',\n\n        include_names: false,\n        recursive: true,\n        case_sensitive: false,\n        match_whole_words: false,\n        use_group_scoring: false,\n        overflow_alert: false,\n    };\n    const settings = getLorebookSettings();\n    if (!_.isEqual(_.merge({}, settings, dst_setting), settings)) {\n        setLorebookSettings(dst_setting);\n    }\n}\n\nexport async function initCheck() {\n    let last_msg: ChatMessageSwiped;\n    let variables: MvuData & Record<string, any>;\n\n    try {\n        const result = await getLastMessageVariables();\n        last_msg = result.message;\n        variables = result.variables ?? createEmptyGameData();\n    } catch (e) {\n        console.error('不存在任何一条消息，退出');\n        return;\n    }\n\n    // 确保变量结构完整\n    if (variables === undefined) {\n        variables = createEmptyGameData();\n    }\n    if (!_.has(variables, 'initialized_lorebooks')) {\n        variables.initialized_lorebooks = [];\n    }\n    if (!variables.stat_data) {\n        variables.stat_data = {};\n    }\n\n    // 加载 InitVar 数据\n    const is_updated = await loadInitVarData(variables);\n    if (!is_updated) {\n        return;\n    }\n\n    console.info(`Init chat variables.`);\n    await insertOrAssignVariables(variables);\n\n    // 更新所有 swipes\n    for (let i = 0; i < last_msg.swipes.length; i++) {\n        const current_swipe_data = _.cloneDeep(variables);\n        await updateVariables(substitudeMacros(last_msg.swipes[i]), current_swipe_data);\n        //新版本这个接口给deprecated了，但是新版本的接口不好用，先这样\n        //@ts-ignore\n        await setChatMessage({ data: current_swipe_data }, last_msg.message_id, {\n            refresh: 'none',\n            swipe_id: i,\n        });\n    }\n\n    // 更新 lorebook 设置\n    await updateLorebookSettings();\n}\n\n//window.initCheck = initCheck;\n","import { getLastValidVariable, handleVariablesInMessage } from '@/function';\nimport { updateDescriptions } from '@/update_descriptions';\nimport { createEmptyGameData, loadInitVarData } from '@/variable_init';\n\nconst buttons = ['重新处理变量', '重新读取初始变量'];\n\nfunction addButtons() {\n    const current_buttons = getScriptButtons(getScriptId());\n    const current_button_names = current_buttons.map(b => b.name);\n    for (const button of buttons.filter(b => !current_button_names.includes(b))) {\n        current_buttons.push({ name: button, visible: false });\n    }\n    replaceScriptButtons(getScriptId(), current_buttons);\n}\n\nexport function registerButtons() {\n    addButtons();\n\n    eventOnButton('重新处理变量', async function () {\n        const last_msg = getLastMessageId();\n        if (last_msg < 1) return;\n        if (SillyTavern.chat.length === 0) return;\n        await deleteVariable('stat_data', { type: 'message', message_id: last_msg });\n        await deleteVariable('delta_data', { type: 'message', message_id: last_msg });\n        await deleteVariable('display_data', { type: 'message', message_id: last_msg });\n        //重新处理变量\n        await handleVariablesInMessage(getLastMessageId());\n    });\n\n    eventOnButton('重新读取初始变量', async function () {\n        // 1. 创建一个新的空 GameData 并加载 InitVar 数据\n        const latest_init_data = createEmptyGameData();\n\n        try {\n            const hasInitData = await loadInitVarData(latest_init_data);\n            if (!hasInitData) {\n                console.error('没有找到 InitVar 数据');\n                toastr.error('没有找到 InitVar 数据', '', { timeOut: 3000 });\n                return;\n            }\n        } catch (e) {\n            console.error('加载 InitVar 数据失败:', e);\n            return;\n        }\n\n        // 2. 从最新楼层获取最新变量\n        const message_id = getLastMessageId();\n        if (message_id < 0) {\n            console.error('没有找到消息');\n            toastr.error('没有找到消息', '', { timeOut: 3000 });\n            return;\n        }\n\n        const latest_msg_data = await getLastValidVariable(message_id);\n\n        if (!_.has(latest_msg_data, 'stat_data')) {\n            console.error('最新消息中没有找到 stat_data');\n            toastr.error('最新消息中没有 stat_data', '', { timeOut: 3000 });\n            return;\n        }\n\n        // 3. 产生新变量，以 latest_init_data 为基础，合并入 latest_msg_data 的内容\n        //此处 latest_init_data 内不存在复杂类型，因此可以采用 structuredClone\n        const merged_data = structuredClone(latest_init_data);\n        merged_data.stat_data = _.merge(merged_data.stat_data, latest_msg_data.stat_data);\n\n        // 4-5. 遍历并更新描述字段\n        updateDescriptions(\n            '',\n            latest_init_data.stat_data,\n            latest_msg_data.stat_data,\n            merged_data.stat_data\n        );\n\n        // 6. 更新变量到最新消息\n        await replaceVariables(merged_data, { type: 'message', message_id: message_id });\n\n        console.info('InitVar更新完成');\n        toastr.success('InitVar描述已更新', '', { timeOut: 3000 });\n    });\n}\n","import { handleVariablesInCallback, updateVariable } from '@/function';\nimport {\n    extractRecord,\n    isValueWithDescription,\n    MvuData,\n    variable_events,\n    VariableData,\n} from '@/variable_def';\nimport { loadInitVarData } from '@/variable_init';\n\nfunction createMVU() {\n    const mvu = {\n        /**\n         * 变量事件常量集合\n         * 包含三个核心事件，用于监听和响应变量系统的不同更新阶段\n         *\n         * @property {string} SINGLE_VARIABLE_UPDATED - 'mag_variable_updated'\n         * 单个变量更新时触发的事件\n         * - 事件值: 'mag_variable_updated'\n         * - 回调签名: (stat_data: Record<string, any>, path: string, oldValue: any, newValue: any) => void\n         *   - stat_data: 完整的状态数据对象\n         *   - path: 被更新的变量路径（如 'player.health' 或 'items[0].name'）\n         *   - oldValue: 更新前的值\n         *   - newValue: 更新后的新值\n         * - 触发条件: 当通过 setMvuVariable / _.set 语句更新一个变量之后， 会触发这个事件\n         * - 典型用途:\n         *   - 实现变量间的联动逻辑（如等级提升时自动增加属性）\n         *   - 如果某个变量不符合更新条件，则拒绝这次更新。\n         *\n         * @property {string} VARIABLE_UPDATE_STARTED - 'mag_variable_update_started'\n         * 批量变量更新开始时触发的事件\n         * - 事件值: 'mag_variable_update_started'\n         * - 回调签名: (variables: MvuData, out_is_updated: boolean) => void\n         *   - variables: 包含 stat_data、display_data、delta_data 的完整数据对象\n         *   - out_is_updated: 弃用\n         * - 触发时机: parseMessage 或 LLM消息回复结束 开始解析命令之前\n         * - 典型用途:\n         *   - 保存更新前的状态快照\n         *   - 初始化批处理所需的临时数据结构\n         *\n         * @property {string} VARIABLE_UPDATE_ENDED - 'mag_variable_update_ended'\n         * 批量变量更新结束时触发的事件\n         * - 事件值: 'mag_variable_update_ended'\n         * - 回调签名: (variables: MvuData, out_is_updated: boolean) => void\n         *   - variables: 更新完成后的完整数据对象\n         *     - variables.stat_data: 最新的状态数据\n         *     - variables.display_data: 包含变化描述的显示数据\n         *     - variables.delta_data: 仅包含本次更新变化的数据\n         * - 触发时机: parseMessage 或 LLM消息回复结束 完成所有命令的处理后\n         * - 典型用途:\n         *   - 对变量的值进行回滚\n         *   - 根据变量的变更更新事件触发、变量取值（如日替后更新每日任务等）\n         *\n         * @example\n         * // 1. 监听单个变量更新 - 实现变量联动\n         * eventOn(Mvu.events.SINGLE_VARIABLE_UPDATED, (stat_data, path, oldValue, newValue) => {\n         *   console.log(`[变量更新] ${path}: ${oldValue} -> ${newValue}`);\n         *\n         *   // 等级提升时的连锁反应\n         *   if (path === 'player.level' && newValue > oldValue) {\n         *     const levelUp = newValue - oldValue;\n         *     // 每级增加10点生命上限\n         *     const newMaxHealth = stat_data.player.maxHealth + (levelUp * 10);\n         *     Mvu.setMvuVariable(stat_data, 'player.maxHealth', newMaxHealth, {\n         *       reason: `升级奖励(+${levelUp}级)`\n         *     });\n         *   }\n         *\n         *   // 生命值降到0时触发死亡\n         *   if (path === 'player.health' && newValue <= 0 && oldValue > 0) {\n         *     Mvu.setMvuVariable(mvuData, 'player.status', 'dead', {\n         *       reason: '生命值耗尽',\n         *       is_recursive: true  // 允许因此再次触发 events\n         *     });\n         *   }\n         * });\n         *\n         * // 2. 监听批量更新开始 - 准备UI和状态\n         * var value_snapshot = undefined;\n         * eventOn(Mvu.events.VARIABLE_UPDATE_STARTED, (variables, out_is_updated) => {\n         *   console.log('[批量更新] 开始处理变量更新...');\n         *\n         *   // 保存老值\n         *   value_snapshot = variables.stat_data.世界线变更度;\n         * });\n         *\n         * // 3. 监听批量更新结束 - 完成后处理\n         * eventOn(Mvu.events.VARIABLE_UPDATE_ENDED, (variables, out_is_updated) => {\n         *   console.log('[批量更新] 完成，是否有更新:', out_is_updated);\n         *   //使用老值覆盖，禁止llm 更新\n         *   Mvu.setMvuVariable(variables.stat_data, '世界线变更都', value_snapshot);\n         * });\n         *\n         */\n        events: variable_events,\n\n        /**\n         * 解析包含变量更新命令的消息\n         * @param message - 包含 _.set() 命令的消息字符串\n         * @param old_data - 当前的 MvuData 状态\n         * @returns 如果有变量被更新则返回新的 MvuData，否则返回 undefined\n         * @example\n         * const newData = await Mvu.parseMessage(`\n         *   _.set('player.health', 100, 80);//受到伤害\n         *   _.set('player.position', \"城镇\", \"森林\");//移动\n         * `, currentData);\n         */\n        parseMessage: async function (\n            message: string,\n            old_data: MvuData\n        ): Promise<MvuData | undefined> {\n            const variableData: VariableData = {\n                old_variables: old_data,\n            };\n            await handleVariablesInCallback(message, variableData);\n            return variableData.new_variables;\n        },\n\n        /**\n         * 获取指定作用域的 MvuData\n         * @param options - 变量选项，指定获取哪个作用域的变量（chat/message/global等）\n         * @returns MvuData 对象\n         * @example\n         * const chatData = Mvu.getMvuData({ type: 'chat' });\n         * const messageData = Mvu.getMvuData({ type: 'message', message_id: 'latest' });\n         */\n        getMvuData: function (options: VariableOption): MvuData {\n            const result = getVariables(options);\n            return result as MvuData;\n        },\n\n        /**\n         * 替换指定作用域的 MvuData\n         * @param mvu_data - 要设置的新 MvuData\n         * @param options - 变量选项，指定替换哪个作用域的变量\n         * @example\n         * await Mvu.replaceMvuData(newData, { type: 'chat' });\n         */\n        replaceMvuData: async function (mvu_data: MvuData, options: VariableOption): Promise<void> {\n            await replaceVariables(mvu_data, options);\n        },\n\n        /**\n         * 获取当前消息的 MvuData\n         * @returns 当前消息的 MvuData 对象\n         * @example\n         * const currentData = Mvu.getCurrentMvuData();\n         */\n        getCurrentMvuData: function (): MvuData {\n            const variables = getVariables({ type: 'message', message_id: getCurrentMessageId() });\n            return variables as MvuData;\n        },\n\n        /**\n         * 替换当前消息的 MvuData\n         * @param mvu_data - 要设置的新 MvuData\n         * @example\n         * await Mvu.replaceCurrentMvuData(updatedData);\n         */\n        replaceCurrentMvuData: async function (mvu_data: MvuData): Promise<void> {\n            await replaceVariables(mvu_data, {\n                type: 'message',\n                message_id: getCurrentMessageId(),\n            });\n        },\n\n        /**\n         * 重新加载初始变量数据\n         * @param mvu_data - 要重新加载初始数据的 MvuData 对象\n         * @returns 是否加载成功\n         * @example\n         * const success = await Mvu.reloadInitVar(mvuData);\n         */\n        reloadInitVar: async function (mvu_data: MvuData): Promise<boolean> {\n            return await loadInitVarData(mvu_data);\n        },\n\n        /**\n         * 设置单个变量的值\n         * @param mvu_data - 要更新的 MvuData 对象\n         * @param path - 变量路径，支持嵌套路径如 \"player.health\" 或数组索引 \"items[0]\"\n         * @param new_value - 新值\n         * @param options - 可选参数\n         * @param options.reason - 更新原因，会显示在 display_data 中\n         * @param options.is_recursive - 是否触发 mag_variable_updated 事件，默认 false\n         * @returns 更新是否成功\n         * @example\n         * // 简单更新\n         * await Mvu.setMvuVariable(data, 'player.health', 80);\n         *\n         * // 带原因的更新\n         * await Mvu.setMvuVariable(data, 'player.health', 80, { reason: '受到伤害' });\n         *\n         * // 触发事件的更新\n         * await Mvu.setMvuVariable(data, 'player.level', 2, {\n         *   reason: '升级',\n         *   is_recursive: true\n         * });\n         *\n         */\n        setMvuVariable: async function (\n            mvu_data: MvuData,\n            path: string,\n            new_value: any,\n            { reason = '', is_recursive = false }: { reason?: string; is_recursive?: boolean } = {}\n        ): Promise<boolean> {\n            return await updateVariable(mvu_data.stat_data, path, new_value, reason, is_recursive);\n        },\n\n        /**\n         * 获取变量的值\n         * @param mvu_data - MvuData 对象\n         * @param path - 变量路径，支持嵌套路径\n         * @param options - 可选参数\n         * @param options.category - 从哪个数据类别获取：'stat'(默认)/'display'/'delta'\n         * @param options.default_value - 当路径不存在时返回的默认值\n         * @returns 变量值。如果是 ValueWithDescription 类型，返回第一个元素（实际值）\n         * @example\n         * // 获取 stat_data 中的值\n         * const health = Mvu.getMvuVariable(data, 'player.health');\n         *\n         * // 获取 display_data 中的显示值\n         * const healthDisplay = Mvu.getMvuVariable(data, 'player.health', {\n         *   category: 'display'\n         * });\n         *\n         * // 带默认值\n         * const score = Mvu.getMvuVariable(data, 'player.score', {\n         *   default_value: 0\n         * });\n         */\n        getMvuVariable: function (\n            mvu_data: MvuData,\n            path: string,\n            {\n                category = 'stat',\n                default_value = undefined,\n            }: { category?: 'stat' | 'display' | 'delta'; default_value?: any } = {}\n        ): any {\n            let data: Record<string, any>;\n            switch (category) {\n                case 'stat':\n                    data = mvu_data.stat_data;\n                    break;\n                case 'display':\n                    data = mvu_data.display_data;\n                    break;\n                case 'delta':\n                    data = mvu_data.delta_data;\n                    break;\n            }\n\n            const value = _.get(data, path, default_value);\n\n            /* 如果是 VWD，取第一个元素 */\n            if (isValueWithDescription<any>(value)) {\n                return value[0];\n            }\n\n            /* 否则直接返回值本身 */\n            return value;\n        },\n\n        /**\n         * 获取指定类别的完整数据记录\n         * @param mvu_data - MvuData 对象\n         * @param category - 数据类别：'stat'/'display'/'delta'\n         * @returns 对应类别的完整数据记录对象\n         * @example\n         * // 获取所有状态数据\n         * const allStatData = Mvu.getRecordFromMvuData(data, 'stat');\n         *\n         * // 获取所有显示数据\n         * const allDisplayData = Mvu.getRecordFromMvuData(data, 'display');\n         *\n         * // 获取所有增量数据\n         * const allDeltaData = Mvu.getRecordFromMvuData(data, 'delta');\n         *\n         * @note 通常用于 LLM 准备 foreach 数据时使用\n         */\n        getRecordFromMvuData: function (\n            mvu_data: MvuData,\n            category: 'stat' | 'display' | 'delta'\n        ): Record<string, any> {\n            return extractRecord(category, mvu_data);\n        },\n    };\n    return mvu;\n}\n\nexport type MVU = ReturnType<typeof createMVU>;\n\nexport type Mvu = MVU;\n\nexport function exportGlobals() {\n    const mvu = createMVU();\n    _.set(window, 'Mvu', mvu);\n    _.set(window.parent, 'Mvu', mvu);\n}\n","import { registerButtons } from '@/button';\nimport { exportGlobals } from '@/export_globals';\nimport { handleVariablesInCallback, handleVariablesInMessage, updateVariable } from '@/function';\nimport { exported_events } from '@/variable_def';\nimport { initCheck } from '@/variable_init';\n\n$(() => {\n    registerButtons();\n    exportGlobals();\n    eventOn(tavern_events.GENERATION_STARTED, initCheck);\n    eventOn(tavern_events.MESSAGE_SENT, initCheck);\n    eventOn(tavern_events.MESSAGE_SENT, handleVariablesInMessage);\n    eventOn(tavern_events.MESSAGE_RECEIVED, handleVariablesInMessage);\n    eventOn(exported_events.INVOKE_MVU_PROCESS, handleVariablesInCallback);\n    eventOn(exported_events.UPDATE_VARIABLE, updateVariable);\n\n    // 导出到窗口，便于调试\n    _.set(window, 'handleVariablesInMessage', handleVariablesInMessage);\n});\n"],"names":["__webpack_require__","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","variable_events","SINGLE_VARIABLE_UPDATED","VARIABLE_UPDATE_ENDED","VARIABLE_UPDATE_STARTED","exported_events","trimQuotesAndBackslashes","str","_","isString","replace","findMatchingCloseParen","startPos","parenCount","inQuote","quoteChar","i","length","char","prevChar","parseParameters","paramsString","params","currentParam","bracketCount","braceCount","push","trim","async","getLastValidVariable","message_id","structuredClone","SillyTavern","chat","slice","map","chat_message","swipe_id","findLast","variables","has","getVariables","pathFix","path","segments","currentSegment","inQuotes","join","updateVariable","stat_data","new_value","reason","is_recursive","display_data","$internal","delta_data","currentValue","Array","isArray","oldValue","cloneDeep","set","reason_str","display_str","JSON","stringify","console","info","eventEmit","stringNewValue","updateVariables","current_message_content","out_is_modifed","out_status","delta_status","matched_set","inputText","results","setStart","indexOf","openParen","closeParen","endPos","comment","commentEnd","substring","fullMatch","newValue","extractSetCommands","variable_modified","setCommand","startsWith","endsWith","parsedArray","YAML","parse","error","message","newValueNumber","Number","newValueParsed","trimmedNewValue","handleVariablesInMessage","getChatMessages","at","message_content","chat_variables","type","initialized_lorebooks","replaceVariables","insertOrAssignVariables","role","includes","setChatMessages","refresh","handleVariablesInCallback","in_out_variable_info","undefined","old_variables","new_variables","updateDescriptions","_init_path","init_data","msg_data","target_data","forEach","value","current_path","msgValue","isObject","targetObj","description","msg_array","item","index","current_target","description_path","y","x","__WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_json5_esm_143ca249__","__WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_toml_esm_005ece54__","loadInitVarData","mvu_data","lorebook_list","enabled_lorebook_list","getLorebookSettings","selected_global_lorebooks","char_lorebook","getCurrentCharPrimaryLorebook","getEnabledLorebookList","is_updated","current_lorebook","init_entries","getLorebookEntries","entry","toLowerCase","content","substitudeMacros","parsedData","parseError","e","e2","e3","Error","toastr","timeOut","merge","initCheck","last_msg","result","last_chat_msg","include_swipes","first_msg","swipes_data","getLastMessageVariables","swipes","current_swipe_data","setChatMessage","data","dst_setting","scan_depth","context_percentage","budget_cap","min_activations","max_depth","max_recursion_steps","insertion_strategy","include_names","recursive","case_sensitive","match_whole_words","use_group_scoring","overflow_alert","settings","isEqual","setLorebookSettings","updateLorebookSettings","buttons","registerButtons","current_buttons","getScriptButtons","getScriptId","current_button_names","b","name","button","filter","visible","replaceScriptButtons","addButtons","eventOnButton","getLastMessageId","deleteVariable","latest_init_data","latest_msg_data","merged_data","success","createMVU","events","parseMessage","old_data","variableData","getMvuData","options","replaceMvuData","getCurrentMvuData","getCurrentMessageId","replaceCurrentMvuData","reloadInitVar","setMvuVariable","getMvuVariable","category","default_value","isValueWithDescription","getRecordFromMvuData","game_data","extractRecord","$","mvu","window","parent","exportGlobals","eventOn","tavern_events","GENERATION_STARTED","MESSAGE_SENT","MESSAGE_RECEIVED"],"sourceRoot":""}