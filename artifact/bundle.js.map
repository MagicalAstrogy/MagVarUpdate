{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://mag-variable-update/webpack/bootstrap","webpack://mag-variable-update/./src/variable_def.ts","webpack://mag-variable-update/webpack/runtime/define property getters","webpack://mag-variable-update/webpack/runtime/hasOwnProperty shorthand","webpack://mag-variable-update/external module \"https://testingcf.jsdelivr.net/npm/mathjs/+esm\"","webpack://mag-variable-update/./src/schema.ts","webpack://mag-variable-update/./src/function.ts","webpack://mag-variable-update/./src/update_descriptions.ts","webpack://mag-variable-update/external module \"https://testingcf.jsdelivr.net/npm/json5/+esm\"","webpack://mag-variable-update/external module \"https://testingcf.jsdelivr.net/npm/toml/+esm\"","webpack://mag-variable-update/./src/variable_init.ts","webpack://mag-variable-update/./src/button.ts","webpack://mag-variable-update/./src/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// 模板类型定义\nexport type TemplateType = StatData | StatData[] | any[];\n\n// StatData 的元数据类型定义\nexport type StatDataMeta = {\n    extensible?: boolean;\n    recursiveExtensible?: boolean;\n    required?: string[];\n    template?: TemplateType; // 模板定义，用于自动填充新元素\n    [key: string]: unknown;\n};\n\n// StatData 类型定义 - 支持嵌套对象和数组，可以有 $meta 属性\nexport type StatData = {\n    [key: string]: StatData | unknown | StatData[];\n} & {\n    $meta?: StatDataMeta;\n    $$arrayMeta?: boolean;\n};\n\n// Schema 节点类型定义\nexport type SchemaNode = ObjectSchemaNode | ArraySchemaNode | PrimitiveSchemaNode;\n\n// 对象类型的 Schema 节点\nexport type ObjectSchemaNode = {\n    type: 'object';\n    properties: {\n        [key: string]: SchemaNode & { required?: boolean };\n    };\n    extensible?: boolean;\n    template?: TemplateType; // 新增属性的模板\n    recursiveExtensible?: boolean;\n};\n\n// 数组类型的 Schema 节点\nexport type ArraySchemaNode = {\n    type: 'array';\n    elementType: SchemaNode;\n    extensible?: boolean;\n    template?: TemplateType; // 新增元素的模板\n    recursiveExtensible?: boolean;\n};\n\n// 原始类型的 Schema 节点\nexport type PrimitiveSchemaNode = {\n    type: 'string' | 'number' | 'boolean' | 'any';\n};\n\n// ValueWithDescription 类型 - 用于表示带描述的值\nexport type ValueWithDescription<T> = [T, string];\n\n// 类型守卫函数\nexport function isArraySchema(value: SchemaNode): value is ArraySchemaNode {\n    return value.type === 'array';\n}\n\nexport function isObjectSchema(value: SchemaNode): value is ObjectSchemaNode {\n    return value.type === 'object';\n}\n\nexport function isPrimitiveSchema(value: SchemaNode): value is PrimitiveSchemaNode {\n    return (\n        value.type === 'string' ||\n        value.type === 'number' ||\n        value.type === 'boolean' ||\n        value.type === 'any'\n    );\n}\n\nexport type RootAdditionalProps = {\n    strictTemplate?: boolean;\n    concatTemplateArray?: boolean;\n};\n\nexport type RootAdditionalMetaProps = {\n    $meta?: StatDataMeta & RootAdditionalProps;\n};\n\nexport type GameData = {\n    // initialized_lorebooks 从字符串列表变为记录对象\n    // 这样可以为每个知识库存储元数据，例如初始化的标记变量\n    initialized_lorebooks: Record<string, any[]>;\n    stat_data: StatData & RootAdditionalMetaProps;\n    display_data: Record<string, any>;\n    delta_data: Record<string, any>;\n    // 用于存储数据结构的模式\n    schema?: ObjectSchemaNode & Partial<RootAdditionalProps>;\n};\n\nexport interface VariableData {\n    old_variables: GameData;\n    /**\n     * 输出变量，仅当实际产生了变量变更的场合，会产生 newVariables\n     */\n    new_variables?: GameData;\n}\n\nexport const variable_events = {\n    SINGLE_VARIABLE_UPDATED: 'mag_variable_updated',\n    VARIABLE_UPDATE_ENDED: 'mag_variable_update_ended',\n    VARIABLE_UPDATE_STARTED: 'mag_variable_update_started',\n    INVOKE_MVU_PROCESS: 'mag_invoke_mvu',\n} as const;\n\nexport type ExtendedListenerType = {\n    [variable_events.SINGLE_VARIABLE_UPDATED]: (\n        stat_data: Record<string, any>,\n        path: string,\n        _oldValue: any,\n        _newValue: any\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_STARTED]: (\n        variables: GameData,\n        out_is_updated: boolean\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_ENDED]: (variables: GameData, out_is_updated: boolean) => void;\n    [variable_events.INVOKE_MVU_PROCESS]: (\n        message_content: string,\n        variable_info: VariableData\n    ) => void;\n};\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_mathjs_esm_aec644b1__;","import {\n    SchemaNode,\n    StatData,\n    isArraySchema,\n    isObjectSchema,\n    ObjectSchemaNode,\n    GameData,\n    ArraySchemaNode,\n    TemplateType,\n    RootAdditionalProps,\n} from '@/variable_def';\n\n// 定义魔法字符串为常量，便于管理和引用\nexport const EXTENSIBLE_MARKER = '$__META_EXTENSIBLE__$';\n\n// 模式生成函数\n/**\n * 递归地为数据对象生成一个模式。\n * @param data - 要为其生成模式的数据对象 (stat_data)。\n * @param oldSchemaNode - (可选) 来自旧 Schema 的对应节点，用于继承元数据。\n * @param parentRecursiveExtensible - (可选) 父节点的 recursiveExtensible 状态，默认为 false。\n * @returns - 生成的模式对象。\n */\nexport function generateSchema(\n    data: any,\n    oldSchemaNode?: SchemaNode,\n    parentRecursiveExtensible: boolean = false\n): SchemaNode {\n    if (Array.isArray(data)) {\n        let isExtensible = false;\n        let isRecursiveExtensible = parentRecursiveExtensible;\n        let oldElementType: SchemaNode | undefined;\n        let template: TemplateType | undefined;\n\n        // 使用类型守卫检查 oldSchemaNode 是否为 ArraySchemaNode\n        if (oldSchemaNode) {\n            if (isArraySchema(oldSchemaNode)) {\n                isExtensible = oldSchemaNode.extensible === true;\n                isRecursiveExtensible =\n                    oldSchemaNode.recursiveExtensible === true || parentRecursiveExtensible;\n                oldElementType = oldSchemaNode.elementType;\n                template = oldSchemaNode.template;\n            } else {\n                console.error(\n                    `Type mismatch: expected array schema but got ${oldSchemaNode.type} at path`\n                );\n            }\n        }\n\n        // 检查是否有只包含 $meta 的元素\n        const metaElementIndex = data.findIndex(\n            item =>\n                _.isObject(item) &&\n                !_.isDate(item) &&\n                '$arrayMeta' in item &&\n                '$meta' in item &&\n                item['$arrayMeta'] === true\n        );\n\n        if (metaElementIndex !== -1) {\n            const metaElement = data[metaElementIndex] as { $meta: any };\n            // 从 $meta 中提取数组的元数据\n            if (metaElement.$meta.extensible !== undefined) {\n                isExtensible = metaElement.$meta.extensible;\n            }\n            if (metaElement.$meta.template !== undefined) {\n                template = metaElement.$meta.template;\n            }\n            // 从数组中移除这个元数据元素\n            data.splice(metaElementIndex, 1);\n            console.log(`Array metadata element found and processed.`);\n        }\n\n        // 检查并处理魔法字符串\n        const markerIndex = data.indexOf(EXTENSIBLE_MARKER);\n        if (markerIndex > -1) {\n            isExtensible = true;\n            // 从数组中移除标记，以免影响后续的类型推断\n            data.splice(markerIndex, 1);\n            console.log(`Extensible marker found and removed from an array.`);\n        }\n\n        const schema_node: ArraySchemaNode = {\n            type: 'array',\n            extensible: isExtensible || parentRecursiveExtensible,\n            recursiveExtensible: isRecursiveExtensible,\n            elementType:\n                data.length > 0\n                    ? generateSchema(data[0], oldElementType, isRecursiveExtensible)\n                    : { type: 'any' },\n        };\n\n        if (template !== undefined) {\n            schema_node.template = template;\n        }\n\n        return schema_node;\n    }\n    if (_.isObject(data) && !_.isDate(data)) {\n        const typedData = data as StatData; // 类型断言\n\n        // 使用类型守卫检查 oldSchemaNode 是否为 ObjectSchemaNode\n        let oldExtensible = false;\n        let oldRecursiveExtensible = parentRecursiveExtensible;\n        let oldProperties: ObjectSchemaNode['properties'] | undefined;\n\n        if (oldSchemaNode) {\n            if (isObjectSchema(oldSchemaNode)) {\n                oldExtensible = oldSchemaNode.extensible === true;\n                oldRecursiveExtensible =\n                    oldSchemaNode.recursiveExtensible === true || parentRecursiveExtensible;\n                oldProperties = oldSchemaNode.properties;\n            } else {\n                console.error(\n                    `Type mismatch: expected object schema but got ${oldSchemaNode.type} at path`\n                );\n            }\n        }\n\n        const schemaNode: ObjectSchemaNode = {\n            type: 'object',\n            properties: {},\n            // 默认不可扩展，但检查旧 schema、$meta.extensible 或 parentRecursiveExtensible\n            extensible:\n                oldExtensible ||\n                typedData.$meta?.extensible === true ||\n                typedData.$meta?.recursiveExtensible === true ||\n                parentRecursiveExtensible,\n            recursiveExtensible:\n                oldRecursiveExtensible || typedData.$meta?.recursiveExtensible === true,\n        };\n\n        // 处理 template\n        if (typedData.$meta?.template !== undefined) {\n            schemaNode.template = typedData.$meta.template;\n        } else if (oldSchemaNode && isObjectSchema(oldSchemaNode) && oldSchemaNode.template) {\n            schemaNode.template = oldSchemaNode.template;\n        }\n\n        // 暂存父节点的 $meta，以便在循环中使用\n        const parentMeta = typedData.$meta;\n\n        // 从 $meta 中读取信息后，将其从数据中移除，避免污染\n        if (typedData.$meta) {\n            delete typedData.$meta;\n        }\n\n        for (const key in data) {\n            const oldChildNode = oldProperties?.[key];\n            // 传递当前节点的 recursiveExtensible（如果存在）或父节点的 recursiveExtensible\n            // 但如果当前节点明确设置 extensible: false, 则停止递归扩展\n            const childRecursiveExtensible =\n                schemaNode.extensible !== false && schemaNode.recursiveExtensible;\n            const childSchema = generateSchema(\n                typedData[key],\n                oldChildNode,\n                childRecursiveExtensible\n            );\n\n            // 一个属性是否必需？\n\n            // 1. 默认值: 如果父节点可扩展，子节点默认为可选；否则为必需。\n            let isRequired = !schemaNode.extensible;\n\n            // 2. 覆盖规则: 检查父元数据中的 'required' 数组。\n            //    如果父节点的 $meta.required 是一个数组，并且当前 key 在这个数组里，\n            //    则无论默认值是什么，都强制覆盖为必需。\n            if (Array.isArray(parentMeta?.required) && parentMeta.required.includes(key)) {\n                isRequired = true;\n            }\n\n            // 3. 检查旧 schema 的设置，作为最后的参考\n            if (oldChildNode?.required === false) {\n                // 如果旧 schema 明确说这个是可选的，那么以这个为准\n                isRequired = false;\n            } else if (oldChildNode?.required === true) {\n                isRequired = true;\n            }\n\n            schemaNode.properties[key] = {\n                ...childSchema,\n                required: isRequired,\n            };\n        }\n        return schemaNode;\n    }\n    // 处理原始类型\n    const dataType = typeof data;\n    if (dataType === 'string' || dataType === 'number' || dataType === 'boolean') {\n        return { type: dataType };\n    }\n    // 对于其他类型（function, symbol, bigint, undefined 等），默认返回 'any'\n    return { type: 'any' };\n}\n\n/**\n * 辅助函数：为数据路径获取对应的 Schema 规则。\n * 能够处理数组索引，将其转换为 .elementType 来查询 Schema。\n * @param schema - 完整的 Schema 对象\n * @param path - 要查询的数据路径\n * @returns 对应路径的 Schema 节点，如果找不到则返回 null。\n */\nexport function getSchemaForPath(\n    schema: SchemaNode | null | undefined,\n    path: string\n): SchemaNode | null {\n    if (!path || !schema) {\n        return schema || null;\n    }\n    // 将 lodash 路径字符串转换为段数组，例如 'a.b[0].c' -> ['a', 'b', '0', 'c']\n    const pathSegments = _.toPath(path);\n    let currentSchema: SchemaNode | null = schema;\n\n    for (const segment of pathSegments) {\n        if (!currentSchema) return null;\n\n        // 如果 segment 是数字（数组索引），则移动到 elementType\n        if (/^\\d+$/.test(segment)) {\n            if (isArraySchema(currentSchema)) {\n                currentSchema = currentSchema.elementType;\n            } else {\n                return null; // 路径试图索引一个非数组或无 elementType 的 schema\n            }\n        } else if (isObjectSchema(currentSchema) && currentSchema.properties[segment]) {\n            // 否则，作为对象属性访问\n            const property = currentSchema.properties[segment];\n            currentSchema = property as SchemaNode;\n        } else {\n            return null; // 路径中的键在 schema 中不存在\n        }\n    }\n    return currentSchema;\n}\n\n/**\n * 调和函数：比较数据和旧 Schema，生成并应用一个与当前数据状态完全同步的新 Schema。\n * @param variables - 包含 stat_data 和旧 schema 的变量对象。\n */\nexport function reconcileAndApplySchema(variables: GameData) {\n    console.log('Reconciling schema with current data state...');\n\n    // 1. 深拷贝数据，以防 generateSchema 修改原始数据（例如删除 $meta）\n    const currentDataClone = _.cloneDeep(variables.stat_data);\n\n    // 2. 使用改进后的 generateSchema 生成一个与当前数据完全匹配的新 Schema，\n    //    并在此过程中从旧 Schema 继承元数据。\n    const newSchema = generateSchema(currentDataClone, variables.schema);\n\n    // 3. 直接用新 Schema 替换旧 Schema\n    // stat_data 的根节点应该始终是对象，所以生成的 schema 也应该是 ObjectSchemaNode\n    if (!isObjectSchema(newSchema)) {\n        console.error(\n            'Generated schema is not an object schema, which is unexpected for stat_data root'\n        );\n        return;\n    }\n\n    // 保留 RootAdditionalProps\n    const newSchemaWithProps = newSchema as ObjectSchemaNode & RootAdditionalProps;\n    if (variables.schema?.strictTemplate !== undefined) {\n        newSchemaWithProps.strictTemplate = variables.schema.strictTemplate;\n    }\n    if (variables.schema?.concatTemplateArray !== undefined) {\n        newSchemaWithProps.concatTemplateArray = variables.schema.concatTemplateArray;\n    }\n    if (_.has(variables.stat_data, '$meta.strictTemplate'))\n        newSchemaWithProps.strictTemplate = variables.stat_data['$meta']?.strictTemplate as boolean;\n    if (_.has(variables.stat_data, '$meta.concatTemplateArray'))\n        newSchemaWithProps.concatTemplateArray = variables.stat_data['$meta']\n            ?.concatTemplateArray as boolean;\n\n    variables.schema = newSchemaWithProps;\n\n    console.log('Schema reconciliation complete.');\n}\n\nfunction isMetaCarrier(value: unknown): value is Record<string, unknown> & { $meta?: unknown } {\n    return _.isObject(value) && !_.isDate(value);\n}\n\n/**\n * 递归清理数据中的元数据标记\n * - 从数组中移除 EXTENSIBLE_MARKER\n * - 从对象中删除 $meta 属性\n * @param data 需要清理的数据\n */\nexport function cleanUpMetadata(data: any): void {\n    // 如果是数组，移除魔法字符串和只包含 $meta 的元素，并递归\n    if (Array.isArray(data)) {\n        let i = data.length;\n        while (i--) {\n            if (data[i] === EXTENSIBLE_MARKER) {\n                data.splice(i, 1);\n            } else if (\n                _.isObject(data[i]) &&\n                !_.isDate(data[i]) &&\n                '$arrayMeta' in data[i] &&\n                '$meta' in data[i] &&\n                data[i]['$arrayMeta'] === true\n            ) {\n                // 移除只包含 $meta & $arrayMeta 的元素\n                data.splice(i, 1);\n            } else {\n                // 对数组中的其他元素（可能是对象或数组）进行递归清理\n                cleanUpMetadata(data[i]);\n            }\n        }\n    }\n    // 如果是对象，移除 $meta 并递归\n    else if (isMetaCarrier(data)) {\n        // 清除自身 $meta\n        delete data.$meta;\n\n        // 递归\n        for (const key in data) {\n            cleanUpMetadata(data[key]);\n        }\n    }\n}\n","import { variable_events, VariableData, GameData, TemplateType } from '@/variable_def';\nimport * as math from 'mathjs';\n\nimport { getSchemaForPath, reconcileAndApplySchema } from '@/schema';\nimport { isArraySchema, isObjectSchema } from '@/variable_def';\n\nexport function trimQuotesAndBackslashes(str: string): string {\n    if (!_.isString(str)) return str;\n    // Regular expression to match backslashes and quotes (including backticks) at the beginning and end\n    return str.replace(/^[\\\\\"'` ]*(.*?)[\\\\\"'` ]*$/, '$1');\n}\n\n/**\n * 应用模板到值上，值的属性优先级高于模板\n * @param value 要应用模板的值\n * @param template 模板 (TemplateType | undefined)\n * @param strict_array_cast 是否开启严格模式，开启后不允许 primitive type -> [primitive type] 的隐式转换\n * @param array_merge_concat 指明数组的 合并 行为是指 覆盖 还是 拼接，默认拼接。\n * @returns 合并后的值\n */\nexport function applyTemplate(\n    value: any,\n    template: TemplateType | undefined,\n    strict_array_cast: boolean = false,\n    array_merge_concat: boolean = true\n): any {\n    // 如果没有模板，直接返回原值\n    if (!template) {\n        return value;\n    }\n\n    // 检查类型是否匹配\n    const value_is_object = _.isObject(value) && !Array.isArray(value) && !_.isDate(value);\n    const value_is_array = Array.isArray(value);\n    const template_is_array = Array.isArray(template);\n\n    if (value_is_object && !template_is_array) {\n        // value 是对象，template 是 StatData（对象）\n        // 先应用模板，再应用值，确保值的优先级更高\n        return _.merge({}, template, value);\n    } else if (value_is_array && template_is_array) {\n        // 都是数组，进行合并\n        if (array_merge_concat) return _.concat(value, template);\n        return _.merge([], template, value);\n    } else if (\n        ((value_is_object || value_is_array) && template_is_array !== value_is_array) ||\n        (!value_is_object && !value_is_array && _.isObject(template) && !Array.isArray(template))\n    ) {\n        // 类型不匹配\n        console.error(\n            `Template type mismatch: template is ${template_is_array ? 'array' : 'object'}, but value is ${value_is_array ? 'array' : 'object'}. Skipping template merge.`\n        );\n        return value;\n    } else if (!value_is_object && !value_is_array && template_is_array) {\n        // 特殊情况：值是原始类型（字面量），模板是数组\n        // 当作 [value] 进行数组的合并\n        if (strict_array_cast)\n            //严格模式不提供 primitive type -> [primitive type] 的转换\n            return value;\n        if (array_merge_concat) return _.concat([value], template);\n        return _.merge([], template, [value]);\n    } else {\n        // 其他情况：值是原始类型，模板不是数组，不应用模板\n        return value;\n    }\n}\n\n// 一个更安全的、用于解析命令中值的辅助函数\n// 它会尝试将字符串解析为 JSON, 布尔值, null, 数字, 或数学表达式\nexport function parseCommandValue(valStr: string): any {\n    if (typeof valStr !== 'string') return valStr;\n    const trimmed = valStr.trim();\n\n    // 检查布尔值/null/undefined\n    if (trimmed === 'true') return true;\n    if (trimmed === 'false') return false;\n    if (trimmed === 'null') return null;\n    if (trimmed === 'undefined') return undefined;\n\n    try {\n        // 如果字符串能被 JSON.parse 解析，说明它是一个标准格式，直接返回解析结果\n        return JSON.parse(trimmed);\n    } catch (e) {\n        // Handle JavaScript array or object literals\n        if (\n            (trimmed.startsWith('{') && trimmed.endsWith('}')) ||\n            (trimmed.startsWith('[') && trimmed.endsWith(']'))\n        ) {\n            try {\n                // Safely evaluate literals using a function constructor\n                const result = new Function(`return ${trimmed};`)();\n                if (_.isObject(result) || Array.isArray(result)) {\n                    return result;\n                }\n            } catch (err) {\n                // 如果解析失败，说明它可能是一个未加引号的字符串或数学表达式，继续往下走\n            }\n        }\n    }\n\n    // 如果代码走到这里，说明 trimmed 是一个未加引号的字符串，例如：\n    // 'hello_world', '10 + 2', 'sqrt(16)'\n\n    try {\n        // 创建一个 scope 对象，将多种数学库/对象注入到 mathjs 的执行环境中，\n        // 以便统一处理不同风格的数学表达式。\n        const scope = {\n            // 支持 JavaScript 标准的 Math 对象 (e.g., Math.sqrt(), Math.PI)\n            Math: Math,\n            // 支持 Python 风格的 math 库用法 (e.g., math.sqrt(), math.pi)，\n            // 这在 LLM 生成的代码中很常见。\n            // 'math' 是我们导入的 mathjs 库本身。\n            math: math,\n        };\n        // 尝试使用 mathjs 进行数学求值\n        // math.evaluate 对于无法识别为表达式的纯字符串会抛出错误\n        const result = math.evaluate(trimmed, scope);\n        // 如果结果是 mathjs 的复数或矩阵对象，则将其转换为字符串表示形式\n        if (math.isComplex(result) || math.isMatrix(result)) {\n            return result.toString();\n        }\n        // 避免将单个单词的字符串（mathjs可能将其识别为符号）作为 undefined 返回\n        if (result === undefined && !/^[a-zA-Z_]+$/.test(trimmed)) {\n            return trimmed; // 如果是 undefined 但不是一个简单的符号名，则可能是解析错误\n        }\n        if (result !== undefined) {\n            // 使用 toPrecision 来处理浮点数精度造成的误差问题\n            return parseFloat(result.toPrecision(12));\n        }\n    } catch (err) {\n        // 如果 math.evaluate 失败，说明它不是一个有效的表达式，\n        // 那么它就是一个普通的未加引号的字符串。\n    }\n\n    // 实验性功能，暂不启用\n    // 尝试将字符串解析为日期对象，用于传入_.add直接以毫秒数更新时间，如 `_.add('当前时间', 10 * 60 * 1000);`\n    // 此检查用于识别日期字符串（例如 \"2024-01-01T12:00:00Z\"）\n    // `isNaN(Number(trimmed))`确保纯数字字符串（如 \"12345\"）不会被错误地解析为日期\n    /*\n    if (isNaN(Number(trimmed))) {\n        const potentialDate = new Date(trimQuotesAndBackslashes(trimmed));\n        if (!isNaN(potentialDate.getTime())) {\n            return potentialDate;\n        }\n    }\n    */\n\n    try {\n        // 尝试 YAML.parse\n        return YAML.parse(trimmed);\n    } catch (e) {\n        /* empty */\n    }\n\n    // 最终，返回这个去除了首尾引号的字符串\n    return trimQuotesAndBackslashes(valStr);\n}\n\n/**\n * Type definition for CommandNames representing a set of valid command strings.\n *\n * This type is used to define a finite and specific set of command string values\n * that may be used in operations or functions requiring predefined command names.\n *\n * The allowed command names are:\n * - 'set': Represents a command to set a value.\n * - 'insert': Alias of 'assign'\n * - 'assign': Represents a command to assign a value or reference.\n * - 'remove': Represents a command to remove an item or data.\n * - 'add': Represents a command to add an item or data.\n */\ntype CommandNames = 'set' | 'insert' | 'assign' | 'remove' | 'add';\n\n/**\n * 从大字符串中提取所有 .set(${path}, ${new_value});//${reason} 格式的模式\n * 并解析出每个匹配项的路径、新值和原因部分\n */\n// 接口定义：用于统一不同命令的结构\n// 新增：Command 接口，比 SetCommand 更通用\ninterface Command {\n    command: CommandNames;\n    fullMatch: string;\n    args: string[];\n    reason: string;\n}\n\n/**\n * 从输入文本中提取所有 _.set() 调用\n *\n * 问题背景：\n * 原本使用正则表达式 /_\\.set\\(([\\s\\S]*?)\\);/ 来匹配，但这种非贪婪匹配会在遇到\n * 嵌套的 ); 时提前结束。例如：\n * _.set('path', [\"text with _.set('inner',null);//comment\"], []);\n * 会在 \"comment\") 处错误地结束匹配\n *\n * 解决方案：\n * 使用状态机方法，通过计数括号配对来准确找到 _.set() 调用的结束位置\n */\n// 将 extractSetCommands 扩展为 extractCommands 以支持多种命令\nexport function extractCommands(inputText: string): Command[] {\n    const results: Command[] = [];\n    let i = 0;\n\n    while (i < inputText.length) {\n        // 循环处理整个输入文本，直到找不到更多命令\n        // 使用正则匹配 _.set(、_.assign(、_.remove( 或 _.add(，重构后支持多种命令\n        const setMatch = inputText.substring(i).match(/_\\.(set|assign|remove|add)\\(/);\n        if (!setMatch || setMatch.index === undefined) {\n            // 没有找到匹配的命令，退出循环，防止无限循环\n            break;\n        }\n\n        // 提取命令类型（set、assign、remove 或 add），并计算命令的起始位置\n        const commandType = setMatch[1] as CommandNames;\n        const setStart = i + setMatch.index;\n        // 计算开括号位置，用于后续提取参数\n        const openParen = setStart + setMatch[0].length;\n\n        // 使用 findMatchingCloseParen 查找匹配的闭括号，解决原正则匹配在嵌套结构（如 _.set('path', ['inner);'])）中提前结束的问题\n        const closeParen = findMatchingCloseParen(inputText, openParen);\n        if (closeParen === -1) {\n            // 找不到闭括号，说明命令格式错误\n            // 跳过此无效命令，并从开括号后继续搜索，以防无限循环\n            i = openParen; // 从开括号后继续搜索\n            continue; // 继续 while 循环，寻找下一个命令\n        }\n\n        // 检查闭括号后是否紧跟分号，确保命令语法完整，防止误解析字符串中的类似结构\n        let endPos = closeParen + 1;\n        if (endPos >= inputText.length || inputText[endPos] !== ';') {\n            // 没有分号，命令无效，跳到闭括号后继续搜索，避免误解析\n            i = closeParen + 1;\n            continue;\n        }\n        endPos++; // 包含分号，更新命令结束位置\n\n        // 提取可能的注释（// 开头），用于记录命令的 reason\n        let comment = '';\n        const potentialComment = inputText.substring(endPos).match(/^\\s*\\/\\/(.*)/);\n        if (potentialComment) {\n            // 提取注释内容并去除首尾空格，更新结束位置\n            comment = potentialComment[1].trim();\n            endPos += potentialComment[0].length;\n        }\n\n        // 提取完整命令字符串，用于返回结果中的 fullMatch 字段，便于追踪原始内容\n        const fullMatch = inputText.substring(setStart, endPos);\n        // 提取参数字符串，位于开括号和闭括号之间\n        const paramsString = inputText.substring(openParen, closeParen);\n        // 使用 parseParameters 解析参数，支持嵌套结构（如数组、对象）\n        const params = parseParameters(paramsString);\n\n        // 验证命令有效性，根据命令类型检查参数数量，防止无效命令进入结果\n        let isValid = false;\n        if (commandType === 'set' && params.length >= 2)\n            isValid = true; // _.set 至少需要路径和值\n        else if (commandType === 'assign' && params.length >= 2)\n            isValid = true; // _.assign 支持两种参数格式\n        else if (commandType === 'insert' && params.length >= 2)\n            isValid = true; // _.insert 支持两种参数格式\n        else if (commandType === 'remove' && params.length >= 1)\n            isValid = true; // _.remove 至少需要路径\n        else if (commandType === 'add' && /*params.length === 1 || */ params.length === 2)\n            isValid = true; // _.add 需要1个或2个参数\n\n        if (isValid) {\n            // 命令有效，添加到结果列表，包含命令类型、完整匹配、参数和注释\n            results.push({ command: commandType, fullMatch, args: params, reason: comment });\n        }\n\n        // 更新搜索索引到命令末尾，继续查找下一个命令\n        i = endPos;\n    }\n\n    // 返回所有解析出的有效命令\n    return results;\n}\n\n/**\n * 辅助函数：找到匹配的闭括号\n *\n * 算法说明：\n * 1. 使用括号计数器，遇到 ( 加1，遇到 ) 减1\n * 2. 当计数器归零时，找到了匹配的闭括号\n * 3. 重要：忽略引号内的括号，避免字符串内容干扰匹配\n *\n * @param str 要搜索的字符串\n * @param startPos 开始括号的位置\n * @returns 匹配的闭括号位置，如果找不到返回 -1\n */\nfunction findMatchingCloseParen(str: string, startPos: number): number {\n    let parenCount = 1; // 从1开始，因为已经有一个开括号\n    let inQuote = false;\n    let quoteChar = '';\n\n    for (let i = startPos; i < str.length; i++) {\n        const char = str[i];\n        const prevChar = i > 0 ? str[i - 1] : '';\n\n        // 处理引号状态\n        // 支持三种引号：双引号、单引号和反引号（模板字符串）\n        // 注意：需要检查前一个字符不是反斜杠，以正确处理转义的引号\n        if ((char === '\"' || char === \"'\" || char === '`') && prevChar !== '\\\\') {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        // 只在不在引号内时计算括号\n        // 这确保了像 \"text with )\" 这样的字符串不会影响括号匹配\n        if (!inQuote) {\n            if (char === '(') {\n                parenCount++;\n            } else if (char === ')') {\n                parenCount--;\n                if (parenCount === 0) {\n                    return i;\n                }\n            }\n        }\n    }\n\n    return -1; // 没有找到匹配的闭括号\n}\n\n// 解析参数字符串，处理嵌套结构\n// 增加了对圆括号的层级计数。\nexport function parseParameters(paramsString: string): string[] {\n    const params: string[] = [];\n    let currentParam = '';\n    let inQuote = false;\n    let quoteChar = '';\n    let bracketCount = 0;\n    let braceCount = 0;\n    let parenCount = 0;\n\n    for (let i = 0; i < paramsString.length; i++) {\n        const char = paramsString[i];\n\n        // 处理引号（包括反引号）\n        if (\n            (char === '\"' || char === \"'\" || char === '`') &&\n            (i === 0 || paramsString[i - 1] !== '\\\\')\n        ) {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        if (!inQuote) {\n            // 处理圆括号 (函数调用、数学运算等)\n            if (char === '(') parenCount++;\n            if (char === ')') parenCount--;\n\n            // 处理方括号 (数组)\n            if (char === '[') bracketCount++;\n            if (char === ']') bracketCount--;\n\n            // 处理花括号 (对象)\n            if (char === '{') braceCount++;\n            if (char === '}') braceCount--;\n        }\n        // 处理参数分隔符\n        // 现在只有当所有括号都匹配闭合时，逗号才被视为分隔符\n        if (\n            char === ',' &&\n            !inQuote &&\n            parenCount === 0 &&\n            bracketCount === 0 &&\n            braceCount === 0\n        ) {\n            params.push(currentParam.trim());\n            currentParam = '';\n            continue;\n        }\n\n        currentParam += char;\n    }\n\n    // 添加最后一个参数\n    if (currentParam.trim()) {\n        params.push(currentParam.trim());\n    }\n\n    return params;\n}\n\nexport async function getLastValidVariable(message_id: number): Promise<GameData> {\n    return (structuredClone(\n        _(SillyTavern.chat)\n            .slice(0, message_id + 1)\n            .map(chat_message => _.get(chat_message, ['variables', chat_message.swipe_id ?? 0]))\n            .findLast(variables => _.has(variables, 'stat_data'))\n    ) ?? getVariables()) as GameData;\n}\n\nfunction pathFix(path: string): string {\n    const segments = [];\n    let currentSegment = '';\n    let inQuotes = false;\n    let quoteChar = '';\n\n    for (let i = 0; i < path.length; i++) {\n        const char = path[i];\n\n        // Handle quotes\n        if ((char === '\"' || char === \"'\") && (i === 0 || path[i - 1] !== '\\\\')) {\n            if (!inQuotes) {\n                inQuotes = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuotes = false;\n            } else {\n                currentSegment += char;\n            }\n        } else if (char === '.' && !inQuotes) {\n            segments.push(currentSegment);\n            currentSegment = '';\n        } else {\n            currentSegment += char;\n        }\n    }\n\n    if (currentSegment) {\n        segments.push(currentSegment);\n    }\n\n    return segments.join('.');\n}\n\n// 重构 updateVariables 以处理更多命令\nexport async function updateVariables(\n    current_message_content: string,\n    variables: GameData\n): Promise<boolean> {\n    const out_is_modifed = false;\n    // 触发变量更新开始事件，通知外部系统\n    await eventEmit(variable_events.VARIABLE_UPDATE_STARTED, variables, out_is_modifed);\n    // 深拷贝变量对象，生成状态快照，用于记录显示数据\n    const out_status: GameData = _.cloneDeep(variables);\n    // 初始化增量状态对象，记录变化详情\n    const delta_status: Partial<GameData> = { stat_data: {} };\n\n    // 重构新增：统一处理宏替换，确保命令中的宏（如 ${variable}）被替换，提升一致性\n    const processed_message_content = substitudeMacros(current_message_content);\n\n    // 使用重构后的 extractCommands 提取所有命令\n    const commands = extractCommands(processed_message_content);\n    let variable_modified = false;\n\n    const schema = variables.schema; // 获取 schema，可能为 undefined\n    const strict_template = schema?.strictTemplate ?? false;\n    const concat_template_array = schema?.concatTemplateArray ?? true;\n\n    for (const command of commands) {\n        // 遍历所有命令，逐一处理\n        // 修正路径格式，去除首尾引号和反斜杠，确保路径有效\n        const path = pathFix(trimQuotesAndBackslashes(command.args[0]));\n        // 生成原因字符串，用于日志和显示\n        const reason_str = command.reason ? `(${command.reason})` : '';\n        let display_str = ''; // 初始化显示字符串，记录操作详情\n\n        switch (\n            command.command // 根据命令类型执行不同操作\n        ) {\n            case 'set': {\n                // _.has 检查，确保路径存在\n                if (!_.has(variables.stat_data, path)) {\n                    console.warn(\n                        `Path '${path}' does not exist in stat_data, skipping set command ${reason_str}`\n                    );\n                    continue;\n                }\n\n                // 获取路径上的旧值，可能为 undefined（路径不存在）\n                const oldValue = _.get(variables.stat_data, path);\n                // 支持两种格式：_.set(path, newValue) 或 _.set(path, oldValue, newValue)\n                const newValueStr = command.args.length >= 3 ? command.args[2] : command.args[1];\n                // 解析新值，支持字符串、数字、布尔值、JSON 对象等\n                let newValue = parseCommandValue(newValueStr);\n\n                // 在写入前，将 Date 对象序列化为 ISO 字符串\n                if (newValue instanceof Date) {\n                    newValue = newValue.toISOString();\n                }\n\n                if (\n                    Array.isArray(oldValue) &&\n                    oldValue.length === 2 &&\n                    typeof oldValue[1] === 'string' &&\n                    !Array.isArray(oldValue[0])\n                ) {\n                    // 处理 ValueWithDescription<T> 类型，更新数组第一个元素\n                    // 仅当旧值为数字且新值不为 null 时，才强制转换为数字\n                    // 这允许将数字字段设置为 null (例如角色死亡后好感度变为 null)\n                    oldValue[0] =\n                        typeof oldValue[0] === 'number' && newValue !== null\n                            ? Number(newValue)\n                            : newValue;\n                } else if (typeof oldValue === 'number' && newValue !== null) {\n                    _.set(variables.stat_data, path, Number(newValue));\n                } else {\n                    // 其他情况直接设置新值，支持任意类型\n                    _.set(variables.stat_data, path, newValue);\n                }\n\n                // 获取最终设置的新值，用于日志和事件\n                const finalNewValue = _.get(variables.stat_data, path);\n\n                // 检查是否为 ValueWithDescription 类型，以优化显示\n                const isValueWithDescription = Array.isArray(oldValue) && oldValue.length === 2;\n\n                if (isValueWithDescription && Array.isArray(finalNewValue)) {\n                    // 如果是 ValueWithDescription，只显示值的变化\n                    display_str = `${JSON.stringify(oldValue[0])}->${JSON.stringify(finalNewValue[0])} ${reason_str}`;\n                } else {\n                    // 否则，按常规显示\n                    display_str = `${JSON.stringify(oldValue)}->${JSON.stringify(finalNewValue)} ${reason_str}`;\n                }\n\n                variable_modified = true; // 标记变量已修改\n                // 记录操作日志，便于调试\n                console.info(`Set '${path}' to '${JSON.stringify(finalNewValue)}' ${reason_str}`);\n\n                // 触发单变量更新事件，通知外部系统\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    finalNewValue\n                );\n                break;\n            }\n\n            case 'insert':\n            case 'assign': {\n                // 检查目标路径是否指向一个集合（数组或对象）\n                // 如果路径已存在且其值为原始类型（字符串、数字等），则跳过此命令，以防止结构污染\n                const targetPath = path;\n                // 统一获取目标值和目标Schema，优雅地处理根路径\n                const existingValue =\n                    targetPath === ''\n                        ? variables.stat_data\n                        : _.get(variables.stat_data, targetPath);\n                const targetSchema = getSchemaForPath(schema, targetPath);\n\n                // 验证1：目标是否为原始类型？如果是，则无法插入。\n                if (\n                    existingValue !== null &&\n                    !Array.isArray(existingValue) &&\n                    !_.isObject(existingValue)\n                ) {\n                    console.warn(\n                        `Cannot assign into path '${targetPath}' because it holds a primitive value (${typeof existingValue}). Operation skipped. ${reason_str}`\n                    );\n                    continue;\n                }\n\n                // 验证2：Schema 规则\n                if (targetSchema) {\n                    if (targetSchema.type === 'object' && targetSchema.extensible === false) {\n                        if (command.args.length === 2) {\n                            // 合并\n                            console.warn(\n                                `SCHEMA VIOLATION: Cannot merge data into non-extensible object at path '${targetPath}'. ${reason_str}`\n                            );\n                            continue;\n                        }\n                        if (command.args.length >= 3) {\n                            // 插入键\n                            const newKey = String(parseCommandValue(command.args[1]));\n                            if (!_.has(targetSchema.properties, newKey)) {\n                                console.warn(\n                                    `SCHEMA VIOLATION: Cannot assign new key '${newKey}' into non-extensible object at path '${targetPath}'. ${reason_str}`\n                                );\n                                continue;\n                            }\n                        }\n                    } else if (\n                        targetSchema.type === 'array' &&\n                        (targetSchema.extensible === false || targetSchema.extensible === undefined)\n                    ) {\n                        console.warn(\n                            `SCHEMA VIOLATION: Cannot assign elements into non-extensible array at path '${targetPath}'. ${reason_str}`\n                        );\n                        continue;\n                    }\n                } else if (\n                    // 增加 targetPath !== '' 条件，防止对根路径进行父路径检查\n                    targetPath !== '' &&\n                    !_.get(variables.stat_data, _.toPath(targetPath).slice(0, -1).join('.'))\n                ) {\n                    // 验证3：如果要插入到新路径，确保其父路径存在且可扩展\n                    console.warn(\n                        `Cannot assign into non-existent path '${targetPath}' without an extensible parent. ${reason_str}`\n                    );\n                    continue;\n                }\n                // --- 所有验证通过，现在可以安全执行 ---\n\n                // 深拷贝旧值，防止直接修改影响后续比较\n                const oldValue = _.cloneDeep(_.get(variables.stat_data, path));\n                let successful = false; // 标记插入是否成功\n\n                if (command.args.length === 2) {\n                    // _.assign('path.to.array', value)\n                    // 解析插入值，支持复杂类型\n                    let valueToAssign = parseCommandValue(command.args[1]);\n\n                    // 在写入前，将 Date 对象（或数组中的Date）序列化\n                    if (valueToAssign instanceof Date) {\n                        valueToAssign = valueToAssign.toISOString();\n                    } else if (Array.isArray(valueToAssign)) {\n                        valueToAssign = valueToAssign.map(item =>\n                            item instanceof Date ? item.toISOString() : item\n                        );\n                    }\n\n                    // 获取目标集合，可能为数组或对象\n                    let collection =\n                        targetPath === '' ? variables.stat_data : _.get(variables.stat_data, path);\n\n                    // 如果目标不存在，初始化为空数组或对象\n                    if (!Array.isArray(collection) && !_.isObject(collection)) {\n                        collection = Array.isArray(valueToAssign) ? [] : {};\n                        _.set(variables.stat_data, path, collection);\n                    }\n\n                    if (Array.isArray(collection)) {\n                        // 目标是数组，追加元素\n                        // 检查是否有模板并应用\n                        const template =\n                            targetSchema && isArraySchema(targetSchema)\n                                ? targetSchema.template\n                                : undefined;\n                        valueToAssign = applyTemplate(\n                            valueToAssign,\n                            template,\n                            strict_template,\n                            concat_template_array\n                        );\n                        collection.push(valueToAssign);\n                        display_str = `ASSIGNED ${JSON.stringify(valueToAssign)} into array '${path}' ${reason_str}`;\n                        successful = true;\n                    } else if (_.isObject(collection)) {\n                        // 目标是对象，合并属性\n                        // 注意：对象合并时不应用模板，因为无法明确确定增加的元素\n                        // 模板只在明确添加单个新属性时应用（如使用三参数的 assign）\n                        if (_.isObject(valueToAssign) && !Array.isArray(valueToAssign)) {\n                            _.merge(collection, valueToAssign);\n                            display_str = `MERGED object ${JSON.stringify(valueToAssign)} into object '${path}' ${reason_str}`;\n                            successful = true;\n                        } else {\n                            // 不支持将数组或非对象合并到对象，记录错误\n                            console.error(\n                                `Cannot merge ${Array.isArray(valueToAssign) ? 'array' : 'non-object'} into object at '${path}'`\n                            );\n                            continue;\n                        }\n                    }\n                } else if (command.args.length >= 3) {\n                    // _.assign('path', key/index, value)\n                    // 解析插入值和键/索引\n                    let valueToAssign = parseCommandValue(command.args[2]);\n                    const keyOrIndex = parseCommandValue(command.args[1]);\n\n                    // 在写入前，将 Date 对象（或数组中的Date）序列化\n                    if (valueToAssign instanceof Date) {\n                        valueToAssign = valueToAssign.toISOString();\n                    } else if (Array.isArray(valueToAssign)) {\n                        valueToAssign = valueToAssign.map(item =>\n                            item instanceof Date ? item.toISOString() : item\n                        );\n                    }\n\n                    let collection =\n                        targetPath === '' ? variables.stat_data : _.get(variables.stat_data, path);\n\n                    // 获取模板\n                    const template =\n                        targetSchema &&\n                        (isArraySchema(targetSchema) || isObjectSchema(targetSchema))\n                            ? targetSchema.template\n                            : undefined;\n\n                    if (Array.isArray(collection) && typeof keyOrIndex === 'number') {\n                        // 目标是数组且索引是数字，插入到指定位置\n                        valueToAssign = applyTemplate(\n                            valueToAssign,\n                            template,\n                            strict_template,\n                            concat_template_array\n                        );\n                        collection.splice(keyOrIndex, 0, valueToAssign);\n                        display_str = `ASSIGNED ${JSON.stringify(valueToAssign)} into '${path}' at index ${keyOrIndex} ${reason_str}`;\n                        successful = true;\n                    } else if (_.isObject(collection)) {\n                        // 目标是对象，设置指定键\n                        // _.set(collection, String(keyOrIndex), valueToAssign);\n                        // 对单个属性值应用模板\n                        valueToAssign = applyTemplate(\n                            valueToAssign,\n                            template,\n                            strict_template,\n                            concat_template_array\n                        );\n                        (collection as Record<string, unknown>)[String(keyOrIndex)] = valueToAssign;\n                        display_str = `ASSIGNED key '${keyOrIndex}' with value ${JSON.stringify(valueToAssign)} into object '${path}' ${reason_str}`;\n                        successful = true;\n                    } else {\n                        // 目标不存在，创建新对象并插入\n                        collection = {};\n                        _.set(variables.stat_data, path, collection);\n                        /*\n                        _.set(\n                            collection as Record<string, unknown>,\n                            String(keyOrIndex),\n                            valueToAssign\n                        );\n                        */\n                        // 对新属性值应用模板\n                        valueToAssign = applyTemplate(\n                            valueToAssign,\n                            template,\n                            strict_template,\n                            concat_template_array\n                        );\n                        (collection as Record<string, unknown>)[String(keyOrIndex)] = valueToAssign;\n                        display_str = `CREATED object at '${path}' and ASSIGNED key '${keyOrIndex}' ${reason_str}`;\n                        successful = true;\n                    }\n                }\n\n                if (successful) {\n                    // 插入成功，获取新值并触发事件\n                    const newValue = _.get(variables.stat_data, path);\n                    variable_modified = true;\n                    console.info(display_str);\n                    await eventEmit(\n                        variable_events.SINGLE_VARIABLE_UPDATED,\n                        variables.stat_data,\n                        path,\n                        oldValue,\n                        newValue\n                    );\n                } else {\n                    // 插入失败，记录错误并继续处理下一命令\n                    console.error(`Invalid arguments for _.assign on path '${path}'`);\n                    continue;\n                }\n                break;\n            }\n\n            case 'remove': {\n                // 验证路径存在，防止无效删除\n                if (!_.has(variables.stat_data, path)) {\n                    console.error(`undefined Path: ${path} in _.remove command`);\n                    continue;\n                }\n\n                // --- 模式校验开始 ---\n                let containerPath = path;\n                let keyOrIndexToRemove: string | number | undefined;\n\n                if (command.args.length > 1) {\n                    // _.remove('path', key_or_index)\n                    keyOrIndexToRemove = parseCommandValue(command.args[1]);\n                    // 如果 key 是字符串，需要去除可能存在的引号\n                    if (typeof keyOrIndexToRemove === 'string') {\n                        keyOrIndexToRemove = trimQuotesAndBackslashes(keyOrIndexToRemove);\n                    }\n                } else {\n                    // _.remove('path.to.key[index]')\n                    const pathParts = _.toPath(path);\n                    const lastPart = pathParts.pop();\n                    if (lastPart) {\n                        keyOrIndexToRemove = /^\\d+$/.test(lastPart) ? Number(lastPart) : lastPart;\n                        containerPath = pathParts.join('.');\n                    }\n                }\n\n                if (keyOrIndexToRemove === undefined) {\n                    console.error(\n                        `Could not determine target for deletion for command on path '${path}' ${reason_str}`\n                    );\n                    continue;\n                }\n                // 只有当容器路径不是根路径（即不为空）时，才检查其是否存在\n                if (containerPath !== '' && !_.has(variables.stat_data, containerPath)) {\n                    console.warn(\n                        `Cannot remove from non-existent path '${containerPath}'. ${reason_str}`\n                    );\n                    continue;\n                }\n\n                const containerSchema = getSchemaForPath(schema, containerPath);\n\n                if (containerSchema) {\n                    if (containerSchema.type === 'array') {\n                        if (containerSchema.extensible !== true) {\n                            console.warn(\n                                `SCHEMA VIOLATION: Cannot remove element from non-extensible array at path '${containerPath}'. ${reason_str}`\n                            );\n                            continue;\n                        }\n                    } else if (containerSchema.type === 'object') {\n                        const keyString = String(keyOrIndexToRemove);\n                        if (\n                            _.has(containerSchema.properties, keyString) &&\n                            containerSchema.properties[keyString].required === true\n                        ) {\n                            console.warn(\n                                `SCHEMA VIOLATION: Cannot remove required key '${keyString}' from path '${containerPath}'. ${reason_str}`\n                            );\n                            continue;\n                        }\n                    }\n                }\n\n                // --- 所有验证通过，现在可以安全执行 ---\n\n                // 解析删除目标，可能是值或索引\n                const targetToRemove =\n                    command.args.length > 1 ? parseCommandValue(command.args[1]) : undefined;\n                let itemRemoved = false; // 标记是否删除成功\n\n                if (targetToRemove === undefined) {\n                    // _.remove('path.to.key')\n                    // 删除整个路径\n                    const oldValue = _.get(variables.stat_data, path);\n                    _.unset(variables.stat_data, path);\n                    display_str = `REMOVED path '${path}' ${reason_str}`;\n                    itemRemoved = true;\n                    await eventEmit(\n                        variable_events.SINGLE_VARIABLE_UPDATED,\n                        variables.stat_data,\n                        path,\n                        oldValue,\n                        undefined\n                    );\n                } else {\n                    // _.remove('path.to.array', value_or_index)\n                    const collection = _.get(variables.stat_data, path);\n\n                    // 当从一个集合中删除元素时，必须确保目标路径确实是一个集合\n                    // 如果目标是原始值（例如字符串），则无法执行删除操作\n                    if (!Array.isArray(collection) && !_.isObject(collection)) {\n                        console.warn(\n                            `Cannot remove from path '${path}' because it is not an array or object. Skipping command. ${reason_str}`\n                        );\n                        continue;\n                    }\n\n                    if (Array.isArray(collection)) {\n                        // 目标是数组，删除指定元素\n                        const originalArray = _.cloneDeep(collection);\n                        let indexToRemove = -1;\n                        if (typeof targetToRemove === 'number') {\n                            indexToRemove = targetToRemove;\n                        } else {\n                            indexToRemove = collection.findIndex(item =>\n                                _.isEqual(item, targetToRemove)\n                            );\n                        }\n\n                        if (indexToRemove >= 0 && indexToRemove < collection.length) {\n                            collection.splice(indexToRemove, 1);\n                            itemRemoved = true;\n                            display_str = `REMOVED item from '${path}' ${reason_str}`;\n                            await eventEmit(\n                                variable_events.SINGLE_VARIABLE_UPDATED,\n                                variables.stat_data,\n                                path,\n                                originalArray,\n                                collection\n                            );\n                        }\n                    } else if (_.isObject(collection)) {\n                        if (typeof targetToRemove === 'number') {\n                            // 目标是对象，按索引删除键\n                            const keys = Object.keys(collection);\n                            const index = targetToRemove;\n                            if (index >= 0 && index < keys.length) {\n                                const keyToRemove = keys[index];\n                                _.unset(collection, keyToRemove);\n                                itemRemoved = true;\n                                display_str = `REMOVED ${index + 1}th entry ('${keyToRemove}') from object '${path}' ${reason_str}`;\n                            }\n                        } else {\n                            // 目标是对象，按键名删除\n                            const keyToRemove = String(targetToRemove);\n                            if (_.has(collection, keyToRemove)) {\n                                // _.unset(collection, keyToRemove);\n                                delete (collection as Record<string, unknown>)[keyToRemove];\n                                itemRemoved = true;\n                                display_str = `REMOVED key '${keyToRemove}' from object '${path}' ${reason_str}`;\n                            }\n                        }\n                    }\n                }\n\n                if (itemRemoved) {\n                    // 删除成功，更新状态并记录日志\n                    variable_modified = true;\n                    console.info(display_str);\n                } else {\n                    // 删除失败，记录警告并继续\n                    console.warn(`Failed to execute remove on '${path}'`);\n                    continue;\n                }\n                break;\n            }\n\n            case 'add': {\n                // 验证路径存在\n                if (!_.has(variables.stat_data, path)) {\n                    console.warn(\n                        `Path '${path}' does not exist in stat_data, skipping add command ${reason_str}`\n                    );\n                    continue;\n                }\n                // 获取当前值\n                const initialValue = _.cloneDeep(_.get(variables.stat_data, path));\n                const oldValue = _.get(variables.stat_data, path);\n                let valueToAdd = oldValue;\n                const isValueWithDescription =\n                    Array.isArray(oldValue) &&\n                    oldValue.length === 2 &&\n                    typeof oldValue[0] !== 'object';\n\n                if (isValueWithDescription) {\n                    valueToAdd = oldValue[0]; // 对 ValueWithDescription 类型，操作其第一个元素\n                }\n                // console.warn(valueToAdd);\n\n                // 尝试将当前值解析为 Date 对象，无论其原始类型是 Date 还是字符串\n                let potentialDate: Date | null = null;\n                if (valueToAdd instanceof Date) {\n                    potentialDate = valueToAdd;\n                } else if (typeof valueToAdd === 'string') {\n                    const parsedDate = new Date(valueToAdd);\n                    // 确保它是一个有效的日期，并且不是一个可以被 `new Date` 解析的纯数字字符串\n                    if (!isNaN(parsedDate.getTime()) && isNaN(Number(valueToAdd))) {\n                        potentialDate = parsedDate;\n                    }\n                }\n\n                /*                if (command.args.length === 1) {\n                    // 单参数：切换布尔值\n                    if (typeof valueToAdd !== 'boolean') {\n                        console.warn(\n                            `Path '${path}' is not a boolean${isValueWithDescription ? ' or ValueWithDescription<boolean>' : ''}, skipping add command ${reason_str}`\n                        );\n                        continue;\n                    }\n                    const newValue = !valueToAdd;\n                    if (isValueWithDescription) {\n                        oldValue[0] = newValue; // Update the first element\n                        _.set(variables.stat_data, path, oldValue);\n                    } else {\n                        _.set(variables.stat_data, path, newValue);\n                    }\n                    const finalNewValue = _.get(variables.stat_data, path);\n                    if (isValueWithDescription) {\n                        display_str = `${JSON.stringify((initialValue as any[])[0])}->${JSON.stringify((finalNewValue as any[])[0])} ${reason_str}`;\n                    } else {\n                        display_str = `${JSON.stringify(initialValue)}->${JSON.stringify(finalNewValue)} ${reason_str}`;\n                    }\n                    variable_modified = true;\n                    console.info(\n                        `ADDED boolean '${path}' from '${valueToAdd}' to '${newValue}' ${reason_str}`\n                    );\n                    await eventEmit(\n                        variable_events.SINGLE_VARIABLE_UPDATED,\n                        variables.stat_data,\n                        path,\n                        initialValue,\n                        finalNewValue\n                    );\n                } else */ if (command.args.length === 2) {\n                    // 双参数：调整数值或日期\n                    const delta = parseCommandValue(command.args[1]);\n\n                    // 处理 Date 类型\n                    if (potentialDate) {\n                        if (typeof delta !== 'number') {\n                            console.warn(\n                                `Delta '${command.args[1]}' for Date operation is not a number, skipping add command ${reason_str}`\n                            );\n                            continue;\n                        }\n                        // delta 是毫秒数，更新时间\n                        const newDate = new Date(potentialDate.getTime() + delta);\n                        // 总是将更新后的 Date 对象转换为 ISO 字符串再存回去\n                        const finalValueToSet = newDate.toISOString();\n\n                        if (isValueWithDescription) {\n                            oldValue[0] = finalValueToSet;\n                            _.set(variables.stat_data, path, oldValue);\n                        } else {\n                            _.set(variables.stat_data, path, finalValueToSet);\n                        }\n\n                        const finalNewValue = _.get(variables.stat_data, path);\n                        if (isValueWithDescription) {\n                            display_str = `${JSON.stringify((initialValue as any[])[0])}->${JSON.stringify((finalNewValue as any[])[0])} ${reason_str}`;\n                        } else {\n                            display_str = `${JSON.stringify(initialValue)}->${JSON.stringify(finalNewValue)} ${reason_str}`;\n                        }\n                        variable_modified = true;\n                        console.info(\n                            `ADDED date '${path}' from '${potentialDate.toISOString()}' to '${newDate.toISOString()}' by delta '${delta}'ms ${reason_str}`\n                        );\n                        await eventEmit(\n                            variable_events.SINGLE_VARIABLE_UPDATED,\n                            variables.stat_data,\n                            path,\n                            initialValue,\n                            finalNewValue\n                        );\n                    } else if (typeof valueToAdd === 'number') {\n                        // 原有的处理 number 类型的逻辑\n                        if (typeof delta !== 'number') {\n                            console.warn(\n                                `Delta '${command.args[1]}' is not a number, skipping add command ${reason_str}`\n                            );\n                            continue;\n                        }\n                        let newValue = valueToAdd + delta;\n                        newValue = parseFloat(newValue.toPrecision(12)); // 避免浮点数精度误差\n                        if (isValueWithDescription) {\n                            oldValue[0] = newValue; // Update the first element\n                            _.set(variables.stat_data, path, oldValue);\n                        } else {\n                            _.set(variables.stat_data, path, newValue);\n                        }\n                        const finalNewValue = _.get(variables.stat_data, path);\n                        if (isValueWithDescription) {\n                            display_str = `${JSON.stringify((initialValue as any[])[0])}->${JSON.stringify((finalNewValue as any[])[0])} ${reason_str}`;\n                        } else {\n                            display_str = `${JSON.stringify(initialValue)}->${JSON.stringify(finalNewValue)} ${reason_str}`;\n                        }\n                        variable_modified = true;\n                        console.info(\n                            `ADDED number '${path}' from '${valueToAdd}' to '${newValue}' by delta '${delta}' ${reason_str}`\n                        );\n                        await eventEmit(\n                            variable_events.SINGLE_VARIABLE_UPDATED,\n                            variables.stat_data,\n                            path,\n                            initialValue,\n                            finalNewValue\n                        );\n                    } else {\n                        // 如果值不是可识别的类型（日期、数字），则跳过\n                        console.warn(\n                            `Path '${path}' value is not a date or number; skipping add command ${reason_str}`\n                        );\n                        continue;\n                    }\n                } else {\n                    console.warn(\n                        `Invalid number of arguments for _.add on path '${path}' ${reason_str}`\n                    );\n                    continue;\n                }\n                break;\n            }\n        }\n\n        if (display_str) {\n            // 更新状态和增量数据，记录操作详情\n            _.set(out_status.stat_data, path, display_str);\n            _.set(delta_status.stat_data!, path, display_str);\n        }\n    }\n\n    // 在所有命令执行完毕后，如果数据有任何变动，则执行一次 Schema 调和\n    if (variable_modified) {\n        reconcileAndApplySchema(variables);\n    }\n\n    // 更新变量的显示和增量数据\n    variables.display_data = out_status.stat_data;\n    variables.delta_data = delta_status.stat_data!;\n    // 触发变量更新结束事件\n    await eventEmit(variable_events.VARIABLE_UPDATE_ENDED, variables, out_is_modifed);\n    // 返回是否修改了变量\n    return variable_modified || out_is_modifed;\n}\n\nexport async function handleVariablesInMessage(message_id: number) {\n    const chat_message = getChatMessages(message_id).at(-1);\n    if (!chat_message) {\n        return;\n    }\n\n    const message_content = chat_message.message;\n    const variables = await getLastValidVariable(message_id);\n    if (!_.has(variables, 'stat_data')) {\n        console.error(`cannot found stat_data for ${message_id}`);\n        return;\n    }\n\n    const has_variable_modified = await updateVariables(message_content, variables);\n    if (has_variable_modified) {\n        const chat_variables = getVariables({ type: 'chat' });\n        // _.merge 可能使变量无法被正常移除，因此使用赋值的方式\n        chat_variables.stat_data = variables.stat_data;\n        chat_variables.display_data = variables.display_data;\n        chat_variables.delta_data = variables.delta_data;\n        chat_variables.schema = variables.schema;\n        chat_variables.initialized_lorebooks = variables.initialized_lorebooks;\n        await replaceVariables(chat_variables, { type: 'chat' });\n    }\n    await insertOrAssignVariables(\n        {\n            stat_data: variables.stat_data,\n            display_data: variables.display_data,\n            delta_data: variables.delta_data,\n            schema: variables.schema,\n            initialized_lorebooks: variables.initialized_lorebooks,\n        },\n        { type: 'message', message_id: message_id }\n    );\n\n    if (chat_message.role !== 'user' && !message_content.includes('<StatusPlaceHolderImpl/>')) {\n        await setChatMessages(\n            [\n                {\n                    message_id: message_id,\n                    message: message_content + '\\n\\n<StatusPlaceHolderImpl/>',\n                },\n            ],\n            {\n                refresh: 'affected',\n            }\n        );\n    }\n}\n\nexport async function handleVariablesInCallback(\n    message_content: string,\n    variable_info: VariableData\n) {\n    if (variable_info.old_variables === undefined) {\n        return;\n    }\n    variable_info.new_variables = _.cloneDeep(variable_info.old_variables);\n    const variables = variable_info.new_variables;\n\n    const modified = await updateVariables(message_content, variables);\n    //如果没有修改，则不产生 newVariable\n    if (!modified) delete variable_info.new_variables;\n}\n","/**\n * 递归更新描述字段\n *\n * 示例数据结构：\n * initData: {\n *   \"属性\": {\n *     \"value\": 100,\n *     \"description\": \"这是初始描述\"  // 条件 4(a)\n *   },\n *   \"生命值\": [100, \"初始生命值\"],  // 条件 4(b): ValueWithDescription<number>\n *   \"技能\": [{\n *     \"name\": \"攻击\",\n *     \"damage\": [50, \"基础伤害\"],  // 嵌套的 ValueWithDescription\n *     \"description\": \"普通攻击\"\n *   }],\n *   \"装备\": {\n *     \"武器\": [\"剑\", \"初始武器\"],  // ValueWithDescription<string>\n *     \"属性加成\": {\n *       \"攻击力\": [10, \"武器攻击力加成\"]\n *     }\n *   }\n * }\n */\nexport function updateDescriptions(\n    _init_path: string,\n    init_data: any,\n    msg_data: any,\n    target_data: any\n) {\n    _.forEach(init_data, (value, key) => {\n        const current_path = key; //init_path ? `${init_path}.${key}` : key;\n\n        if (_.isArray(value)) {\n            // 检查是否为 ValueWithDescription<T> 类型 (长度为2，第二个元素是字符串)\n            if (value.length === 2 && _.isString(value[1])) {\n                // 条件 4(b): 满足 ValueWithDescription<T> 定义\n                if (_.isArray(_.get(msg_data, current_path))) {\n                    const msgValue = _.get(msg_data, current_path);\n                    if (msgValue.length === 2) {\n                        // 更新描述(第二个元素)\n                        _.set(target_data, `${current_path}[1]`, value[1]);\n\n                        // 如果第一个元素是对象或数组，需要递归处理\n                        if (_.isObject(value[0]) && !_.isArray(value[0])) {\n                            // 处理对象\n                            const targetObj = _.get(target_data, `${key}[0]`);\n\n                            // 如果对象包含description属性，需要特殊处理\n                            if (\n                                _.has(value[0], 'description') &&\n                                _.isString(value[0].description)\n                            ) {\n                                if (_.has(msgValue[0], 'description')) {\n                                    _.set(\n                                        target_data,\n                                        `${current_path}[0].description`,\n                                        value[0].description\n                                    );\n                                }\n                            }\n\n                            // 递归处理对象的其他属性\n                            updateDescriptions(\n                                `${current_path}[0]`,\n                                value[0],\n                                msgValue[0],\n                                targetObj\n                            );\n                        } else if (_.isArray(value[0])) {\n                            // 处理数组\n                            updateDescriptions(\n                                `${current_path}[0]`,\n                                value[0],\n                                msgValue[0],\n                                target_data[0]\n                            );\n                        }\n                    }\n                }\n            } else if (_.isArray(_.get(msg_data, current_path))) {\n                // 普通数组，递归处理每个元素\n                const msg_array = _.get(msg_data, current_path);\n                value.forEach((item, index) => {\n                    if (index < msg_array.length) {\n                        if (_.isObject(item)) {\n                            const current_target = _.get(target_data, `${current_path}[${index}]`);\n                            // 如果对象包含description属性，需要特殊处理\n                            if (_.has(item, 'description') && _.isString(item.description)) {\n                                if (_.has(msg_array[index], 'description')) {\n                                    _.set(current_target, `description`, item.description);\n                                }\n                            }\n\n                            updateDescriptions(\n                                `${current_path}[${index}]`,\n                                value[index],\n                                msg_array[index],\n                                current_target\n                            );\n                        }\n                    }\n                });\n            }\n        } else if (_.isObject(value)) {\n            // 处理对象\n            if (_.has(value, 'description') && _.isString(value.description)) {\n                // 条件 4(a): 对象包含 description 字段且为字符串\n                //msg_data 等已经在递归时跟着进入了更深的层次，不需要 currentPath前缀\n                const description_path = `${key}.description`;\n                if (_.has(msg_data, description_path)) {\n                    _.set(target_data, description_path, value.description);\n                }\n            }\n\n            // 继续递归处理对象的其他属性\n            if (_.has(msg_data, key) && _.isObject(msg_data[key])) {\n                updateDescriptions(current_path, value, msg_data[key], target_data[key]);\n            }\n        }\n    });\n}\n","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"parse\"]: () => (__WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_json5_esm_143ca249__.parse) });","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"parse\"]: () => (__WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_toml_esm_005ece54__.parse) });","// 整体游戏数据类型\nimport { updateVariables } from '@/function';\nimport { GameData, isObjectSchema, RootAdditionalProps, SchemaNode } from '@/variable_def';\nimport { cleanUpMetadata, EXTENSIBLE_MARKER, generateSchema } from '@/schema';\nimport * as JSON5 from 'json5';\nimport * as TOML from 'toml';\n\ntype LorebookEntry = {\n    content: string;\n    comment?: string;\n};\n\nexport async function initCheck() {\n    let last_msg: ChatMessageSwiped;\n    let variables: GameData & Record<string, any>;\n\n    try {\n        const result = await getLastMessageVariables();\n        last_msg = result.message;\n        variables = result.variables ?? createEmptyGameData();\n    } catch (e) {\n        console.error('不存在任何一条消息，退出');\n        return;\n    }\n\n    // 确保变量结构完整\n    if (variables === undefined) {\n        variables = createEmptyGameData();\n    }\n    if (!_.has(variables, 'initialized_lorebooks')) {\n        variables.initialized_lorebooks = {};\n    }\n    if (Array.isArray(variables.initialized_lorebooks)) {\n        console.warn(\n            'Old \"initialized_lorebooks\" array format detected. Migrating to the new object format.'\n        );\n        const oldArray = variables.initialized_lorebooks as string[];\n        const newObject: Record<string, any[]> = {};\n        for (const lorebookName of oldArray) {\n            newObject[lorebookName] = []; // 按照新格式，值为一个空数组\n        }\n        variables.initialized_lorebooks = newObject;\n    }\n    if (!variables.stat_data) {\n        variables.stat_data = {};\n    }\n    if (!variables.schema) {\n        variables.schema = { extensible: false, properties: {}, type: 'object' };\n    }\n\n    // 加载 InitVar 数据\n    const is_updated = await loadInitVarData(variables);\n\n    // --- 一次性清理所有魔法字符串 ---\n    if (is_updated) {\n        // 递归遍历整个 stat_data，移除所有魔法字符串\n        const cleanData = (data: any) => {\n            if (Array.isArray(data)) {\n                // 使用 filter 创建一个不含标记的新数组\n                const cleanedArray = data.filter(item => item !== EXTENSIBLE_MARKER);\n                // 递归清理数组内的对象或数组\n                cleanedArray.forEach(cleanData);\n                return cleanedArray;\n            }\n            if (_.isObject(data)) {\n                const newObj: Record<string, any> = {};\n                const typedData = data as Record<string, any>; // 类型断言\n                for (const key in data) {\n                    // 递归清理子节点，并将结果赋给新对象\n                    newObj[key] = cleanData(typedData[key]);\n                }\n                return newObj;\n            }\n            return data;\n        };\n        // 在生成 Schema 之前，先清理一遍 stat_data\n        // 这里需要先生成 Schema，再清理数据\n        // 所以还是得用克隆\n    }\n\n    // 在所有 lorebook 初始化完成后，生成最终的模式\n    if (is_updated || !variables.schema || _.isEmpty(variables.schema)) {\n        // 1. 克隆数据用于 Schema 生成\n        const dataForSchema = _.cloneDeep(variables.stat_data);\n        // 2. generateSchema 会读取并移除克隆体中的标记，生成正确的 schema\n        const generated_schema: SchemaNode & RootAdditionalProps = generateSchema(dataForSchema);\n\n        // 使用类型守卫确保生成的 schema 是 ObjectSchemaNode\n        if (isObjectSchema(generated_schema)) {\n            if (_.has(variables.stat_data, '$meta.strictTemplate'))\n                generated_schema.strictTemplate = variables.stat_data['$meta']\n                    ?.strictTemplate as boolean;\n            if (_.has(variables.stat_data, '$meta.concatTemplateArray'))\n                generated_schema.concatTemplateArray = variables.stat_data['$meta']\n                    ?.concatTemplateArray as boolean;\n            variables.schema = generated_schema;\n        } else {\n            console.error(\n                'Generated schema is not an object schema, which is unexpected for stat_data root'\n            );\n        }\n\n        // 3. 现在，清理真实的 stat_data，让它在后续操作中保持干净\n        cleanUpMetadata(variables.stat_data);\n    }\n\n    if (!is_updated) {\n        return;\n    }\n\n    console.info(`Init chat variables.`);\n    await insertOrAssignVariables(variables);\n\n    // 更新所有 swipes\n    for (let i = 0; i < last_msg.swipes.length; i++) {\n        const current_swipe_data = _.cloneDeep(variables);\n        // 此处调用的是新版 updateVariables，它将支持更多命令\n        // 不再需要手动调用 substitudeMacros，updateVariables 会处理\n        await updateVariables(last_msg.swipes[i], current_swipe_data);\n        //新版本这个接口给deprecated了，但是新版本的接口不好用，先这样\n        //@ts-ignore\n        await setChatMessage({ data: current_swipe_data }, last_msg.message_id, {\n            refresh: 'none',\n            swipe_id: i,\n        });\n    }\n\n    // 更新 lorebook 设置\n    await updateLorebookSettings();\n}\n\n/**\n * 获取所有启用的 lorebook 列表\n */\nexport async function getEnabledLorebookList(): Promise<string[]> {\n    const lorebook_settings = await getLorebookSettings();\n    const enabled_lorebook_list = [...lorebook_settings.selected_global_lorebooks];\n    const char_lorebook = await getCurrentCharPrimaryLorebook();\n    if (char_lorebook !== null) {\n        enabled_lorebook_list.push(char_lorebook);\n    }\n    return enabled_lorebook_list;\n}\n\n/**\n * 从 lorebook 中加载所有 InitVar 数据并合并到提供的 GameData 中\n */\nexport async function loadInitVarData(\n    gameData: GameData,\n    lorebookList?: string[]\n): Promise<boolean> {\n    const enabled_lorebook_list = lorebookList || (await getEnabledLorebookList());\n    let is_updated = false;\n\n    // 确保 initialized_lorebooks 是对象格式\n    if (!gameData.initialized_lorebooks || Array.isArray(gameData.initialized_lorebooks)) {\n        gameData.initialized_lorebooks = {};\n    }\n\n    for (const current_lorebook of enabled_lorebook_list) {\n        // 适配 beta 分支的对象结构\n        if (_.has(gameData.initialized_lorebooks, current_lorebook)) continue;\n        gameData.initialized_lorebooks[current_lorebook] = [];\n        const init_entries = (await getLorebookEntries(current_lorebook)) as LorebookEntry[];\n\n        for (const entry of init_entries) {\n            if (entry.comment?.toLowerCase().includes('[initvar]')) {\n                const content = substitudeMacros(entry.content);\n                let parsedData: any = null;\n                let parseError: Error | null = null;\n\n                // Try YAML first (which also handles JSON)\n                try {\n                    parsedData = YAML.parse(content);\n                } catch (e) {\n                    // Try JSON5\n                    try {\n                        parsedData = JSON5.parse(content);\n                    } catch (e2) {\n                        // Try TOML\n                        try {\n                            parsedData = TOML.parse(content);\n                        } catch (e3) {\n                            parseError = new Error(\n                                `Failed to parse content as YAML/JSON, JSON5, or TOML: ${e3}`\n                            );\n                        }\n                    }\n                }\n\n                if (parseError) {\n                    console.error(\n                        `Failed to parse lorebook entry[${entry.comment}]: ${parseError}`\n                    );\n                    // @ts-ignore\n                    toastr.error(parseError.message, 'Failed to parse lorebook entry', {\n                        timeOut: 5000,\n                    });\n                    throw parseError;\n                }\n\n                if (parsedData) {\n                    gameData.stat_data = _.merge(gameData.stat_data, parsedData);\n                }\n            }\n        }\n        is_updated = true;\n    }\n\n    return is_updated;\n}\n\n/**\n * 创建一个新的空 GameData 对象\n */\nexport function createEmptyGameData(): GameData {\n    return {\n        display_data: {},\n        initialized_lorebooks: {}, // 适配 beta 分支的对象结构\n        stat_data: {},\n        delta_data: {},\n        schema: {\n            type: 'object',\n            properties: {},\n        }, // beta 分支新增的 schema 字段\n    };\n}\n\n/**\n * 获取最后一条消息的变量数据\n */\nexport async function getLastMessageVariables(): Promise<{\n    message: ChatMessageSwiped;\n    variables: GameData | undefined;\n}> {\n    let last_chat_msg: ChatMessageSwiped[] = [];\n    try {\n        last_chat_msg = (await getChatMessages(-2, {\n            role: 'assistant',\n            include_swipes: true,\n        })) as ChatMessageSwiped[];\n    } catch (e) {\n        // 在第一行时，必定发生异常。\n    }\n\n    if (!last_chat_msg || last_chat_msg.length <= 0) {\n        const first_msg = await getChatMessages(0, {\n            include_swipes: true,\n        });\n        if (first_msg && first_msg.length > 0) {\n            last_chat_msg = first_msg;\n        } else {\n            throw new Error('不存在任何一条消息');\n        }\n    }\n\n    const last_msg = last_chat_msg[0];\n    const variables = last_msg.swipes_data[last_msg.swipe_id] as GameData & Record<string, any>;\n\n    return { message: last_msg, variables };\n}\n\n/**\n * 更新 lorebook 设置为推荐配置\n */\nexport async function updateLorebookSettings(): Promise<void> {\n    /*Ref:https://github.com/lolo-desu/lolocard/blob/master/src/%E6%97%A5%E8%AE%B0%E7%BB%9C%E7%BB%9C/%E8%84%9A%E6%9C%AC/%E8%B0%83%E6%95%B4%E4%B8%96%E7%95%8C%E4%B9%A6%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE.ts\n     */\n    const dst_setting: Partial<LorebookSettings> = {\n        scan_depth: 2,\n        context_percentage: 100,\n        budget_cap: 0,\n        min_activations: 0,\n        max_depth: 0,\n        max_recursion_steps: 0,\n\n        insertion_strategy: 'character_first',\n\n        include_names: false,\n        recursive: true,\n        case_sensitive: false,\n        match_whole_words: false,\n        use_group_scoring: false,\n        overflow_alert: false,\n    };\n    const settings = getLorebookSettings();\n    if (!_.isEqual(_.merge({}, settings, dst_setting), settings)) {\n        setLorebookSettings(dst_setting);\n    }\n}\n\n//window.initCheck = initCheck;\n","import { getLastValidVariable, handleVariablesInMessage } from '@/function';\nimport { updateDescriptions } from '@/update_descriptions';\nimport { createEmptyGameData, loadInitVarData } from '@/variable_init';\nimport { cleanUpMetadata, reconcileAndApplySchema } from '@/schema';\n\nconst buttons = ['重新处理变量', '重新读取初始变量'];\n\nfunction addButtons() {\n    const current_buttons = getScriptButtons(getScriptId());\n    const current_button_names = current_buttons.map(b => b.name);\n    for (const button of buttons.filter(b => !current_button_names.includes(b))) {\n        current_buttons.push({ name: button, visible: false });\n    }\n    replaceScriptButtons(getScriptId(), current_buttons);\n}\n\nexport function registerButtons() {\n    addButtons();\n\n    eventOnButton('重新处理变量', async function () {\n        const last_msg = getLastMessageId();\n        if (last_msg < 1) return;\n        if (SillyTavern.chat.length === 0) return;\n        await deleteVariable('stat_data', { type: 'message', message_id: last_msg });\n        await deleteVariable('delta_data', { type: 'message', message_id: last_msg });\n        await deleteVariable('display_data', { type: 'message', message_id: last_msg });\n        await deleteVariable('schema', { type: 'message', message_id: last_msg });\n        //重新处理变量\n        await handleVariablesInMessage(getLastMessageId());\n    });\n\n    eventOnButton('重新读取初始变量', async function () {\n        // 1. 创建一个新的空 GameData 并加载 InitVar 数据\n        const latest_init_data = createEmptyGameData();\n\n        try {\n            const hasInitData = await loadInitVarData(latest_init_data);\n            if (!hasInitData) {\n                console.error('没有找到 InitVar 数据');\n                toastr.error('没有找到 InitVar 数据', '', { timeOut: 3000 });\n                return;\n            }\n        } catch (e) {\n            console.error('加载 InitVar 数据失败:', e);\n            return;\n        }\n\n        // 2. 从最新楼层获取最新变量\n        const message_id = getLastMessageId();\n        if (message_id < 0) {\n            console.error('没有找到消息');\n            toastr.error('没有找到消息', '', { timeOut: 3000 });\n            return;\n        }\n\n        const latest_msg_data = await getLastValidVariable(message_id);\n\n        if (!_.has(latest_msg_data, 'stat_data')) {\n            console.error('最新消息中没有找到 stat_data');\n            toastr.error('最新消息中没有 stat_data', '', { timeOut: 3000 });\n            return;\n        }\n\n        // 3. 产生新变量，以 latest_init_data 为基础，合并入 latest_msg_data 的内容\n        //此处 latest_init_data 内不存在复杂类型，因此可以采用 structuredClone\n        const merged_data = structuredClone(latest_init_data);\n        merged_data.stat_data = _.merge(merged_data.stat_data, latest_msg_data.stat_data);\n\n        // 4-5. 遍历并更新描述字段\n        updateDescriptions(\n            '',\n            latest_init_data.stat_data,\n            latest_msg_data.stat_data,\n            merged_data.stat_data\n        );\n\n        //应用\n        await reconcileAndApplySchema(merged_data);\n\n        cleanUpMetadata(merged_data.stat_data);\n\n        // 6. 更新变量到最新消息\n        await replaceVariables(merged_data, { type: 'message', message_id: message_id });\n\n        await replaceVariables(merged_data, { type: 'chat' });\n\n        console.info('InitVar更新完成');\n        toastr.success('InitVar描述已更新', '', { timeOut: 3000 });\n    });\n}\n","import { registerButtons } from '@/button';\nimport { handleVariablesInCallback, handleVariablesInMessage } from '@/function';\nimport { variable_events } from '@/variable_def';\nimport { initCheck } from '@/variable_init';\n\n$(() => {\n    registerButtons();\n    eventOn(tavern_events.GENERATION_STARTED, initCheck);\n    eventOn(tavern_events.MESSAGE_SENT, initCheck);\n    eventOn(tavern_events.MESSAGE_SENT, handleVariablesInMessage);\n    eventOn(tavern_events.MESSAGE_RECEIVED, handleVariablesInMessage);\n    eventOn(variable_events.INVOKE_MVU_PROCESS, handleVariablesInCallback);\n\n    // 导出到窗口，便于调试\n    _.set(window, 'handleVariablesInMessage', handleVariablesInMessage);\n});\n\n$(window).on('unload', () => {\n    eventRemoveListener(tavern_events.GENERATION_STARTED, initCheck);\n    eventRemoveListener(tavern_events.MESSAGE_SENT, initCheck);\n    eventRemoveListener(tavern_events.MESSAGE_SENT, handleVariablesInMessage);\n    eventRemoveListener(tavern_events.MESSAGE_RECEIVED, handleVariablesInMessage);\n    eventRemoveListener(variable_events.INVOKE_MVU_PROCESS, handleVariablesInCallback);\n});\n"],"names":["__webpack_require__","isArraySchema","value","type","isObjectSchema","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","variable_events","__WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_mathjs_esm_aec644b1__","EXTENSIBLE_MARKER","generateSchema","data","oldSchemaNode","parentRecursiveExtensible","Array","isArray","oldElementType","template","isExtensible","isRecursiveExtensible","extensible","recursiveExtensible","elementType","console","error","metaElementIndex","findIndex","item","_","isObject","isDate","metaElement","undefined","$meta","splice","log","markerIndex","indexOf","schema_node","length","typedData","oldProperties","oldExtensible","oldRecursiveExtensible","properties","schemaNode","parentMeta","oldChildNode","childRecursiveExtensible","childSchema","isRequired","required","includes","dataType","getSchemaForPath","schema","path","pathSegments","toPath","currentSchema","segment","test","reconcileAndApplySchema","variables","newSchema","cloneDeep","stat_data","newSchemaWithProps","strictTemplate","concatTemplateArray","has","cleanUpMetadata","i","trimQuotesAndBackslashes","str","isString","replace","applyTemplate","strict_array_cast","array_merge_concat","value_is_object","value_is_array","template_is_array","merge","concat","parseCommandValue","valStr","trimmed","trim","JSON","parse","e","startsWith","endsWith","result","Function","err","scope","Math","math","toString","parseFloat","toPrecision","YAML","findMatchingCloseParen","startPos","parenCount","inQuote","quoteChar","char","prevChar","parseParameters","paramsString","params","currentParam","bracketCount","braceCount","push","async","getLastValidVariable","message_id","structuredClone","SillyTavern","chat","slice","map","chat_message","swipe_id","findLast","getVariables","pathFix","segments","currentSegment","inQuotes","join","updateVariables","current_message_content","out_is_modifed","eventEmit","out_status","delta_status","commands","inputText","results","setMatch","substring","match","index","commandType","setStart","openParen","closeParen","endPos","comment","potentialComment","fullMatch","isValid","command","args","reason","extractCommands","substitudeMacros","variable_modified","strict_template","concat_template_array","reason_str","display_str","warn","oldValue","newValue","Date","toISOString","Number","set","finalNewValue","stringify","info","targetPath","existingValue","targetSchema","newKey","String","successful","valueToAssign","collection","keyOrIndex","keyOrIndexToRemove","containerPath","pathParts","lastPart","pop","containerSchema","keyString","targetToRemove","itemRemoved","unset","originalArray","indexToRemove","isEqual","keys","keyToRemove","initialValue","valueToAdd","isValueWithDescription","potentialDate","parsedDate","isNaN","getTime","delta","newDate","finalValueToSet","display_data","delta_data","handleVariablesInMessage","getChatMessages","at","message_content","message","chat_variables","initialized_lorebooks","replaceVariables","insertOrAssignVariables","role","setChatMessages","refresh","handleVariablesInCallback","variable_info","old_variables","new_variables","updateDescriptions","_init_path","init_data","msg_data","target_data","forEach","current_path","msgValue","targetObj","description","msg_array","current_target","description_path","y","x","__WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_json5_esm_143ca249__","__WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_toml_esm_005ece54__","initCheck","last_msg","last_chat_msg","include_swipes","first_msg","Error","swipes_data","getLastMessageVariables","oldArray","newObject","lorebookName","is_updated","loadInitVarData","isEmpty","generated_schema","swipes","current_swipe_data","setChatMessage","dst_setting","scan_depth","context_percentage","budget_cap","min_activations","max_depth","max_recursion_steps","insertion_strategy","include_names","recursive","case_sensitive","match_whole_words","use_group_scoring","overflow_alert","settings","getLorebookSettings","setLorebookSettings","updateLorebookSettings","gameData","lorebookList","enabled_lorebook_list","selected_global_lorebooks","char_lorebook","getCurrentCharPrimaryLorebook","getEnabledLorebookList","current_lorebook","init_entries","getLorebookEntries","entry","toLowerCase","content","parsedData","parseError","e2","e3","toastr","timeOut","buttons","registerButtons","current_buttons","getScriptButtons","getScriptId","current_button_names","b","name","button","filter","visible","replaceScriptButtons","addButtons","eventOnButton","getLastMessageId","deleteVariable","latest_init_data","latest_msg_data","merged_data","success","$","eventOn","tavern_events","GENERATION_STARTED","MESSAGE_SENT","MESSAGE_RECEIVED","window","on","eventRemoveListener"],"sourceRoot":""}