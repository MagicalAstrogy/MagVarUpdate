{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://mag-variable-update/webpack/bootstrap","webpack://mag-variable-update/webpack/runtime/define property getters","webpack://mag-variable-update/webpack/runtime/hasOwnProperty shorthand","webpack://mag-variable-update/./src/variable_def.ts","webpack://mag-variable-update/./src/function.ts","webpack://mag-variable-update/external module \"https://fastly.jsdelivr.net/npm/json5\"","webpack://mag-variable-update/external module \"https://fastly.jsdelivr.net/npm/toml\"","webpack://mag-variable-update/./src/variable_init.ts","webpack://mag-variable-update/./src/update_descriptions.ts","webpack://mag-variable-update/./src/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export type GameData = {\n    initialized_lorebooks: string[];\n    stat_data: Record<string, any>;\n    display_data: Record<string, any>;\n    delta_data: Record<string, any>;\n};\n\nexport interface VariableData {\n    old_variables: GameData;\n    /**\n     * 输出变量，仅当实际产生了变量变更的场合，会产生 newVariables\n     */\n    new_variables?: GameData;\n}\n\nexport const variable_events = {\n    SINGLE_VARIABLE_UPDATED: 'mag_variable_updated',\n    VARIABLE_UPDATE_ENDED: 'mag_variable_update_ended',\n    VARIABLE_UPDATE_STARTED: 'mag_variable_update_started',\n    INVOKE_MVU_PROCESS: 'mag_invoke_mvu',\n} as const;\n\nexport type ExtendedListenerType = {\n    [variable_events.SINGLE_VARIABLE_UPDATED]: (\n        stat_data: Record<string, any>,\n        path: string,\n        _oldValue: any,\n        _newValue: any\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_STARTED]: (\n        variables: GameData,\n        out_is_updated: boolean\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_ENDED]: (variables: GameData, out_is_updated: boolean) => void;\n    [variable_events.INVOKE_MVU_PROCESS]: (\n        message_content: string,\n        variable_info: VariableData\n    ) => void;\n};\n","import { variable_events, VariableData } from '@/variable_def';\n\nexport function trimQuotesAndBackslashes(str: string): string {\n    if (!_.isString(str)) return str;\n    // Regular expression to match backslashes and quotes (including backticks) at the beginning and end\n    return str.replace(/^[\\\\\"'` ]*(.*?)[\\\\\"'` ]*$/, '$1');\n}\n\n/**\n * 从大字符串中提取所有 .set(${path}, ${new_value});//${reason} 格式的模式\n * 并解析出每个匹配项的路径、新值和原因部分\n */\ninterface SetCommand {\n    fullMatch: string;\n    path: string;\n    oldValue: string;\n    newValue: string;\n    reason: string;\n}\n\n/**\n * 从输入文本中提取所有 _.set() 调用\n *\n * 问题背景：\n * 原本使用正则表达式 /_\\.set\\(([\\s\\S]*?)\\);/ 来匹配，但这种非贪婪匹配会在遇到\n * 嵌套的 ); 时提前结束。例如：\n * _.set('path', [\"text with _.set('inner',null);//comment\"], []);\n * 会在 \"comment\") 处错误地结束匹配\n *\n * 解决方案：\n * 使用状态机方法，通过计数括号配对来准确找到 _.set() 调用的结束位置\n */\nexport function extractSetCommands(inputText: string): SetCommand[] {\n    const results: SetCommand[] = [];\n    let i = 0;\n\n    while (i < inputText.length) {\n        // 步骤1: 查找 _.set( 的起始位置\n        const setStart = inputText.indexOf('_.set(', i);\n        if (setStart === -1) break;\n\n        // 步骤2: 定位开始括号\n        const openParen = setStart + 6; // '_.set(' 的长度\n\n        // 步骤3: 使用括号配对算法找到对应的闭括号\n        // 这个算法会正确处理引号内的括号，避免误匹配\n        const closeParen = findMatchingCloseParen(inputText, openParen);\n        if (closeParen === -1) {\n            // 如果找不到匹配的闭括号，跳过这个位置继续查找\n            i = openParen + 1;\n            continue;\n        }\n\n        // 步骤4: 检查闭括号后是否紧跟分号（_.set()调用的标准格式）\n        let endPos = closeParen + 1;\n        if (endPos < inputText.length && inputText[endPos] === ';') {\n            endPos++;\n\n            // 步骤5: 处理可能的注释部分\n            // 跳过分号后的空格\n            while (endPos < inputText.length && inputText[endPos] === ' ') {\n                endPos++;\n            }\n\n            // 检查是否有 // 注释\n            let comment = '';\n            if (\n                endPos + 1 < inputText.length &&\n                inputText[endPos] === '/' &&\n                inputText[endPos + 1] === '/'\n            ) {\n                // 找到注释的结束位置（换行符或文本结束）\n                const commentEnd = inputText.indexOf('\\n', endPos);\n                if (commentEnd !== -1) {\n                    comment = inputText.substring(endPos + 2, commentEnd).trim();\n                    endPos = commentEnd;\n                } else {\n                    // 注释延续到文本结尾\n                    comment = inputText.substring(endPos + 2).trim();\n                    endPos = inputText.length;\n                }\n            }\n\n            // 步骤6: 提取参数并解析\n            const paramsString = inputText.substring(openParen, closeParen);\n            const fullMatch = inputText.substring(setStart, endPos);\n\n            // 使用 parseParameters 解析参数，它能正确处理嵌套的数组、对象和引号\n            const params = parseParameters(paramsString);\n\n            // 步骤7: 根据参数数量构建结果\n            if (params.length >= 3) {\n                // 标准格式：_.set(path, oldValue, newValue)\n                results.push({\n                    fullMatch: fullMatch,\n                    path: trimQuotesAndBackslashes(params[0]),\n                    oldValue: trimQuotesAndBackslashes(params[1]),\n                    newValue: trimQuotesAndBackslashes(params[2]),\n                    reason: comment,\n                });\n            } else if (params.length === 2) {\n                // 简化格式：_.set(path, value)\n                // 在这种情况下，oldValue 和 newValue 都设为相同的值\n                results.push({\n                    fullMatch: fullMatch,\n                    path: trimQuotesAndBackslashes(params[0]),\n                    oldValue: trimQuotesAndBackslashes(params[1]),\n                    newValue: trimQuotesAndBackslashes(params[1]),\n                    reason: comment,\n                });\n            }\n\n            // 更新搜索位置，继续查找下一个 _.set() 调用\n            i = endPos;\n        } else {\n            // 如果没有分号，跳过这个位置\n            i = closeParen + 1;\n        }\n    }\n\n    return results;\n}\n\n/**\n * 辅助函数：找到匹配的闭括号\n *\n * 算法说明：\n * 1. 使用括号计数器，遇到 ( 加1，遇到 ) 减1\n * 2. 当计数器归零时，找到了匹配的闭括号\n * 3. 重要：忽略引号内的括号，避免字符串内容干扰匹配\n *\n * @param str 要搜索的字符串\n * @param startPos 开始括号的位置\n * @returns 匹配的闭括号位置，如果找不到返回 -1\n */\nfunction findMatchingCloseParen(str: string, startPos: number): number {\n    let parenCount = 1; // 从1开始，因为已经有一个开括号\n    let inQuote = false;\n    let quoteChar = '';\n\n    for (let i = startPos; i < str.length; i++) {\n        const char = str[i];\n        const prevChar = i > 0 ? str[i - 1] : '';\n\n        // 处理引号状态\n        // 支持三种引号：双引号、单引号和反引号（模板字符串）\n        // 注意：需要检查前一个字符不是反斜杠，以正确处理转义的引号\n        if ((char === '\"' || char === \"'\" || char === '`') && prevChar !== '\\\\') {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        // 只在不在引号内时计算括号\n        // 这确保了像 \"text with )\" 这样的字符串不会影响括号匹配\n        if (!inQuote) {\n            if (char === '(') {\n                parenCount++;\n            } else if (char === ')') {\n                parenCount--;\n                if (parenCount === 0) {\n                    return i;\n                }\n            }\n        }\n    }\n\n    return -1; // 没有找到匹配的闭括号\n}\n\n// 解析参数字符串，处理嵌套结构\nexport function parseParameters(paramsString: string): string[] {\n    const params: string[] = [];\n    let currentParam = '';\n    let inQuote = false;\n    let quoteChar = '';\n    let bracketCount = 0;\n    let braceCount = 0;\n\n    for (let i = 0; i < paramsString.length; i++) {\n        const char = paramsString[i];\n\n        // 处理引号（包括反引号）\n        if (\n            (char === '\"' || char === \"'\" || char === '`') &&\n            (i === 0 || paramsString[i - 1] !== '\\\\')\n        ) {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        // 处理方括号 (数组)\n        if (char === '[') bracketCount++;\n        if (char === ']') bracketCount--;\n\n        // 处理花括号 (对象)\n        if (char === '{') braceCount++;\n        if (char === '}') braceCount--;\n\n        // 处理参数分隔符\n        if (char === ',' && !inQuote && bracketCount === 0 && braceCount === 0) {\n            params.push(currentParam.trim());\n            currentParam = '';\n            continue;\n        }\n\n        currentParam += char;\n    }\n\n    // 添加最后一个参数\n    if (currentParam.trim()) {\n        params.push(currentParam.trim());\n    }\n\n    return params;\n}\n\nexport async function getLastValidVariable(message_id: number): Promise<Record<string, any>> {\n    return (\n        structuredClone(\n            SillyTavern.chat\n                .slice(0, message_id + 1)\n                .map(chat_message => _.get(chat_message, ['variables', chat_message.swipe_id ?? 0]))\n                .findLast(variables => _.has(variables, 'stat_data'))\n        ) ?? getVariables()\n    );\n}\n\nfunction pathFix(path: string): string {\n    const segments = [];\n    let currentSegment = '';\n    let inQuotes = false;\n    let quoteChar = '';\n\n    for (let i = 0; i < path.length; i++) {\n        const char = path[i];\n\n        // Handle quotes\n        if ((char === '\"' || char === \"'\") && (i === 0 || path[i - 1] !== '\\\\')) {\n            if (!inQuotes) {\n                inQuotes = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuotes = false;\n            } else {\n                currentSegment += char;\n            }\n        } else if (char === '.' && !inQuotes) {\n            segments.push(currentSegment);\n            currentSegment = '';\n        } else {\n            currentSegment += char;\n        }\n    }\n\n    if (currentSegment) {\n        segments.push(currentSegment);\n    }\n\n    return segments.join('.');\n}\n\nexport async function updateVariables(\n    current_message_content: string,\n    variables: any\n): Promise<boolean> {\n    const out_is_modifed = false;\n    await eventEmit(variable_events.VARIABLE_UPDATE_STARTED, variables, out_is_modifed);\n    const out_status: Record<string, any> = _.cloneDeep(variables);\n    const delta_status: Record<string, any> = { stat_data: {} };\n    const matched_set = extractSetCommands(current_message_content);\n    let variable_modified = false;\n    for (const setCommand of matched_set) {\n        let { path, newValue, reason } = setCommand;\n        path = pathFix(path);\n\n        if (_.has(variables.stat_data, path)) {\n            const currentValue = _.get(variables.stat_data, path);\n            //有时候llm会返回整个数组，处理它\n            if (\n                _.isString(newValue) &&\n                newValue.trim().startsWith('[') &&\n                newValue.trim().endsWith(']')\n            ) {\n                try {\n                    const parsedArray = YAML.parse(newValue);\n                    if (Array.isArray(parsedArray) && parsedArray.length > 0) {\n                        newValue = parsedArray[0];\n                    }\n                } catch (error: any) {\n                    console.error(`Error parsing JSON array for '${path}': ${error.message}`);\n                }\n            }\n            // Check the type of the current value\n            if (typeof currentValue === 'number') {\n                // If the current value is a number, convert the new value to a number\n                const newValueNumber = Number(newValue);\n                const oldValue = currentValue;\n                _.set(variables.stat_data, path, newValueNumber);\n                const reason_str = reason ? `(${reason})` : '';\n                const display_str = `${oldValue}->${newValueNumber} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(`Set '${path}' to '${newValueNumber}' ${reason_str}`);\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    newValueNumber\n                );\n            } else if (Array.isArray(currentValue) && currentValue.length === 2) {\n                // If the current value is of type ValueWithDescription<T>\n                const newValueParsed =\n                    typeof currentValue[0] === 'number'\n                        ? Number(newValue)\n                        : trimQuotesAndBackslashes(newValue);\n                const oldValue = _.cloneDeep(currentValue[0]);\n                currentValue[0] = newValueParsed;\n                _.set(variables.stat_data, path, currentValue);\n                const reason_str = reason ? `(${reason})` : '';\n                const display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${trimQuotesAndBackslashes(JSON.stringify(newValue))} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(\n                    `Set '${path}' to '${trimQuotesAndBackslashes(JSON.stringify(newValueParsed))}' ${reason_str}`\n                );\n                // Call the onVariableUpdated function after updating the variable\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    newValueParsed\n                );\n            } else {\n                // Otherwise, set the new value directly\n                const trimmedNewValue = trimQuotesAndBackslashes(newValue);\n                const oldValue = _.cloneDeep(currentValue);\n                _.set(variables.stat_data, path, trimmedNewValue);\n                const reason_str = reason ? `(${reason})` : '';\n                const stringNewValue = trimQuotesAndBackslashes(JSON.stringify(trimmedNewValue));\n                const display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${stringNewValue} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(`Set '${path}' to '${stringNewValue}' ${reason_str}`);\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    trimmedNewValue\n                );\n            }\n        } else {\n            const display_str = `undefined Path: ${path}->${newValue} (${reason})`;\n            console.error(display_str);\n        }\n    }\n\n    variables.display_data = out_status.stat_data;\n    variables.delta_data = delta_status.stat_data;\n    await eventEmit(variable_events.VARIABLE_UPDATE_ENDED, variables, out_is_modifed);\n    return variable_modified || out_is_modifed;\n}\n\nexport async function handleVariablesInMessage(message_id: number) {\n    const chat_message = getChatMessages(message_id).at(-1);\n    if (!chat_message) {\n        return;\n    }\n\n    const message_content = chat_message.message;\n    const variables = await getLastValidVariable(message_id);\n    if (!_.has(variables, 'stat_data')) {\n        console.error(`cannot found stat_data for ${message_id}`);\n        return;\n    }\n\n    const has_variable_modified = await updateVariables(message_content, variables);\n    if (has_variable_modified) {\n        await replaceVariables(variables, { type: 'chat' });\n    }\n    await replaceVariables(variables, { type: 'message', message_id: message_id });\n\n    if (chat_message.role !== 'user' && !message_content.includes('<StatusPlaceHolderImpl/>')) {\n        await setChatMessages(\n            [\n                {\n                    message_id: message_id,\n                    message: message_content + '\\n\\n<StatusPlaceHolderImpl/>',\n                },\n            ],\n            {\n                refresh: 'affected',\n            }\n        );\n    }\n}\n\nexport async function handleVariablesInCallback(\n    message_content: string,\n    variable_info: VariableData\n) {\n    if (variable_info.old_variables === undefined) {\n        return;\n    }\n    variable_info.new_variables = _.cloneDeep(variable_info.old_variables);\n    const variables = variable_info.new_variables;\n\n    const modified = await updateVariables(message_content, variables);\n    //如果没有修改，则不产生 newVariable\n    if (!modified) delete variable_info.new_variables;\n}\n","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"parse\"]: () => (__WEBPACK_EXTERNAL_MODULE_https_fastly_jsdelivr_net_npm_json5_adc2d4f6__.parse) });","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"parse\"]: () => (__WEBPACK_EXTERNAL_MODULE_https_fastly_jsdelivr_net_npm_toml_9118b994__.parse) });","// 整体游戏数据类型\nimport { updateVariables } from '@/function';\nimport { GameData } from '@/variable_def';\nimport * as JSON5 from 'json5';\nimport * as TOML from 'toml';\n\ntype LorebookEntry = {\n    content: string;\n    comment?: string;\n};\n\n/**\n * 获取所有启用的 lorebook 列表\n */\nexport async function getEnabledLorebookList(): Promise<string[]> {\n    const lorebook_settings = await getLorebookSettings();\n    const enabled_lorebook_list = [...lorebook_settings.selected_global_lorebooks];\n    const char_lorebook = await getCurrentCharPrimaryLorebook();\n    if (char_lorebook !== null) {\n        enabled_lorebook_list.push(char_lorebook);\n    }\n    return enabled_lorebook_list;\n}\n\n/**\n * 从 lorebook 中加载所有 InitVar 数据并合并到提供的 GameData 中\n */\nexport async function loadInitVarData(\n    gameData: GameData,\n    lorebookList?: string[]\n): Promise<boolean> {\n    const enabled_lorebook_list = lorebookList || (await getEnabledLorebookList());\n    let is_updated = false;\n\n    for (const current_lorebook of enabled_lorebook_list) {\n        if (gameData.initialized_lorebooks.includes(current_lorebook)) continue;\n        gameData.initialized_lorebooks.push(current_lorebook);\n        const init_entries = (await getLorebookEntries(current_lorebook)) as LorebookEntry[];\n\n        for (const entry of init_entries) {\n            if (entry.comment?.toLowerCase().includes('[initvar]')) {\n                const content = substitudeMacros(entry.content);\n                let parsedData: any = null;\n                let parseError: Error | null = null;\n\n                // Try YAML first (which also handles JSON)\n                try {\n                    parsedData = YAML.parse(content);\n                } catch (e) {\n                    // Try JSON5\n                    try {\n                        parsedData = JSON5.parse(content);\n                    } catch (e2) {\n                        // Try TOML\n                        try {\n                            parsedData = TOML.parse(content);\n                        } catch (e3) {\n                            parseError = new Error(\n                                `Failed to parse content as YAML/JSON, JSON5, or TOML: ${e3}`\n                            );\n                        }\n                    }\n                }\n\n                if (parseError) {\n                    console.error(`Failed to parse lorebook entry: ${parseError}`);\n                    // @ts-ignore\n                    toastr.error(parseError.message, 'Failed to parse lorebook entry', {\n                        timeOut: 5000,\n                    });\n                    throw parseError;\n                }\n\n                if (parsedData) {\n                    gameData.stat_data = _.merge(gameData.stat_data, parsedData);\n                }\n            }\n        }\n        is_updated = true;\n    }\n\n    return is_updated;\n}\n\n/**\n * 创建一个新的空 GameData 对象\n */\nexport function createEmptyGameData(): GameData {\n    return {\n        display_data: {},\n        initialized_lorebooks: [],\n        stat_data: {},\n        delta_data: {},\n    };\n}\n\n/**\n * 获取最后一条消息的变量数据\n */\nexport async function getLastMessageVariables(): Promise<{\n    message: ChatMessageSwiped;\n    variables: GameData | undefined;\n}> {\n    let last_chat_msg: ChatMessageSwiped[] = [];\n    try {\n        last_chat_msg = (await getChatMessages(-2, {\n            role: 'assistant',\n            include_swipes: true,\n        })) as ChatMessageSwiped[];\n    } catch (e) {\n        // 在第一行时，必定发生异常。\n    }\n\n    if (!last_chat_msg || last_chat_msg.length <= 0) {\n        const first_msg = await getChatMessages(0, {\n            include_swipes: true,\n        });\n        if (first_msg && first_msg.length > 0) {\n            last_chat_msg = first_msg;\n        } else {\n            throw new Error('不存在任何一条消息');\n        }\n    }\n\n    const last_msg = last_chat_msg[0];\n    const variables = last_msg.swipes_data[last_msg.swipe_id] as GameData & Record<string, any>;\n\n    return { message: last_msg, variables };\n}\n\n/**\n * 更新 lorebook 设置为推荐配置\n */\nexport async function updateLorebookSettings(): Promise<void> {\n    /*Ref:https://github.com/lolo-desu/lolocard/blob/master/src/%E6%97%A5%E8%AE%B0%E7%BB%9C%E7%BB%9C/%E8%84%9A%E6%9C%AC/%E8%B0%83%E6%95%B4%E4%B8%96%E7%95%8C%E4%B9%A6%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE.ts\n    */\n    const dst_setting : Partial<LorebookSettings> = {\n        scan_depth: 2,\n        context_percentage: 100,\n        budget_cap: 0,\n        min_activations: 0,\n        max_depth: 0,\n        max_recursion_steps: 0,\n\n        insertion_strategy: 'character_first',\n\n        include_names: false,\n        recursive: true,\n        case_sensitive: false,\n        match_whole_words: false,\n        use_group_scoring: false,\n        overflow_alert: false,\n    };\n    const settings = getLorebookSettings();\n    if (!_.isEqual(_.merge({}, settings, dst_setting), settings)) {\n        setLorebookSettings(dst_setting);\n    }\n}\n\nexport async function initCheck() {\n    let last_msg: ChatMessageSwiped;\n    let variables: GameData & Record<string, any>;\n\n    try {\n        const result = await getLastMessageVariables();\n        last_msg = result.message;\n        variables = result.variables ?? createEmptyGameData();\n    } catch (e) {\n        console.error('不存在任何一条消息，退出');\n        return;\n    }\n\n    // 确保变量结构完整\n    if (variables === undefined) {\n        variables = createEmptyGameData();\n    }\n    if (!_.has(variables, 'initialized_lorebooks')) {\n        variables.initialized_lorebooks = [];\n    }\n    if (!variables.stat_data) {\n        variables.stat_data = {};\n    }\n\n    // 加载 InitVar 数据\n    const is_updated = await loadInitVarData(variables);\n    if (!is_updated) {\n        return;\n    }\n\n    console.info(`Init chat variables.`);\n    await insertOrAssignVariables(variables);\n\n    // 更新所有 swipes\n    for (let i = 0; i < last_msg.swipes.length; i++) {\n        const current_swipe_data = _.cloneDeep(variables);\n        await updateVariables(substitudeMacros(last_msg.swipes[i]), current_swipe_data);\n        //新版本这个接口给deprecated了，但是新版本的接口不好用，先这样\n        //@ts-ignore\n        await setChatMessage({ data: current_swipe_data }, last_msg.message_id, {\n            refresh: 'none',\n            swipe_id: i,\n        });\n    }\n\n    // 更新 lorebook 设置\n    await updateLorebookSettings();\n}\n\n//window.initCheck = initCheck;\n","/**\n * 递归更新描述字段\n *\n * 示例数据结构：\n * initData: {\n *   \"属性\": {\n *     \"value\": 100,\n *     \"description\": \"这是初始描述\"  // 条件 4(a)\n *   },\n *   \"生命值\": [100, \"初始生命值\"],  // 条件 4(b): ValueWithDescription<number>\n *   \"技能\": [{\n *     \"name\": \"攻击\",\n *     \"damage\": [50, \"基础伤害\"],  // 嵌套的 ValueWithDescription\n *     \"description\": \"普通攻击\"\n *   }],\n *   \"装备\": {\n *     \"武器\": [\"剑\", \"初始武器\"],  // ValueWithDescription<string>\n *     \"属性加成\": {\n *       \"攻击力\": [10, \"武器攻击力加成\"]\n *     }\n *   }\n * }\n */\nexport function updateDescriptions(\n    _init_path: string,\n    init_data: any,\n    msg_data: any,\n    target_data: any\n) {\n    _.forEach(init_data, (value, key) => {\n        const current_path = key; //init_path ? `${init_path}.${key}` : key;\n\n        if (_.isArray(value)) {\n            // 检查是否为 ValueWithDescription<T> 类型 (长度为2，第二个元素是字符串)\n            if (value.length === 2 && _.isString(value[1])) {\n                // 条件 4(b): 满足 ValueWithDescription<T> 定义\n                if (_.isArray(_.get(msg_data, current_path))) {\n                    const msgValue = _.get(msg_data, current_path);\n                    if (msgValue.length === 2) {\n                        // 更新描述(第二个元素)\n                        _.set(target_data, `${current_path}[1]`, value[1]);\n\n                        // 如果第一个元素是对象或数组，需要递归处理\n                        if (_.isObject(value[0]) && !_.isArray(value[0])) {\n                            // 处理对象\n                            const targetObj = _.get(target_data, `${key}[0]`);\n\n                            // 如果对象包含description属性，需要特殊处理\n                            if (\n                                _.has(value[0], 'description') &&\n                                _.isString(value[0].description)\n                            ) {\n                                if (_.has(msgValue[0], 'description')) {\n                                    _.set(\n                                        target_data,\n                                        `${current_path}[0].description`,\n                                        value[0].description\n                                    );\n                                }\n                            }\n\n                            // 递归处理对象的其他属性\n                            updateDescriptions(\n                                `${current_path}[0]`,\n                                value[0],\n                                msgValue[0],\n                                targetObj\n                            );\n                        } else if (_.isArray(value[0])) {\n                            // 处理数组\n                            updateDescriptions(\n                                `${current_path}[0]`,\n                                value[0],\n                                msgValue[0],\n                                target_data[0]\n                            );\n                        }\n                    }\n                }\n            } else if (_.isArray(_.get(msg_data, current_path))) {\n                // 普通数组，递归处理每个元素\n                const msg_array = _.get(msg_data, current_path);\n                value.forEach((item, index) => {\n                    if (index < msg_array.length) {\n                        if (_.isObject(item)) {\n                            const current_target = _.get(target_data, `${current_path}[${index}]`);\n                            // 如果对象包含description属性，需要特殊处理\n                            if (_.has(item, 'description') && _.isString(item.description)) {\n                                if (_.has(msg_array[index], 'description')) {\n                                    _.set(current_target, `description`, item.description);\n                                }\n                            }\n\n                            updateDescriptions(\n                                `${current_path}[${index}]`,\n                                value[index],\n                                msg_array[index],\n                                current_target\n                            );\n                        }\n                    }\n                });\n            }\n        } else if (_.isObject(value)) {\n            // 处理对象\n            if (_.has(value, 'description') && _.isString(value.description)) {\n                // 条件 4(a): 对象包含 description 字段且为字符串\n                //msg_data 等已经在递归时跟着进入了更深的层次，不需要 currentPath前缀\n                const description_path = `${key}.description`;\n                if (_.has(msg_data, description_path)) {\n                    _.set(target_data, description_path, value.description);\n                }\n            }\n\n            // 继续递归处理对象的其他属性\n            if (_.has(msg_data, key) && _.isObject(msg_data[key])) {\n                updateDescriptions(current_path, value, msg_data[key], target_data[key]);\n            }\n        }\n    });\n}\n","import {\n    handleVariablesInMessage,\n    handleVariablesInCallback,\n    getLastValidVariable,\n} from '@/function';\nimport { initCheck, createEmptyGameData, loadInitVarData } from '@/variable_init';\nimport { variable_events } from '@/variable_def';\nimport { updateDescriptions } from '@/update_descriptions';\n\n$(() => {\n    eventOn(tavern_events.GENERATION_STARTED, initCheck);\n    eventOn(tavern_events.MESSAGE_SENT, initCheck);\n    eventOn(tavern_events.MESSAGE_SENT, handleVariablesInMessage);\n    eventOn(tavern_events.MESSAGE_RECEIVED, handleVariablesInMessage);\n    eventOn(variable_events.INVOKE_MVU_PROCESS, handleVariablesInCallback);\n\n    // 导出到窗口，便于调试\n    _.set(window, 'handleVariablesInMessage', handleVariablesInMessage);\n});\n\n$(window).on('unload', () => {\n    eventRemoveListener(tavern_events.GENERATION_STARTED, initCheck);\n    eventRemoveListener(tavern_events.MESSAGE_SENT, initCheck);\n    eventRemoveListener(tavern_events.MESSAGE_SENT, handleVariablesInMessage);\n    eventRemoveListener(tavern_events.MESSAGE_RECEIVED, handleVariablesInMessage);\n    eventRemoveListener(variable_events.INVOKE_MVU_PROCESS, handleVariablesInCallback);\n});\n\neventOnButton('重新处理变量', async function () {\n    const last_msg = getLastMessageId();\n    if (last_msg < 1) return;\n    if (SillyTavern.chat.length === 0) return;\n    await deleteVariable('stat_data', { type: 'message', message_id: last_msg });\n    //重新处理变量\n    await handleVariablesInMessage(getLastMessageId());\n});\n\neventOnButton('重新读取初始变量', async function () {\n    // 1. 创建一个新的空 GameData 并加载 InitVar 数据\n    const latest_init_data = createEmptyGameData();\n\n    try {\n        const hasInitData = await loadInitVarData(latest_init_data);\n        if (!hasInitData) {\n            console.error('没有找到 InitVar 数据');\n            toastr.error('没有找到 InitVar 数据', '', { timeOut: 3000 });\n            return;\n        }\n    } catch (e) {\n        console.error('加载 InitVar 数据失败:', e);\n        return;\n    }\n\n    // 2. 从最新楼层获取最新变量\n    const message_id = getLastMessageId();\n    if (message_id < 0) {\n        console.error('没有找到消息');\n        toastr.error('没有找到消息', '', { timeOut: 3000 });\n        return;\n    }\n\n    const latest_msg_data = await getLastValidVariable(message_id);\n\n    if (!_.has(latest_msg_data, 'stat_data')) {\n        console.error('最新消息中没有找到 stat_data');\n        toastr.error('最新消息中没有 stat_data', '', { timeOut: 3000 });\n        return;\n    }\n\n    // 3. 产生新变量，以 latest_init_data 为基础，合并入 latest_msg_data 的内容\n    //此处 latest_init_data 内不存在复杂类型，因此可以采用 structuredClone\n    const merged_data = structuredClone(latest_init_data);\n    merged_data.stat_data = _.merge(merged_data.stat_data, latest_msg_data.stat_data);\n\n    // 4-5. 遍历并更新描述字段\n    updateDescriptions(\n        '',\n        latest_init_data.stat_data,\n        latest_msg_data.stat_data,\n        merged_data.stat_data\n    );\n\n    // 6. 更新变量到最新消息\n    await replaceVariables(merged_data, { type: 'message', message_id: message_id });\n\n    console.info('InitVar更新完成');\n    toastr.success('InitVar描述已更新', '', { timeOut: 3000 });\n});\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","variable_events","trimQuotesAndBackslashes","str","_","isString","replace","findMatchingCloseParen","startPos","parenCount","inQuote","quoteChar","i","length","char","prevChar","parseParameters","paramsString","params","currentParam","bracketCount","braceCount","push","trim","async","getLastValidVariable","message_id","structuredClone","SillyTavern","chat","slice","map","chat_message","swipe_id","findLast","variables","has","getVariables","pathFix","path","segments","currentSegment","inQuotes","join","updateVariables","current_message_content","out_is_modifed","eventEmit","out_status","cloneDeep","delta_status","matched_set","inputText","results","setStart","indexOf","openParen","closeParen","endPos","comment","commentEnd","substring","fullMatch","oldValue","newValue","reason","extractSetCommands","variable_modified","setCommand","stat_data","currentValue","startsWith","endsWith","parsedArray","YAML","parse","Array","isArray","error","console","message","newValueNumber","Number","set","reason_str","display_str","info","newValueParsed","JSON","stringify","trimmedNewValue","stringNewValue","display_data","delta_data","handleVariablesInMessage","getChatMessages","at","message_content","replaceVariables","type","role","includes","setChatMessages","refresh","handleVariablesInCallback","variable_info","undefined","old_variables","new_variables","y","x","d","__WEBPACK_EXTERNAL_MODULE_https_fastly_jsdelivr_net_npm_json5_adc2d4f6__","__WEBPACK_EXTERNAL_MODULE_https_fastly_jsdelivr_net_npm_toml_9118b994__","loadInitVarData","gameData","lorebookList","enabled_lorebook_list","getLorebookSettings","selected_global_lorebooks","char_lorebook","getCurrentCharPrimaryLorebook","getEnabledLorebookList","is_updated","current_lorebook","initialized_lorebooks","init_entries","getLorebookEntries","entry","toLowerCase","content","substitudeMacros","parsedData","parseError","e","e2","e3","Error","toastr","timeOut","merge","initCheck","last_msg","result","last_chat_msg","include_swipes","first_msg","swipes_data","getLastMessageVariables","insertOrAssignVariables","swipes","current_swipe_data","setChatMessage","data","dst_setting","scan_depth","context_percentage","budget_cap","min_activations","max_depth","max_recursion_steps","insertion_strategy","include_names","recursive","case_sensitive","match_whole_words","use_group_scoring","overflow_alert","settings","isEqual","setLorebookSettings","updateLorebookSettings","updateDescriptions","_init_path","init_data","msg_data","target_data","forEach","value","current_path","msgValue","isObject","targetObj","description","msg_array","item","index","current_target","description_path","$","eventOn","tavern_events","GENERATION_STARTED","MESSAGE_SENT","MESSAGE_RECEIVED","window","on","eventRemoveListener","eventOnButton","getLastMessageId","deleteVariable","latest_init_data","latest_msg_data","merged_data","success"],"sourceRoot":""}