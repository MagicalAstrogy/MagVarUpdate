{"version":3,"file":"bundle.js","mappings":"AAEO,SAASA,EAAyBC,GACrC,OAAKC,EAAEC,SAASF,GAETA,EAAIG,QAAQ,4BAA6B,MAFnBH,CAGjC,CAiIA,SAASI,EAAuBJ,EAAaK,GACzC,IAAIC,EAAa,EACbC,GAAU,EACVC,EAAY,GAEhB,IAAK,IAAIC,EAAIJ,EAAUI,EAAIT,EAAIU,OAAQD,IAAK,CACxC,MAAME,EAAOX,EAAIS,GACXG,EAAWH,EAAI,EAAIT,EAAIS,EAAI,GAAK,GAgBtC,GAXc,MAATE,GAAyB,MAATA,GAAyB,MAATA,GAA8B,OAAbC,IAC7CL,EAGMI,IAASH,IAChBD,GAAU,IAHVA,GAAU,EACVC,EAAYG,KAQfJ,EACD,GAAa,MAATI,EACAL,SACG,GAAa,MAATK,IACPL,IACmB,IAAfA,GACA,OAAOG,CAIvB,CAEA,OAAQ,CACZ,CAGO,SAASI,EAAgBC,GAC5B,MAAMC,EAAmB,GACzB,IAAIC,EAAe,GACfT,GAAU,EACVC,EAAY,GACZS,EAAe,EACfC,EAAa,EAEjB,IAAK,IAAIT,EAAI,EAAGA,EAAIK,EAAaJ,OAAQD,IAAK,CAC1C,MAAME,EAAOG,EAAaL,GAIZ,MAATE,GAAyB,MAATA,GAAyB,MAATA,GAC1B,IAANF,GAAmC,OAAxBK,EAAaL,EAAI,KAExBF,EAGMI,IAASH,IAChBD,GAAU,IAHVA,GAAU,EACVC,EAAYG,IAOP,MAATA,GAAcM,IACL,MAATN,GAAcM,IAGL,MAATN,GAAcO,IACL,MAATP,GAAcO,IAGL,MAATP,GAAiBJ,GAA4B,IAAjBU,GAAqC,IAAfC,EAMtDF,GAAgBL,GALZI,EAAOI,KAAKH,EAAaI,QACzBJ,EAAe,GAKvB,CAOA,OAJIA,EAAaI,QACbL,EAAOI,KAAKH,EAAaI,QAGtBL,CACX,CAiBA,SAASM,EAAQC,GACb,MAAMC,EAAW,GACjB,IAAIC,EAAiB,GACjBC,GAAW,EACXjB,EAAY,GAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAIa,EAAKZ,OAAQD,IAAK,CAClC,MAAME,EAAOW,EAAKb,GAGJ,MAATE,GAAyB,MAATA,GAAwB,IAANF,GAA2B,OAAhBa,EAAKb,EAAI,GASvC,MAATE,GAAiBc,EAIxBD,GAAkBb,GAHlBY,EAASJ,KAAKK,GACdA,EAAiB,IAVZC,EAGMd,IAASH,EAChBiB,GAAW,EAEXD,GAAkBb,GALlBc,GAAW,EACXjB,EAAYG,EAYxB,CAMA,OAJIa,GACAD,EAASJ,KAAKK,GAGXD,EAASG,KAAK,IACzB,CAEOC,eAAeC,EAClBC,EACAC,GAEA,IAAIC,GAAiB,QACfC,UAAUC,EAAgBC,wBAAyBJ,EAAWC,GACpE,IAAII,EAAkClC,EAAEmC,UAAUN,GAC9CO,EAAiD,CAAC,EAClDC,EAzPD,SAA4BC,GAC/B,MAAMC,EAAwB,GAC9B,IAAI/B,EAAI,EAER,KAAOA,EAAI8B,EAAU7B,QAAQ,CAEzB,MAAM+B,EAAWF,EAAUG,QAAQ,SAAUjC,GAC7C,IAAkB,IAAdgC,EAAiB,MAGrB,MAAME,EAAYF,EAAW,EAI7B,IAAIG,EAAaxC,EAAuBmC,EAAWI,GACnD,IAAoB,IAAhBC,EAAmB,CAEnBnC,EAAIkC,EAAY,EAChB,QACJ,CAGA,IAAIE,EAASD,EAAa,EAC1B,GAAIC,EAASN,EAAU7B,QAAgC,MAAtB6B,EAAUM,GAAiB,CAKxD,IAJAA,IAIOA,EAASN,EAAU7B,QAAgC,MAAtB6B,EAAUM,IAC1CA,IAIJ,IAAIC,EAAU,GACd,GACID,EAAS,EAAIN,EAAU7B,QACD,MAAtB6B,EAAUM,IACgB,MAA1BN,EAAUM,EAAS,GACrB,CAEE,MAAME,EAAaR,EAAUG,QAAQ,KAAMG,IACvB,IAAhBE,GACAD,EAAUP,EAAUS,UAAUH,EAAS,EAAGE,GAAY3B,OACtDyB,EAASE,IAGTD,EAAUP,EAAUS,UAAUH,EAAS,GAAGzB,OAC1CyB,EAASN,EAAU7B,OAE3B,CAGA,MAAMI,EAAeyB,EAAUS,UAAUL,EAAWC,GAC9CK,EAAYV,EAAUS,UAAUP,EAAUI,GAG1C9B,EAASF,EAAgBC,GAG3BC,EAAOL,QAAU,EAEjB8B,EAAQrB,KAAK,CACT8B,UAAWA,EACX3B,KAAMvB,EAAyBgB,EAAO,IACtCmC,SAAUnD,EAAyBgB,EAAO,IAC1CoC,SAAUpD,EAAyBgB,EAAO,IAC1CqC,OAAQN,IAEa,IAAlB/B,EAAOL,QAGd8B,EAAQrB,KAAK,CACT8B,UAAWA,EACX3B,KAAMvB,EAAyBgB,EAAO,IACtCmC,SAAUnD,EAAyBgB,EAAO,IAC1CoC,SAAUpD,EAAyBgB,EAAO,IAC1CqC,OAAQN,IAKhBrC,EAAIoC,CACR,MAEIpC,EAAImC,EAAa,CAEzB,CAEA,OAAOJ,CACX,CAgKsBa,CAAmBxB,GACjCyB,GAAoB,EACxB,IAAK,MAAMC,KAAcjB,EAAa,CAClC,IAAI,KAAEhB,EAAI,SAAE6B,EAAQ,OAAEC,GAAWG,EAGjC,GAFAjC,EAAOD,EAAQC,GAEXrB,EAAEuD,IAAI1B,EAAU2B,UAAWnC,GAAO,CAClC,MAAMoC,EAAezD,EAAE0D,IAAI7B,EAAU2B,UAAWnC,GAEhD,GACIrB,EAAEC,SAASiD,IACXA,EAAS/B,OAAOwC,WAAW,MAC3BT,EAAS/B,OAAOyC,SAAS,KAEzB,IACI,MAAMC,EAAcC,KAAKC,MAAMb,GAC3Bc,MAAMC,QAAQJ,IAAgBA,EAAYpD,OAAS,IACnDyC,EAAWW,EAAY,GAE/B,CAAE,MAAOK,GACLC,QAAQD,MAAM,iCAAiC7C,OAAU6C,EAAME,UACnE,CAGJ,GAA4B,iBAAjBX,EAA2B,CAElC,MAAMY,EAAiBC,OAAOpB,GACxBD,EAAWQ,EACjBzD,EAAEuE,IAAI1C,EAAU2B,UAAWnC,EAAMgD,GACjC,MAAMG,EAAarB,EAAS,IAAIA,KAAY,GACtCsB,EAAc,GAAGxB,MAAaoB,KAAkBG,IACtDxE,EAAEuE,IAAIrC,EAAWsB,UAAWnC,EAAMoD,GAClCzE,EAAEuE,IAAInC,EAAwBf,EAAMoD,GACpCpB,GAAoB,EACpBc,QAAQO,KAAK,QAAQrD,UAAagD,MAAmBG,WAC/CzC,UACFC,EAAgB2C,wBAChB9C,EAAU2B,UACVnC,EACA4B,EACAoB,EAER,MAAO,GAAIL,MAAMC,QAAQR,IAAyC,IAAxBA,EAAahD,OAAc,CAEjE,MAAMmE,EACyB,iBAApBnB,EAAa,GACda,OAAOpB,GACPpD,EAAyBoD,GAC7BD,EAAWjD,EAAEmC,UAAUsB,EAAa,IAC1CA,EAAa,GAAKmB,EAClB5E,EAAEuE,IAAI1C,EAAU2B,UAAWnC,EAAMoC,GACjC,MAAMe,EAAarB,EAAS,IAAIA,KAAY,GACtCsB,EAAc,GAAGX,KAAKe,UAAU5B,OAAca,KAAKe,UAAU3B,MAAasB,IAChFxE,EAAEuE,IAAIrC,EAAWsB,UAAWnC,EAAMoD,GAClCzE,EAAEuE,IAAInC,EAAwBf,EAAMoD,GACpCpB,GAAoB,EACpBc,QAAQO,KAAK,QAAQrD,UAAayC,KAAKe,UAAUD,OAAoBJ,WAE/DzC,UACFC,EAAgB2C,wBAChB9C,EAAU2B,UACVnC,EACA4B,EACA2B,EAER,KAAO,CAEH,MAAME,EAAkBhF,EAAyBoD,GAC3CD,EAAWjD,EAAEmC,UAAUsB,GAC7BzD,EAAEuE,IAAI1C,EAAU2B,UAAWnC,EAAMyD,GACjC,MAAMN,EAAarB,EAAS,IAAIA,KAAY,GACtC4B,EAAiBjB,KAAKe,UAAUC,GAChCL,EAAc,GAAGX,KAAKe,UAAU5B,OAAc8B,KAAkBP,IACtExE,EAAEuE,IAAIrC,EAAWsB,UAAWnC,EAAMoD,GAClCzE,EAAEuE,IAAInC,EAAwBf,EAAMoD,GACpCpB,GAAoB,EACpBc,QAAQO,KAAK,QAAQrD,UAAa0D,MAAmBP,WAC/CzC,UACFC,EAAgB2C,wBAChB9C,EAAU2B,UACVnC,EACA4B,EACA6B,EAER,CACJ,KAAO,CACH,MAAML,EAAc,mBAAmBpD,MAAS6B,MAAaC,KAC7DgB,QAAQD,MAAMO,EAClB,CACJ,CAKA,OAHA5C,EAAUmD,aAAe9C,EAAWsB,UACpC3B,EAAUoD,WAAa7C,QACjBL,UAAUC,EAAgBkD,sBAAuBrD,EAAWC,GAC3DuB,GAAqBvB,CAChC,CAEOJ,eAAeyD,IAClB,MAAMC,QAAqBC,mBAC3B,IAAIC,QAA2BC,gBAAgBH,GAC/C,GAAIE,EAAmB7E,OAAS,EAAG,CAC/B,IAAI+E,EAAmBF,EAAmBA,EAAmB7E,OAAS,GACtE,GAA6B,aAAzB+E,EAAiBC,KAAqB,OAC1C,IAAIC,GAA4B,EAC5B9D,EAA0B4D,EAAiBpB,QAG/C,MAAMvC,QApKPH,eAAoCiE,GACvC,OACQA,EAAW,IADV,CAEL,IAAIC,QAAmBL,gBAAgBI,GACvC,GAAIC,EAAWnF,OAAS,EAAG,CACvB,IAAIoB,EAAY+D,EAAW,GAAGC,KAC9B,GAAI7F,EAAEuD,IAAI1B,EAAW,aACjB,OAAOA,CAEf,GACE8D,CACN,CACA,aAAaG,cACjB,CAuJgCC,CAAqBX,EAAe,GAC5D,IAAKpF,EAAEuD,IAAI1B,EAAW,aAElB,YADAsC,QAAQD,MAAM,2BAKlB,IAAIb,GAA6B,EAWjC,IAVAA,EACIA,SAA4B1B,EAAgBC,EAAyBC,WAG/DmE,iBAAiBnE,SAGrBoE,eAAe,CAAEJ,KAAMhE,GAAauD,EAAc,CAAEc,QAAS,UAG9DtE,EAAwBuE,SAAS,eAC7BvE,EAAwBuE,SAAS,4BAElC,GAAIvE,EAAwBuE,SAAS,wBAAyB,CAG1D,MAAM1B,EAAc,2BAEpB7C,EAA0BA,EAAwB1B,QAC9C,uBACAuE,GAGJiB,GAAmB,CACvB,KAAO,CAGH9D,GAA2B,OADP,2BAEpB8D,GAAmB,CACvB,CAIJA,IACAvB,QAAQO,KAAK,6BAEPuB,eAAe,CAAE7B,QAASxC,GAA2BwD,EAAc,CACrEc,QAAS,+BAGrB,CAGJ,CC9aOxE,eAAe0E,IAElB,IAAIC,EAAqC,GACzC,UACWd,iBAAiB,EAAG,CACvBE,KAAM,YACNa,gBAAgB,GAExB,CAAE,MAAOC,GAET,CAIA,GAHKF,IACDA,EAAgB,IAEhBA,EAAc5F,QAAU,EAAG,CAC3B,IAAI+F,QAAkBjB,gBAAgB,EAAG,CACrCe,gBAAgB,IAEpB,KAAIE,GAAaA,EAAU/F,OAAS,GAIhC,YADA0D,QAAQD,MAAM,gBAFdmC,EAAgBG,CAKxB,CACA,IAAIC,EAAWJ,EAAc,GAEzBxE,EAAY4E,EAASC,YAAYD,EAASE,UAE1CC,SAD0BC,uBACgBC,0BAC1CC,QAAsBC,gCACJ,OAAlBD,GACAH,EAAsB1F,KAAK6F,QAEbE,IAAdpF,IACAA,EAAY,CAAEmD,aAAc,CAAC,EAAGkC,sBAAuB,GAAI1D,UAAW,CAAC,EAAGyB,WAAY,CAAC,IAEtFjF,EAAEuD,IAAI1B,EAAW,2BAClBA,EAAUqF,sBAAwB,IAEjCrF,EAAU2B,YACX3B,EAAU2B,UAAY,CAAC,GAG3B,IAAI2D,GAAa,EACjB,IAAK,MAAMC,KAAoBR,EAC3B,IAAI/E,EAAUqF,sBAAsBf,SAASiB,GAA7C,CACAvF,EAAUqF,sBAAsBhG,KAAKkG,GACrC,IAAIC,QAAsBC,mBAAmBF,GAE7C,IAAK,MAAMG,KAASF,EAChB,GAAIE,EAAM1E,SAAS2E,cAAcrB,SAAS,aACtC,IACI,MAAMsB,EAAW3D,KAAKC,MAAM2D,iBAAiBH,EAAMI,UACnD9F,EAAU2B,UAAYxD,EAAE4H,MAAM/F,EAAU2B,UAAWiE,EACvD,CAAE,MAAOlB,GAML,OALApC,QAAQD,MAAM,6CAA6CqC,UAE3DsB,OAAO3D,MAAMqC,EAAEnC,QAAS,2CAA4C,CAChE0D,QAAS,KAGjB,CAGRX,GAAa,CAnB2D,CAqB5E,IAAKA,EACD,OAGJhD,QAAQO,KAAK,8BACPqD,wBAAwBlG,GAE9B,IAAK,IAAIrB,EAAI,EAAGA,EAAIiG,EAASuB,OAAOvH,OAAQD,IAAK,CAC7C,IAAIyH,EAAqBjI,EAAEmC,UAAUN,SAC/BF,EAAgB+F,iBAAiBjB,EAASuB,OAAOxH,IAAKyH,SAGtDhC,eAAe,CAAEJ,KAAMoC,GAAsBxB,EAASyB,WAAY,CACpEhC,QAAS,OACTS,SAAUnG,GAElB,CAEA,MAAM2H,EAAoB,CAEtBC,mBAAoB,IACpBC,WAAW,GAETC,QAAiBzB,sBACnB7G,EAAEuI,QAAQvI,EAAE4H,MAAM,CAAC,EAAGU,EAAUH,GAAoBG,IACpDE,oBAAoBL,EAE5B,CCnGAM,QAAQC,cAAcC,iBAAkBxD,GACxCsD,QAAQC,cAAcE,aAAcxC,GACpCqC,QAAQC,cAAcG,mBAAoBzC,GASnC,MAAMpE,EAAkB,CAC3B2C,wBAAyB,uBACzBO,sBAAuB,4BACvBjD,wBAAyB,+BAoB7B6G,OAAO3D,sBAAwBA,S","sources":["webpack://mag-variable-update/./src/function.ts","webpack://mag-variable-update/./src/variable_init.ts","webpack://mag-variable-update/./src/main.ts"],"sourcesContent":["import { variable_events } from '@/main';\n\nexport function trimQuotesAndBackslashes(str: string): string {\n    if (!_.isString(str)) return str;\n    // Regular expression to match backslashes and quotes (including backticks) at the beginning and end\n    return str.replace(/^[\\\\\"'` ]*(.*?)[\\\\\"'` ]*$/, '$1');\n}\n\n/**\n * 从大字符串中提取所有 .set(${path}, ${new_value});//${reason} 格式的模式\n * 并解析出每个匹配项的路径、新值和原因部分\n */\ninterface SetCommand {\n    fullMatch: string;\n    path: string;\n    oldValue: string;\n    newValue: string;\n    reason: string;\n}\n\n/**\n * 从输入文本中提取所有 _.set() 调用\n *\n * 问题背景：\n * 原本使用正则表达式 /_\\.set\\(([\\s\\S]*?)\\);/ 来匹配，但这种非贪婪匹配会在遇到\n * 嵌套的 ); 时提前结束。例如：\n * _.set('path', [\"text with _.set('inner',null);//comment\"], []);\n * 会在 \"comment\") 处错误地结束匹配\n *\n * 解决方案：\n * 使用状态机方法，通过计数括号配对来准确找到 _.set() 调用的结束位置\n */\nexport function extractSetCommands(inputText: string): SetCommand[] {\n    const results: SetCommand[] = [];\n    let i = 0;\n\n    while (i < inputText.length) {\n        // 步骤1: 查找 _.set( 的起始位置\n        const setStart = inputText.indexOf('_.set(', i);\n        if (setStart === -1) break;\n\n        // 步骤2: 定位开始括号\n        const openParen = setStart + 6; // '_.set(' 的长度\n\n        // 步骤3: 使用括号配对算法找到对应的闭括号\n        // 这个算法会正确处理引号内的括号，避免误匹配\n        let closeParen = findMatchingCloseParen(inputText, openParen);\n        if (closeParen === -1) {\n            // 如果找不到匹配的闭括号，跳过这个位置继续查找\n            i = openParen + 1;\n            continue;\n        }\n\n        // 步骤4: 检查闭括号后是否紧跟分号（_.set()调用的标准格式）\n        let endPos = closeParen + 1;\n        if (endPos < inputText.length && inputText[endPos] === ';') {\n            endPos++;\n\n            // 步骤5: 处理可能的注释部分\n            // 跳过分号后的空格\n            while (endPos < inputText.length && inputText[endPos] === ' ') {\n                endPos++;\n            }\n\n            // 检查是否有 // 注释\n            let comment = '';\n            if (\n                endPos + 1 < inputText.length &&\n                inputText[endPos] === '/' &&\n                inputText[endPos + 1] === '/'\n            ) {\n                // 找到注释的结束位置（换行符或文本结束）\n                const commentEnd = inputText.indexOf('\\n', endPos);\n                if (commentEnd !== -1) {\n                    comment = inputText.substring(endPos + 2, commentEnd).trim();\n                    endPos = commentEnd;\n                } else {\n                    // 注释延续到文本结尾\n                    comment = inputText.substring(endPos + 2).trim();\n                    endPos = inputText.length;\n                }\n            }\n\n            // 步骤6: 提取参数并解析\n            const paramsString = inputText.substring(openParen, closeParen);\n            const fullMatch = inputText.substring(setStart, endPos);\n\n            // 使用 parseParameters 解析参数，它能正确处理嵌套的数组、对象和引号\n            const params = parseParameters(paramsString);\n\n            // 步骤7: 根据参数数量构建结果\n            if (params.length >= 3) {\n                // 标准格式：_.set(path, oldValue, newValue)\n                results.push({\n                    fullMatch: fullMatch,\n                    path: trimQuotesAndBackslashes(params[0]),\n                    oldValue: trimQuotesAndBackslashes(params[1]),\n                    newValue: trimQuotesAndBackslashes(params[2]),\n                    reason: comment,\n                });\n            } else if (params.length === 2) {\n                // 简化格式：_.set(path, value)\n                // 在这种情况下，oldValue 和 newValue 都设为相同的值\n                results.push({\n                    fullMatch: fullMatch,\n                    path: trimQuotesAndBackslashes(params[0]),\n                    oldValue: trimQuotesAndBackslashes(params[1]),\n                    newValue: trimQuotesAndBackslashes(params[1]),\n                    reason: comment,\n                });\n            }\n\n            // 更新搜索位置，继续查找下一个 _.set() 调用\n            i = endPos;\n        } else {\n            // 如果没有分号，跳过这个位置\n            i = closeParen + 1;\n        }\n    }\n\n    return results;\n}\n\n/**\n * 辅助函数：找到匹配的闭括号\n *\n * 算法说明：\n * 1. 使用括号计数器，遇到 ( 加1，遇到 ) 减1\n * 2. 当计数器归零时，找到了匹配的闭括号\n * 3. 重要：忽略引号内的括号，避免字符串内容干扰匹配\n *\n * @param str 要搜索的字符串\n * @param startPos 开始括号的位置\n * @returns 匹配的闭括号位置，如果找不到返回 -1\n */\nfunction findMatchingCloseParen(str: string, startPos: number): number {\n    let parenCount = 1; // 从1开始，因为已经有一个开括号\n    let inQuote = false;\n    let quoteChar = '';\n\n    for (let i = startPos; i < str.length; i++) {\n        const char = str[i];\n        const prevChar = i > 0 ? str[i - 1] : '';\n\n        // 处理引号状态\n        // 支持三种引号：双引号、单引号和反引号（模板字符串）\n        // 注意：需要检查前一个字符不是反斜杠，以正确处理转义的引号\n        if ((char === '\"' || char === \"'\" || char === '`') && prevChar !== '\\\\') {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        // 只在不在引号内时计算括号\n        // 这确保了像 \"text with )\" 这样的字符串不会影响括号匹配\n        if (!inQuote) {\n            if (char === '(') {\n                parenCount++;\n            } else if (char === ')') {\n                parenCount--;\n                if (parenCount === 0) {\n                    return i;\n                }\n            }\n        }\n    }\n\n    return -1; // 没有找到匹配的闭括号\n}\n\n// 解析参数字符串，处理嵌套结构\nexport function parseParameters(paramsString: string): string[] {\n    const params: string[] = [];\n    let currentParam = '';\n    let inQuote = false;\n    let quoteChar = '';\n    let bracketCount = 0;\n    let braceCount = 0;\n\n    for (let i = 0; i < paramsString.length; i++) {\n        const char = paramsString[i];\n\n        // 处理引号（包括反引号）\n        if (\n            (char === '\"' || char === \"'\" || char === '`') &&\n            (i === 0 || paramsString[i - 1] !== '\\\\')\n        ) {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        // 处理方括号 (数组)\n        if (char === '[') bracketCount++;\n        if (char === ']') bracketCount--;\n\n        // 处理花括号 (对象)\n        if (char === '{') braceCount++;\n        if (char === '}') braceCount--;\n\n        // 处理参数分隔符\n        if (char === ',' && !inQuote && bracketCount === 0 && braceCount === 0) {\n            params.push(currentParam.trim());\n            currentParam = '';\n            continue;\n        }\n\n        currentParam += char;\n    }\n\n    // 添加最后一个参数\n    if (currentParam.trim()) {\n        params.push(currentParam.trim());\n    }\n\n    return params;\n}\n\nexport async function getLastValidVariable(startNum: number): Promise<Record<string, any>> {\n    for (;;) {\n        if (startNum < 0) break;\n        var currentMsg = await getChatMessages(startNum);\n        if (currentMsg.length > 0) {\n            var variables = currentMsg[0].data;\n            if (_.has(variables, 'stat_data')) {\n                return variables;\n            }\n        }\n        --startNum;\n    }\n    return await getVariables();\n}\n\nfunction pathFix(path: string): string {\n    const segments = [];\n    let currentSegment = '';\n    let inQuotes = false;\n    let quoteChar = '';\n\n    for (let i = 0; i < path.length; i++) {\n        const char = path[i];\n\n        // Handle quotes\n        if ((char === '\"' || char === \"'\") && (i === 0 || path[i - 1] !== '\\\\')) {\n            if (!inQuotes) {\n                inQuotes = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuotes = false;\n            } else {\n                currentSegment += char;\n            }\n        } else if (char === '.' && !inQuotes) {\n            segments.push(currentSegment);\n            currentSegment = '';\n        } else {\n            currentSegment += char;\n        }\n    }\n\n    if (currentSegment) {\n        segments.push(currentSegment);\n    }\n\n    return segments.join('.');\n}\n\nexport async function updateVariables(\n    current_message_content: string,\n    variables: any\n): Promise<boolean> {\n    var out_is_modifed = false;\n    await eventEmit(variable_events.VARIABLE_UPDATE_STARTED, variables, out_is_modifed);\n    var out_status: Record<string, any> = _.cloneDeep(variables);\n    var delta_status: Record<string, any> = { stat_data: {} };\n    var matched_set = extractSetCommands(current_message_content);\n    var variable_modified = false;\n    for (const setCommand of matched_set) {\n        var { path, newValue, reason } = setCommand;\n        path = pathFix(path);\n\n        if (_.has(variables.stat_data, path)) {\n            const currentValue = _.get(variables.stat_data, path);\n            //有时候llm会返回整个数组，处理它\n            if (\n                _.isString(newValue) &&\n                newValue.trim().startsWith('[') &&\n                newValue.trim().endsWith(']')\n            ) {\n                try {\n                    const parsedArray = JSON.parse(newValue);\n                    if (Array.isArray(parsedArray) && parsedArray.length > 0) {\n                        newValue = parsedArray[0];\n                    }\n                } catch (error: any) {\n                    console.error(`Error parsing JSON array for '${path}': ${error.message}`);\n                }\n            }\n            // Check the type of the current value\n            if (typeof currentValue === 'number') {\n                // If the current value is a number, convert the new value to a number\n                const newValueNumber = Number(newValue);\n                const oldValue = currentValue;\n                _.set(variables.stat_data, path, newValueNumber);\n                const reason_str = reason ? `(${reason})` : '';\n                const display_str = `${oldValue}->${newValueNumber} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(`Set '${path}' to '${newValueNumber}' ${reason_str}`);\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    newValueNumber\n                );\n            } else if (Array.isArray(currentValue) && currentValue.length === 2) {\n                // If the current value is of type ValueWithDescription<T>\n                const newValueParsed =\n                    typeof currentValue[0] === 'number'\n                        ? Number(newValue)\n                        : trimQuotesAndBackslashes(newValue);\n                const oldValue = _.cloneDeep(currentValue[0]);\n                currentValue[0] = newValueParsed;\n                _.set(variables.stat_data, path, currentValue);\n                const reason_str = reason ? `(${reason})` : '';\n                const display_str = `${JSON.stringify(oldValue)}->${JSON.stringify(newValue)} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(`Set '${path}' to '${JSON.stringify(newValueParsed)}' ${reason_str}`);\n                // Call the onVariableUpdated function after updating the variable\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    newValueParsed\n                );\n            } else {\n                // Otherwise, set the new value directly\n                const trimmedNewValue = trimQuotesAndBackslashes(newValue);\n                const oldValue = _.cloneDeep(currentValue);\n                _.set(variables.stat_data, path, trimmedNewValue);\n                const reason_str = reason ? `(${reason})` : '';\n                const stringNewValue = JSON.stringify(trimmedNewValue);\n                const display_str = `${JSON.stringify(oldValue)}->${stringNewValue} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(`Set '${path}' to '${stringNewValue}' ${reason_str}`);\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    trimmedNewValue\n                );\n            }\n        } else {\n            const display_str = `undefined Path: ${path}->${newValue} (${reason})`;\n            console.error(display_str);\n        }\n    }\n\n    variables.display_data = out_status.stat_data;\n    variables.delta_data = delta_status.stat_data;\n    await eventEmit(variable_events.VARIABLE_UPDATE_ENDED, variables, out_is_modifed);\n    return variable_modified || out_is_modifed;\n}\n\nexport async function handleResponseMessage() {\n    const last_message = await getLastMessageId();\n    var last_chat_msg_list = await getChatMessages(last_message);\n    if (last_chat_msg_list.length > 0) {\n        var current_chat_msg = last_chat_msg_list[last_chat_msg_list.length - 1];\n        if (current_chat_msg.role != 'assistant') return;\n        var content_modified: boolean = false;\n        var current_message_content = current_chat_msg.message;\n\n        //更新变量状态，从最后一条之前的取，local优先级最低\n        const variables = await getLastValidVariable(last_message - 1);\n        if (!_.has(variables, 'stat_data')) {\n            console.error('cannot found stat_data.');\n            return;\n        }\n\n        // 使用正则解析 _.set(${path}, ${newvalue});//${reason} 格式的部分，并遍历结果\n        var variable_modified: boolean = false;\n        variable_modified =\n            variable_modified || (await updateVariables(current_message_content, variables));\n        if (variable_modified) {\n            //更新到当前聊天\n            await replaceVariables(variables);\n        }\n        //@ts-ignore\n        await setChatMessage({ data: variables }, last_message, { refresh: 'none' });\n\n        //如果是ai人物，则不插入\n        if (!current_message_content.includes('<CharView')) {\n            if (!current_message_content.includes('<StatusPlaceHolderImpl/>')) {\n                //替换状态为实际的显示内容\n                if (current_message_content.includes('<StatusPlaceHolder/>')) {\n                    //const display_str = \"```\\n\" + YAML.stringify(out_status.stat_data, 2) + \"```\\n\";\n                    //保证在输出完成后，才会渲染。\n                    const display_str = '<StatusPlaceHolderImpl/>'; //status_entry.content;\n                    //const display_str = \"```\\n\" + vanilla_str + \"```\\n\";\n                    current_message_content = current_message_content.replace(\n                        '<StatusPlaceHolder/>',\n                        display_str\n                    );\n\n                    content_modified = true;\n                } else {\n                    //如果没有，则固定插入到文本尾部\n                    const display_str = '<StatusPlaceHolderImpl/>'; //status_entry.content;\n                    current_message_content += '\\n\\n' + display_str;\n                    content_modified = true;\n                }\n            }\n        }\n\n        if (content_modified) {\n            console.info(`Replace content....`);\n            //@ts-ignore\n            await setChatMessage({ message: current_message_content }, last_message, {\n                refresh: 'display_and_render_current',\n            });\n        }\n    }\n\n    //eventRemoveListener(tavern_events.GENERATION_ENDED, hello);\n}\n","// 整体游戏数据类型\nimport { updateVariables } from '@/function';\nimport { GameData } from '@/main';\n\ntype LorebookEntry = {\n    content: string;\n    comment?: string;\n};\n\nexport async function initCheck() {\n    //generation_started 的最新一条是正在生成的那条。\n    var last_chat_msg: ChatMessageSwiped[] = [];\n    try {\n        (await getChatMessages(-2, {\n            role: 'assistant',\n            include_swipes: true,\n        })) as ChatMessageSwiped[];\n    } catch (e) {\n        //在第一行时，必定发生异常。\n    }\n    if (!last_chat_msg) {\n        last_chat_msg = [];\n    }\n    if (last_chat_msg.length <= 0) {\n        var first_msg = await getChatMessages(0, {\n            include_swipes: true,\n        });\n        if (first_msg && first_msg.length > 0) {\n            last_chat_msg = first_msg;\n        } else {\n            console.error('不存在任何一条消息，退出');\n            return;\n        }\n    }\n    var last_msg = last_chat_msg[0];\n    //检查最近一条消息的当前swipe\n    var variables = last_msg.swipes_data[last_msg.swipe_id] as GameData & Record<string, any>;\n    var lorebook_settings = await getLorebookSettings();\n    var enabled_lorebook_list = lorebook_settings.selected_global_lorebooks;\n    var char_lorebook = await getCurrentCharPrimaryLorebook();\n    if (char_lorebook !== null) {\n        enabled_lorebook_list.push(char_lorebook);\n    }\n    if (variables === undefined) {\n        variables = { display_data: {}, initialized_lorebooks: [], stat_data: {}, delta_data: {} };\n    }\n    if (!_.has(variables, 'initialized_lorebooks')) {\n        variables.initialized_lorebooks = [];\n    }\n    if (!variables.stat_data) {\n        variables.stat_data = {};\n    }\n\n    var is_updated = false;\n    for (const current_lorebook of enabled_lorebook_list) {\n        if (variables.initialized_lorebooks.includes(current_lorebook)) continue;\n        variables.initialized_lorebooks.push(current_lorebook);\n        var init_entries = (await getLorebookEntries(current_lorebook)) as LorebookEntry[];\n\n        for (const entry of init_entries) {\n            if (entry.comment?.toLowerCase().includes('[initvar]')) {\n                try {\n                    const jsonData = JSON.parse(substitudeMacros(entry.content));\n                    variables.stat_data = _.merge(variables.stat_data, jsonData);\n                } catch (e) {\n                    console.error(`Failed to parse JSON from lorebook entry: ${e}`);\n                    // @ts-ignore\n                    toastr.error(e.message, 'Failed to parse JSON from lorebook entry', {\n                        timeOut: 5000,\n                    });\n                    return;\n                }\n            }\n        }\n        is_updated = true;\n    }\n    if (!is_updated) {\n        return;\n    }\n\n    console.info(`Init chat variables.`);\n    await insertOrAssignVariables(variables);\n\n    for (var i = 0; i < last_msg.swipes.length; i++) {\n        var current_swipe_data = _.cloneDeep(variables);\n        await updateVariables(substitudeMacros(last_msg.swipes[i]), current_swipe_data);\n        //新版本这个接口给deprecated了，但是新版本的接口不好用，先这样\n        //@ts-ignore\n        await setChatMessage({ data: current_swipe_data }, last_msg.message_id, {\n            refresh: 'none',\n            swipe_id: i,\n        });\n    }\n\n    const expected_settings = {\n        /*预期设置*/\n        context_percentage: 100,\n        recursive: true,\n    };\n    const settings = await getLorebookSettings();\n    if (_.isEqual(_.merge({}, settings, expected_settings), settings)) {\n        setLorebookSettings(expected_settings);\n    }\n}\n\n//window.initCheck = initCheck;\n","// src/index.ts\nimport { handleResponseMessage } from '@/function';\nimport { initCheck } from '@/variable_init';\n\neventOn(tavern_events.GENERATION_ENDED, handleResponseMessage);\neventOn(tavern_events.MESSAGE_SENT, initCheck);\neventOn(tavern_events.GENERATION_STARTED, initCheck);\n\nexport type GameData = {\n    initialized_lorebooks: string[];\n    stat_data: Record<string, any>;\n    display_data: Record<string, any>;\n    delta_data: Record<string, any>;\n};\n\nexport const variable_events = {\n    SINGLE_VARIABLE_UPDATED: 'mag_variable_updated',\n    VARIABLE_UPDATE_ENDED: 'mag_variable_update_ended',\n    VARIABLE_UPDATE_STARTED: 'mag_variable_update_started',\n} as const;\n\n// @ts-ignore\nexport type ExtendedListenerType = {\n    [variable_events.SINGLE_VARIABLE_UPDATED]: (\n        stat_data: Record<string, any>,\n        path: string,\n        _oldValue: any,\n        _newValue: any\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_STARTED]: (\n        variables: GameData,\n        out_is_updated: boolean\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_ENDED]: (variables: GameData, out_is_updated: boolean) => void;\n};\n\n// 导出到窗口，便于调试\n// @ts-ignore\nwindow.handleResponseMessage = handleResponseMessage;\n"],"names":["trimQuotesAndBackslashes","str","_","isString","replace","findMatchingCloseParen","startPos","parenCount","inQuote","quoteChar","i","length","char","prevChar","parseParameters","paramsString","params","currentParam","bracketCount","braceCount","push","trim","pathFix","path","segments","currentSegment","inQuotes","join","async","updateVariables","current_message_content","variables","out_is_modifed","eventEmit","variable_events","VARIABLE_UPDATE_STARTED","out_status","cloneDeep","delta_status","matched_set","inputText","results","setStart","indexOf","openParen","closeParen","endPos","comment","commentEnd","substring","fullMatch","oldValue","newValue","reason","extractSetCommands","variable_modified","setCommand","has","stat_data","currentValue","get","startsWith","endsWith","parsedArray","JSON","parse","Array","isArray","error","console","message","newValueNumber","Number","set","reason_str","display_str","info","SINGLE_VARIABLE_UPDATED","newValueParsed","stringify","trimmedNewValue","stringNewValue","display_data","delta_data","VARIABLE_UPDATE_ENDED","handleResponseMessage","last_message","getLastMessageId","last_chat_msg_list","getChatMessages","current_chat_msg","role","content_modified","startNum","currentMsg","data","getVariables","getLastValidVariable","replaceVariables","setChatMessage","refresh","includes","initCheck","last_chat_msg","include_swipes","e","first_msg","last_msg","swipes_data","swipe_id","enabled_lorebook_list","getLorebookSettings","selected_global_lorebooks","char_lorebook","getCurrentCharPrimaryLorebook","undefined","initialized_lorebooks","is_updated","current_lorebook","init_entries","getLorebookEntries","entry","toLowerCase","jsonData","substitudeMacros","content","merge","toastr","timeOut","insertOrAssignVariables","swipes","current_swipe_data","message_id","expected_settings","context_percentage","recursive","settings","isEqual","setLorebookSettings","eventOn","tavern_events","GENERATION_ENDED","MESSAGE_SENT","GENERATION_STARTED","window"],"sourceRoot":""}