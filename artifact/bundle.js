import{klona as e}from'https://testingcf.jsdelivr.net/npm/klona/+esm';import{createPinia as t,defineStore as a}from'https://testingcf.jsdelivr.net/npm/pinia/+esm';import*as n from'https://testingcf.jsdelivr.net/npm/mathjs/+esm';import{default as s}from'https://testingcf.jsdelivr.net/npm/json5/+esm';import{default as i}from'https://testingcf.jsdelivr.net/npm/toml/+esm';import{compare as r}from'https://testingcf.jsdelivr.net/npm/compare-versions/+esm';function o(e,t){}function l(e){return Array.isArray(e)&&2===e.length&&'string'==typeof e[1]}function c(e){return'array'===e.type}function d(e){return'object'===e.type}const u={SINGLE_VARIABLE_UPDATED:'mag_variable_updated',VARIABLE_UPDATE_ENDED:'mag_variable_update_ended',VARIABLE_UPDATE_STARTED:'mag_variable_update_started',COMMAND_PARSED:'mag_command_parsed'},m='mag_invoke_mvu',p='mag_update_variable';const f='$__META_EXTENSIBLE__$';function g(e,t,a=!1){if(Array.isArray(e)){let n,s,i=!1,r=a;t&&(c(t)?(i=!0===t.extensible,r=!0===t.recursiveExtensible||a,n=t.elementType,s=t.template):console.error(`Type mismatch: expected array schema but got ${t.type} at path`));const o=e.findIndex(e=>_.isObject(e)&&!_.isDate(e)&&'$arrayMeta'in e&&'$meta'in e&&!0===e.$arrayMeta);if(-1!==o){const t=e[o];void 0!==t.$meta.extensible&&(i=t.$meta.extensible),void 0!==t.$meta.template&&(s=t.$meta.template),e.splice(o,1),console.log('Array metadata element found and processed.')}const l=e.indexOf(f);l>-1&&(i=!0,e.splice(l,1),console.log('Extensible marker found and removed from an array.'));const d={type:'array',extensible:i||a,recursiveExtensible:r,elementType:e.length>0?g(e[0],n,r):{type:'any'}};return void 0!==s&&(d.template=s),d}if(_.isObject(e)&&!_.isDate(e)){const n=e;let s,i=!1,r=a;t&&(d(t)?(i=!0===t.extensible,r=!0===t.recursiveExtensible||a,s=t.properties):console.error(`Type mismatch: expected object schema but got ${t.type} at path`));const o={type:'object',properties:{},extensible:i||!0===n.$meta?.extensible||!0===n.$meta?.recursiveExtensible||a,recursiveExtensible:r||!0===n.$meta?.recursiveExtensible};void 0!==n.$meta?.template?o.template=n.$meta.template:t&&d(t)&&t.template&&(o.template=t.template);const l=n.$meta;n.$meta&&delete n.$meta;for(const t in e){const e=s?.[t],a=!1!==o.extensible&&o.recursiveExtensible,i=g(n[t],e,a);let r=!o.extensible;Array.isArray(l?.required)&&l.required.includes(t)&&(r=!0),!1===e?.required?r=!1:!0===e?.required&&(r=!0),o.properties[t]={...i,required:r}}return o}const n=typeof e;return'string'===n||'number'===n||'boolean'===n?{type:n}:{type:'any'}}function h(e,t){if(!t||!e)return e||null;const a=_.toPath(t);let n=e;for(const e of a){if(!n)return null;if(/^\d+$/.test(e)){if(!c(n))return null;n=n.elementType}else{if(!d(n)||!n.properties[e])return null;n=n.properties[e]}}return n}function v(t){console.log('Reconciling schema with current data state...');const a=g(e(t.stat_data),t.schema);if(!d(a))return void console.error('Generated schema is not an object schema, which is unexpected for stat_data root');const n=a;void 0!==t.schema?.strictTemplate&&(n.strictTemplate=t.schema.strictTemplate),void 0!==t.schema?.strictSet&&(n.strictSet=t.schema.strictSet),void 0!==t.schema?.concatTemplateArray&&(n.concatTemplateArray=t.schema.concatTemplateArray),_.has(t.stat_data,'$meta.strictTemplate')&&(n.strictTemplate=t.stat_data.$meta?.strictTemplate),_.has(t.stat_data,'$meta.strictSet')&&(n.strictSet=t.stat_data.$meta?.strictSet),_.has(t.stat_data,'$meta.concatTemplateArray')&&(n.concatTemplateArray=t.stat_data.$meta?.concatTemplateArray),t.schema=n,console.log('Schema reconciliation complete.')}function y(e){if(Array.isArray(e)){let t=e.length;for(;t--;)e[t]===f||_.isObject(e[t])&&!_.isDate(e[t])&&'$arrayMeta'in e[t]&&'$meta'in e[t]&&!0===e[t].$arrayMeta?e.splice(t,1):y(e[t])}else if(t=e,_.isObject(t)&&!_.isDate(t)){delete e.$meta;for(const t in e)y(e[t])}var t}const b=Vue,E=z,S=E.object({更新方式:E.enum(['随AI输出','额外模型解析']).default('随AI输出'),额外模型解析配置:E.object({发送预设:E.boolean().default(!0),使用函数调用:E.boolean().default(!1),模型来源:E.enum(['与插头相同','自定义']).default('与插头相同'),api地址:E.string().default('http://localhost:1234/v1'),密钥:E.string().default(''),模型名称:E.string().default('gemini-2.5-flash')}).prefault({}),通知:E.object({变量更新出错:E.boolean().default(!1),额外模型解析中:E.boolean().default(!0)}).prefault({}),快照保留间隔:E.number().default(50),auto_cleanup:E.object({启用:E.boolean().default(!1),要保留变量的最近楼层数:E.number().default(20),触发恢复变量的最近楼层数:E.number().default(10)}).prefault({}),internal:E.object({已提醒更新了配置界面:E.boolean().default(!1),已提醒自动清理旧变量功能:E.boolean().default(!1)}).prefault({})}).prefault({}),V=a('settings',()=>{const e=(0,b.ref)(S.parse(_.get(SillyTavern.extensionSettings,'mvu_settings',{})));return(0,b.watch)(e,e=>{_.set(SillyTavern.extensionSettings,'mvu_settings',(0,b.toRaw)(e)),SillyTavern.saveSettingsDebounced()},{deep:!0}),{settings:e}});let A='1.0.0';function w(){return A}function T(){return!!SillyTavern.ToolManager.isToolCallingSupported()&&!1!==SillyTavern.chatCompletionSettings.function_calling}const M='undefined'!=typeof jest||'undefined'!=typeof process&&!1,N=_.debounce(SillyTavern.saveChat,1e3);function x(e){return _(SillyTavern.chat).slice(0,e).findLastIndex(e=>void 0!==_.get(e,['variables',e.swipe_id??0,'stat_data'])&&void 0!==_.get(e,['variables',e.swipe_id??0,'schema']))}const I=n;function O(e){return _.isString(e)?e.replace(/^[\\"'` ]*(.*?)[\\"'` ]*$/,'$1'):e}function U(e,t,a=!1,n=!0){if(!t)return e;const s=_.isObject(e)&&!Array.isArray(e)&&!_.isDate(e),i=Array.isArray(e),r=Array.isArray(t);return s&&!r?_.merge({},t,e):i&&r?n?_.concat(e,t):_.merge([],t,e):(s||i)&&r!==i||!s&&!i&&_.isObject(t)&&!Array.isArray(t)?(console.error(`Template type mismatch: template is ${r?'array':'object'}, but value is ${i?'array':'object'}. Skipping template merge.`),e):s||i||!r||a?e:n?_.concat([e],t):_.merge([],t,[e])}function k(e){if('string'!=typeof e)return e;const t=e.trim();if('true'===t)return!0;if('false'===t)return!1;if('null'===t)return null;if('undefined'!==t){try{return JSON.parse(t)}catch(e){if(t.startsWith('{')&&t.endsWith('}')||t.startsWith('[')&&t.endsWith(']'))try{const e=new Function(`return ${t};`)();if(_.isObject(e)||Array.isArray(e))return e}catch(e){}}try{const e={Math,math:I},a=I.evaluate(t,e);if(I.isComplex(a)||I.isMatrix(a))return a.toString();if(void 0===a&&!/^[a-zA-Z_]+$/.test(t))return t;if(void 0!==a)return parseFloat(a.toPrecision(12))}catch(e){}try{return YAML.parse(t)}catch(e){}return O(e)}}function C(e,t){let a=1,n=!1,s='';for(let i=t;i<e.length;i++){const t=e[i],r=i>0?e[i-1]:'';if('"'!==t&&'\''!==t&&'`'!==t||'\\'===r||(n?t===s&&(n=!1):(n=!0,s=t)),!n)if('('===t)a++;else if(')'===t&&(a--,0===a))return i}return-1}function D(e){const t=[];let a='',n=!1,s='',i=0,r=0,o=0;for(let l=0;l<e.length;l++){const c=e[l];'"'!==c&&'\''!==c&&'`'!==c||0!==l&&'\\'===e[l-1]||(n?c===s&&(n=!1):(n=!0,s=c)),n||('('===c&&o++,')'===c&&o--,'['===c&&i++,']'===c&&i--,'{'===c&&r++,'}'===c&&r--),','!==c||n||0!==o||0!==i||0!==r?a+=c:(t.push(a.trim()),a='')}return a.trim()&&t.push(a.trim()),t}async function j(t){return e(_(SillyTavern.chat).slice(0,t+1).map(e=>_.get(e,['variables',e.swipe_id??0])).findLast(e=>_.has(e,'stat_data')))??getVariables()}function P(e){const t=[];let a='',n=!1,s='';for(let i=0;i<e.length;i++){const r=e[i];'"'!==r&&'\''!==r||0!==i&&'\\'===e[i-1]?'.'!==r||n?a+=r:(t.push(a),a=''):n?r===s?n=!1:a+=r:(n=!0,s=r)}return a&&t.push(a),t.join('.')}async function L(t,a,n,s='',i=!1){const r=t.$internal?.display_data,o=t.$internal?.delta_data;if(_.has(t,a)){const l=_.get(t,a);if(Array.isArray(l)&&2===l.length){const c=e(l[0]);l[0]=n,_.set(t,a,l);const d=s?`(${s})`:'',m=`${O(JSON.stringify(c))}->${O(JSON.stringify(n))} ${d}`;return r&&_.set(r,a,m),o&&_.set(o,a,m),console.info(`Set '${a}' to '${O(JSON.stringify(n))}' ${d}`),i&&await eventEmit(u.SINGLE_VARIABLE_UPDATED,t,a,c,n),!0}{const c=e(l);_.set(t,a,n);const d=s?`(${s})`:'',m=O(JSON.stringify(n)),p=`${O(JSON.stringify(c))}->${m} ${d}`;return r&&_.set(r,a,p),o&&_.set(o,a,p),console.info(`Set '${a}' to '${m}' ${d}`),i&&await eventEmit(u.SINGLE_VARIABLE_UPDATED,t,a,c,n),!0}}return!1}async function R(t,a){const n=e(a),s={stat_data:{}},i=function(e){const t=[];let a=0;for(;a<e.length;){const n=e.substring(a).match(/_\.(set|insert|assign|remove|unset|delete|add)\(/);if(!n||void 0===n.index)break;const s=n[1],i=a+n.index,r=i+n[0].length,o=C(e,r);if(-1===o){a=r;continue}let l=o+1;if(l>=e.length||';'!==e[l]){a=o+1;continue}l++;let c='';const d=e.substring(l).match(/^\s*\/\/(.*)/);d&&(c=d[1].trim(),l+=d[0].length);const u=e.substring(i,l),m=D(e.substring(r,o));let p=!1;('set'===s&&m.length>=2||'assign'===s&&m.length>=2||'insert'===s&&m.length>=2||'remove'===s&&m.length>=1||'unset'===s&&m.length>=1||'delete'===s&&m.length>=1||'add'===s&&2===m.length)&&(p=!0),p&&t.push({type:s,full_match:u,args:m,reason:c}),a=l}return t}(substitudeMacros(t));_.set(a.stat_data,'$internal',{display_data:n.stat_data,delta_data:s.stat_data||{}}),await eventEmit(u.VARIABLE_UPDATE_STARTED,a);let r,m,p=!1;const f=function(e){console.warn(e),r={error_last:e,error_command:m}},b=a.schema,E=b?.strictTemplate??!1,S=b?.concatTemplateArray??!0,A=b?.strictSet??!1;for(const e of i)'remove'===e.type?e.type='delete':'assign'===e.type?e.type='insert':'unset'===e.type&&(e.type='delete');await eventEmit(u.COMMAND_PARSED,a,i);for(const t of i){const i=P(O(t.args[0])),r=t.reason?`(${t.reason})`:'';let v='';switch(m=t,t.type){case'set':{if(!_.has(a.stat_data,i)){f(`Path '${i}' does not exist in stat_data, skipping set command ${r}`);continue}let n=_.get(a.stat_data,i);let s=k(t.args.length>=3?t.args[2]:t.args[1]);s instanceof Date&&(s=s.toISOString());let c=!1;if(A||!Array.isArray(n)||2!==n.length||'string'!=typeof n[1]||Array.isArray(n[0]))'number'==typeof n&&null!==s?_.set(a.stat_data,i,Number(s)):_.set(a.stat_data,i,s);else{const t=e(n[0]);n[0]='number'==typeof n[0]&&null!==s?Number(s):s,n=t,c=!0}let d=_.get(a.stat_data,i);o(),c&&(d=d[0]);v=!A&&l(n)&&Array.isArray(d)?`${O(JSON.stringify(n[0]))}->${O(JSON.stringify(d[0]))} ${r}`:`${O(JSON.stringify(n))}->${O(JSON.stringify(d))} ${r}`,p=!0,console.info(`Set '${i}' to '${JSON.stringify(d)}' ${r}`),await eventEmit(u.SINGLE_VARIABLE_UPDATED,a.stat_data,i,n,d);break}case'insert':case'assign':{const n=i,s=''===n?a.stat_data:_.get(a.stat_data,n),o=h(b,n);if(null!==s&&!Array.isArray(s)&&!_.isObject(s)){f(`Cannot assign into path '${n}' because it holds a primitive value (${typeof s}). Operation skipped. ${r}`);continue}if(o){if('object'===o.type&&!1===o.extensible){if(2===t.args.length){f(`SCHEMA VIOLATION: Cannot merge data into non-extensible object at path '${n}'. ${r}`);continue}if(t.args.length>=3){const e=String(k(t.args[1]));if(!_.has(o.properties,e)){f(`SCHEMA VIOLATION: Cannot assign new key '${e}' into non-extensible object at path '${n}'. ${r}`);continue}}}else if('array'===o.type&&(!1===o.extensible||void 0===o.extensible)){f(`SCHEMA VIOLATION: Cannot assign elements into non-extensible array at path '${n}'. ${r}`);continue}}else if(''!==n&&!_.get(a.stat_data,_.toPath(n).slice(0,-1).join('.'))){f(`Cannot assign into non-existent path '${n}' without an extensible parent. ${r}`);continue}const l=e(_.get(a.stat_data,i));let m=!1;if(2===t.args.length){let e=k(t.args[1]);e instanceof Date?e=e.toISOString():Array.isArray(e)&&(e=e.map(e=>e instanceof Date?e.toISOString():e));let s=''===n?a.stat_data:_.get(a.stat_data,i);if(Array.isArray(s)||_.isObject(s)||(s=Array.isArray(e)?[]:{},_.set(a.stat_data,i,s)),Array.isArray(s)){e=U(e,o&&c(o)?o.template:void 0,E,S),s.push(e),v=`ASSIGNED ${JSON.stringify(e)} into array '${i}' ${r}`,m=!0}else if(_.isObject(s)){if(!_.isObject(e)||Array.isArray(e)){f(`Cannot merge ${Array.isArray(e)?'array':'non-object'} into object at '${i}'`);continue}_.merge(s,e),v=`MERGED object ${JSON.stringify(e)} into object '${i}' ${r}`,m=!0}}else if(t.args.length>=3){let e=k(t.args[2]);const s=k(t.args[1]);e instanceof Date?e=e.toISOString():Array.isArray(e)&&(e=e.map(e=>e instanceof Date?e.toISOString():e));let l=''===n?a.stat_data:_.get(a.stat_data,i);const u=o&&(c(o)||d(o))?o.template:void 0;Array.isArray(l)&&'number'==typeof s?(e=U(e,u,E,S),l.splice(s,0,e),v=`ASSIGNED ${JSON.stringify(e)} into '${i}' at index ${s} ${r}`,m=!0):_.isObject(l)?(e=U(e,u,E,S),l[String(s)]=e,v=`ASSIGNED key '${s}' with value ${JSON.stringify(e)} into object '${i}' ${r}`,m=!0):(l={},_.set(a.stat_data,i,l),e=U(e,u,E,S),l[String(s)]=e,v=`CREATED object at '${i}' and ASSIGNED key '${s}' ${r}`,m=!0)}if(!m){f(`Invalid arguments for _.assign on path '${i}'`);continue}{const t=_.get(a.stat_data,i);p=!0,console.info(v),await eventEmit(u.SINGLE_VARIABLE_UPDATED,a.stat_data,i,l,t);try{const a=g(e(t),o);_.merge(o,a),y(t)}catch(e){e instanceof Error?f(`Failed to resolve template meta at '${i}', '${e.message}'`):f(`Failed to resolve template meta at '${i}', '${e}'`)}}break}case'unset':case'delete':case'remove':{if(!_.has(a.stat_data,i)){f(`undefined Path: ${i} in _.remove command`);continue}let n,s=i;if(t.args.length>1)n=k(t.args[1]),'string'==typeof n&&(n=O(n));else{const e=_.toPath(i),t=e.pop();t&&(n=/^\d+$/.test(t)?Number(t):t,s=e.join('.'))}if(void 0===n){f(`Could not determine target for deletion for command on path '${i}' ${r}`);continue}if(''!==s&&!_.has(a.stat_data,s)){f(`Cannot remove from non-existent path '${s}'. ${r}`);continue}const o=h(b,s);if(o)if('array'===o.type){if(!0!==o.extensible){f(`SCHEMA VIOLATION: Cannot remove element from non-extensible array at path '${s}'. ${r}`);continue}}else if('object'===o.type){const e=String(n);if(_.has(o.properties,e)&&!0===o.properties[e].required){f(`SCHEMA VIOLATION: Cannot remove required key '${e}' from path '${s}'. ${r}`);continue}}const l=t.args.length>1?k(t.args[1]):void 0;let c=!1;if(void 0===l){const e=_.get(a.stat_data,i);_.unset(a.stat_data,i),v=`REMOVED path '${i}' ${r}`,c=!0,await eventEmit(u.SINGLE_VARIABLE_UPDATED,a.stat_data,i,e,void 0)}else{const t=_.get(a.stat_data,i);if(!Array.isArray(t)&&!_.isObject(t)){f(`Cannot remove from path '${i}' because it is not an array or object. Skipping command. ${r}`);continue}if(Array.isArray(t)){const n=e(t);let s=-1;s='number'==typeof l?l:t.findIndex(e=>_.isEqual(e,l)),s>=0&&s<t.length&&(t.splice(s,1),c=!0,v=`REMOVED item from '${i}' ${r}`,await eventEmit(u.SINGLE_VARIABLE_UPDATED,a.stat_data,i,n,t))}else if(_.isObject(t))if('number'==typeof l){const e=Object.keys(t),a=l;if(a>=0&&a<e.length){const n=e[a];_.unset(t,n),c=!0,v=`REMOVED ${a+1}th entry ('${n}') from object '${i}' ${r}`}}else{const e=String(l);_.has(t,e)&&(delete t[e],c=!0,v=`REMOVED key '${e}' from object '${i}' ${r}`)}}if(!c){f(`Failed to execute remove on '${i}'`);continue}p=!0,console.info(v);break}case'add':{if(!_.has(a.stat_data,i)){f(`Path '${i}' does not exist in stat_data, skipping add command ${r}`);continue}const n=e(_.get(a.stat_data,i)),s=_.get(a.stat_data,i);let c=s;const d=l(s)&&'object'!=typeof s[0];d&&(o(),c=s[0]);let m=null;if(c instanceof Date)m=c;else if('string'==typeof c){const e=new Date(c);!isNaN(e.getTime())&&isNaN(Number(c))&&(m=e)}if(2!==t.args.length){f(`Invalid number of arguments for _.add on path '${i}' ${r}`);continue}{const e=k(t.args[1]);if(m){if('number'!=typeof e){f(`Delta '${t.args[1]}' for Date operation is not a number, skipping add command ${r}`);continue}const l=new Date(m.getTime()+e),c=l.toISOString();d?(o(),s[0]=c,_.set(a.stat_data,i,s)):_.set(a.stat_data,i,c);const g=_.get(a.stat_data,i);v=d?`${JSON.stringify(n[0])}->${JSON.stringify(g[0])} ${r}`:`${JSON.stringify(n)}->${JSON.stringify(g)} ${r}`,p=!0,console.info(`ADDED date '${i}' from '${m.toISOString()}' to '${l.toISOString()}' by delta '${e}'ms ${r}`),await eventEmit(u.SINGLE_VARIABLE_UPDATED,a.stat_data,i,n,g)}else{if('number'!=typeof c){f(`Path '${i}' value is not a date or number; skipping add command ${r}`);continue}{if('number'!=typeof e){f(`Delta '${t.args[1]}' is not a number, skipping add command ${r}`);continue}let o=c+e;o=parseFloat(o.toPrecision(12)),d?(s[0]=o,_.set(a.stat_data,i,s)):_.set(a.stat_data,i,o);const l=_.get(a.stat_data,i);v=d?`${JSON.stringify(n[0])}->${JSON.stringify(l[0])} ${r}`:`${JSON.stringify(n)}->${JSON.stringify(l)} ${r}`,p=!0,console.info(`ADDED number '${i}' from '${c}' to '${o}' by delta '${e}' ${r}`),await eventEmit(u.SINGLE_VARIABLE_UPDATED,a.stat_data,i,n,l)}}}break}}v&&(_.set(n.stat_data,i,v),_.set(s.stat_data,i,v))}if(a.display_data=n.stat_data,a.delta_data=s.stat_data,await eventEmit(u.VARIABLE_UPDATE_ENDED,a),_.unset(a.stat_data,'$internal'),p&&v(a),r&&V().settings.通知.变量更新出错){const e=r.error_command.full_match;'undefined'!=typeof toastr&&toastr.warning(`最近错误: ${r.error_last}`,`[MVU]发生变量更新错误，可能需要重Roll: ${e}`,{timeOut:6e3})}return p||!1}async function G(e){const t=getChatMessages(e).at(-1);if(!t)return;let a=t.message;if('assistant'===t.role&&a.length<5)return;const n=0===e?0:e-1,s=await j(n);if(!_.has(s,'stat_data'))return void console.error(`cannot found stat_data for ${n}`);const i=e=>(e.initialized_lorebooks=s.initialized_lorebooks,e.stat_data=s.stat_data,void 0!==s.schema?e.schema=s.schema:_.unset(e,'schema'),e.display_data=s.display_data,e.delta_data=s.delta_data,e);await R(a,s)&&await updateVariablesWith(i,{type:'chat'}),await updateVariablesWith(i,{type:'message',message_id:e}),'user'!==t.role&&(a.includes('<StatusPlaceHolderImpl/>')||(a+='\n\n<StatusPlaceHolderImpl/>'),await setChatMessages([{message_id:e,message:a}],{refresh:'affected'}))}async function J(t,a){if(void 0===a.old_variables)return;a.new_variables=e(a.old_variables);const n=a.new_variables;await R(t,n)||_.unset(a,'new_variables')}function B(e,t,a){let n=0;return _(SillyTavern.chat).slice(e,t+1).forEach((t,s)=>{if(void 0===t.variables)return;let i=!1;t.variables=_.range(0,t.swipes?.length??1).map(r=>void 0===t?.variables?.[r]?{}:!0===_.get(t?.variables?.[r],'snapshot')?t.variables[r]:(e+s)%a===0?(_.set(t,['variables',r,'snapshot'],!0),t.variables[r]):(i||(i=!0,++n),_.omit(t.variables[r],'initialized_lorebooks','stat_data','display_data','delta_data','schema')))}),N(),n}function F(e,t,a,n){_.forEach(t,(e,t)=>{const s=t;if(_.isArray(e)){if(2===e.length&&_.isString(e[1])){if(_.isArray(_.get(a,s))){const i=_.get(a,s);if(2===i.length)if(_.set(n,`${s}[1]`,e[1]),_.isObject(e[0])&&!_.isArray(e[0])){const a=_.get(n,`${t}[0]`);_.has(e[0],'description')&&_.isString(e[0].description)&&_.has(i[0],'description')&&_.set(n,`${s}[0].description`,e[0].description),F(`${s}[0]`,e[0],i[0],a)}else _.isArray(e[0])&&F(`${s}[0]`,e[0],i[0],n[0])}}else if(_.isArray(_.get(a,s))){const t=_.get(a,s);e.forEach((a,i)=>{if(i<t.length&&_.isObject(a)){const r=_.get(n,`${s}[${i}]`);_.has(a,'description')&&_.isString(a.description)&&_.has(t[i],'description')&&_.set(r,'description',a.description),F(`${s}[${i}]`,e[i],t[i],r)}})}}else if(_.isObject(e)){if(_.has(e,'description')&&_.isString(e.description)){const s=`${t}.description`;_.has(a,s)&&_.set(n,s,e.description)}_.has(a,t)&&_.isObject(a[t])&&F(s,e,a[t],n[t])}})}async function q(){let t;try{if(0===SillyTavern.chat.length)return console.error('不存在任何一条消息，退出'),void toastr.error('需要有开场白才能初始化变量','[MVU]变量初始化失败');t=await j(getLastMessageId())??{display_data:{},initialized_lorebooks:{},stat_data:{},delta_data:{},schema:{type:'object',properties:{}}}}catch(e){return void console.error('不存在任何一条消息，退出')}if(void 0===t&&(t={display_data:{},initialized_lorebooks:{},stat_data:{},delta_data:{},schema:{type:'object',properties:{}}}),_.has(t,'initialized_lorebooks')||(t.initialized_lorebooks={}),Array.isArray(t.initialized_lorebooks)){console.warn('Old "initialized_lorebooks" array format detected. Migrating to the new object format.');const e=t.initialized_lorebooks,a={};for(const t of e)a[t]=[];t.initialized_lorebooks=a}t.stat_data||(t.stat_data={}),t.schema||(t.schema={extensible:!1,properties:{},type:'object'});const a=await H(t);if(a){}if(a||!t.schema||_.isEmpty(t.schema)){const a=g(e(t.stat_data),t.schema);d(a)?(_.has(t.stat_data,'$meta.strictTemplate')&&(a.strictTemplate=t.stat_data.$meta?.strictTemplate),_.has(t.stat_data,'$meta.concatTemplateArray')&&(a.concatTemplateArray=t.stat_data.$meta?.concatTemplateArray),_.has(t.stat_data,'$meta.strictSet')&&(a.strictSet=t.stat_data.$meta?.strictSet),t.schema=a):console.error('Generated schema is not an object schema, which is unexpected for stat_data root'),y(t.stat_data)}if(a){if(console.info('Init chat variables.'),await updateVariablesWith(e=>_.assign(e,t)),0==getLastMessageId()){const a=getChatMessages(0,{include_swipes:!0})[0];await setChatMessages([{message_id:0,swipes_data:await Promise.all(a.swipes.map(async(n,s)=>{let i=e(a.swipes_data[s]);void 0===i&&(i={});const r=_.merge(i,t);return await R(n,r),console.log('变量初始化完成'),r}))}])}else await setChatMessage({data:t},getLastMessageId());try{toastr.info(`有新的世界书初始化变量被加载，当前使用世界书:<br>${Object.entries(t.initialized_lorebooks??{}).map(([e,t])=>`- ${e}: ${JSON.stringify(t)}`).join('<br>')}`,'[MVU]变量初始化成功',{escapeHtml:!1})}catch(e){}await async function(){const e={scan_depth:2,context_percentage:100,budget_cap:0,min_activations:0,max_depth:0,max_recursion_steps:0,insertion_strategy:'character_first',include_names:!1,recursive:!0,case_sensitive:!1,match_whole_words:!1,use_group_scoring:!1,overflow_alert:!1},t=getLorebookSettings();_.isEqual(_.merge({},t,e),t)||setLorebookSettings(e)}()}}async function H(e,t){const a=t||await async function(){const e=[...(await getLorebookSettings()).selected_global_lorebooks],t=await getCurrentCharPrimaryLorebook();return null!==t&&e.push(t),e}();let n=!1;e.initialized_lorebooks&&!Array.isArray(e.initialized_lorebooks)||(e.initialized_lorebooks={});for(const t of a){if(_.has(e.initialized_lorebooks,t))continue;e.initialized_lorebooks[t]=[];const a=await getLorebookEntries(t);for(const t of a)if(t.comment?.toLowerCase().includes('[initvar]')){const a=substitudeMacros(t.content);let n=null,r=null;try{n=YAML.parseDocument(a,{merge:!0}).toJS()}catch(e){try{n=s.parse(a)}catch(e){try{n=i.parse(a)}catch(e){r=new Error(`initvar 不是有效的 YAML/JSON/JSON5/TOML 格式: ${e}`)}}}if(r)throw console.error(`解析世界书条目'${t.comment}'失败: ${r}`),toastr.error(r.message,`[MVU] 解析世界书条目'${t.comment}'失败`,{timeOut:5e3}),r;n&&(e.stat_data=_.merge(e.stat_data,n))}n=!0}return n}let W,Y;const X=[{name:'重新处理变量',function:async()=>{const e=getLastMessageId();e<1||0!==SillyTavern.chat.length&&(await updateVariablesWith(e=>(_.unset(e,'stat_data'),_.unset(e,'delta_data'),_.unset(e,'display_data'),_.unset(e,'schema'),e),{type:'message',message_id:e}),await G(getLastMessageId()))}},{name:'重新读取初始变量',function:async()=>{const t={display_data:{},initialized_lorebooks:{},stat_data:{},delta_data:{},schema:{type:'object',properties:{}}};try{if(!await H(t))return console.error('没有找到 InitVar 数据'),void toastr.error('没有找到 InitVar 数据','[MVU]',{timeOut:3e3})}catch(e){return void console.error('加载 InitVar 数据失败:',e)}await v(t),y(t.stat_data);const a=getLastMessageId();if(a<0)return console.error('没有找到消息'),void toastr.error('没有找到消息','[MVU]',{timeOut:3e3});const n=await j(a);if(!_.has(n,'stat_data'))return console.error('最新消息中没有找到 stat_data'),void toastr.error('最新消息中没有 stat_data','[MVU]',{timeOut:3e3});const s={stat_data:void 0,schema:void 0};s.stat_data=_.merge({},t.stat_data,n.stat_data),s.schema=_.merge({},n.schema,t.schema),s.initialized_lorebooks=_.merge({},t.initialized_lorebooks,n.initialized_lorebooks),s.display_data=e(s.stat_data),s.delta_data=n.delta_data,F(0,t.stat_data,n.stat_data,s.stat_data),await v(s),y(s.stat_data),await replaceVariables(s,{type:'message',message_id:a}),await setChatMessage({},a),await replaceVariables(s,{type:'chat'}),console.info('InitVar更新完成'),toastr.success('InitVar描述已更新','[MVU]',{timeOut:3e3})}},{name:'快照楼层',function:async()=>{const e=await SillyTavern.callGenericPopup('<h4>设置快照楼层可以避免指定的楼层在清理操作中被移除变量信息</h4>请填写要保留变量信息的楼层 (如 10 为第 10 层)<br><strong>后续楼层的重演将可以从这一层开始</strong>',SillyTavern.POPUP_TYPE.INPUT,'10');if(!e)return;const t=parseInt(e);if(isNaN(t))return void toastr.error(`请输入有效的楼层数, 你输入的是 '${e}'`,'[MVU]配置楼层快照失败');const a=SillyTavern.chat[t];void 0!==a?(_.range(0,a.swipes?.length??1).forEach(e=>{void 0!==a?.variables?.[e]&&(a.variables[e].snapshot=!0)}),SillyTavern.saveChat().then(()=>toastr.success(`已将 ${t} 层配置为快照楼层`,'[MVU]配置楼层快照'))):toastr.error(`无效的楼层 '${e}'`,'[MVU]配置楼层快照失败')}},{name:'重演楼层',function:async function(){const t=await SillyTavern.callGenericPopup('<h4>当变量更新出现 required/extensible 相关问题时，可以尝试通过从过去的楼层重演解决</h4>请填写要进行重演的楼层 (如 10 为第 10 层, -1 为最新楼层)<br><strong>也就是出现问题的楼层</strong>',SillyTavern.POPUP_TYPE.INPUT,'-1');if(!t)return;let a=parseInt(t);if(-1===a&&(a=getLastMessageId()),isNaN(a)||void 0===SillyTavern.chat[a])return void toastr.error(`请输入有效的楼层数, 你输入的是 '${t}'`,'[MVU]楼层重演失败');const n=x(a);if(-1===n)return void toastr.error('无法找到可以进行重演的楼层','[MVU]楼层重演失败');const s=await SillyTavern.callGenericPopup(`请填写从哪个楼层开始重演，找到最近的支持重演楼层为 [${n}]`,SillyTavern.POPUP_TYPE.INPUT,n.toString());if(!s)return;const i=parseInt(s);if(isNaN(i))return void toastr.error(`请输入有效的楼层数, 你输入的是 '${s}'`,'[MVU]楼层重演失败');const r=e(getVariables({type:'message',message_id:i}));if(void 0===r||!_.has(r,'stat_data')||!_.has(r,'schema'))return void toastr.error(`请输入含变量信息的楼层, 你输入的是 '${s}'`,'[MVU]楼层重演失败');let o=0;for(let e=i+1;e<=a;e++){const t=SillyTavern.chat[e],n=e-(i+1);console.log(`正在重演 ${n}, 内容 ${t.mes}`),await R(t.mes,r),o++,o%50==0&&toastr.info(`处理变量中 (${o} / ${a-i})`,'[MVU]楼层重演')}await updateVariablesWith(e=>(e.stat_data=r.stat_data,e.display_data=r.display_data,e.delta_data=r.delta_data,e.initialized_lorebooks=r.initialized_lorebooks,e.schema=r.schema,e),{type:'message',message_id:a}),SillyTavern.saveChat().then(()=>toastr.success(`已将 ${a} 层变量状态重演完毕，共重演 ${o} 楼`,'[MVU]楼层重演')),await setChatMessages([{message_id:a}],{refresh:'affected'})}},{name:'重试额外模型解析',function:async function(){const e=V().settings;if('随AI输出'===e.更新方式)return void toastr.info('当前配置没有启用额外模型解析，不需要进行此操作','[MVU]重试额外模型解析',{timeOut:3e3});if(e.额外模型解析配置.使用函数调用&&!T())return void toastr.info('当前配置指定的LLM不支持函数调用，不需要进行此操作','[MVU]重试额外模型解析',{timeOut:3e3});if(!Y)return void toastr.info('当前角色卡不支持额外模型解析，或是刚刚刷新页面，无法进行此操作','[MVU]重试额外模型解析',{timeOut:3e3});const t=getLastMessageId(),a=getChatMessages(t).at(-1),n=a?.message??'',s=n.lastIndexOf('<UpdateVariable>');if(s>=0){const e=n.lastIndexOf('</UpdateVariable>');let a='';a=-1===e?n.slice(0,s):n.slice(0,s)+n.slice(e+17),await setChatMessages([{message_id:t,message:a}],{refresh:'none'})}await W(t),toastr.info('解析完成','[MVU]重试额外模型解析')}},{name:'清除旧楼层变量',function:async()=>{const e=V().settings.快照保留间隔,t=await SillyTavern.callGenericPopup(`<h4>清除旧楼层变量信息以减小聊天文件大小避免手机崩溃</h4>请填写要保留变量信息的楼层数 (如 10 为保留最后 10 层，每 [${e}] 层保留一层作为快照)，每 <br><strong>注意: 你需要通过重演才能回退游玩到没保留变量信息的楼层</strong>`,SillyTavern.POPUP_TYPE.INPUT,'10');if(!t)return;const a=parseInt(t);isNaN(a)?toastr.error(`请输入有效的楼层数, 你输入的是 '${t}'`,'[MVU]清理旧楼层变量失败'):(SillyTavern.chat.slice(1,-a-1).forEach((t,a)=>{void 0!==t.variables&&(t.variables=_.range(0,t.swipes?.length??1).map(n=>void 0===t?.variables?.[n]?{}:!0===_.get(t.variables[n],'snapshot')?t.variables[n]:(a+1)%e===0?(t.variables[n].snapshot=!0,console.log(`将 [${a+1}] 层作为快照楼层`),t.variables[n]):_.omit(t.variables[n],'stat_data','display_data','delta_data','schema')))}),SillyTavern.saveChat().then(()=>toastr.success(`已清理旧变量, 保留了最后 ${a} 层的变量`,'[MVU]清理旧楼层变量成功')))}}];function Z(){return{events:u,parseMessage:async function(e,t){const a={old_variables:t};return await J(e,a),a.new_variables},getMvuData:function(e){return getVariables(e)},replaceMvuData:async function(e,t){await replaceVariables(e,t)},getCurrentMvuData:function(){return getVariables({type:'message',message_id:getCurrentMessageId()})},replaceCurrentMvuData:async function(e){await replaceVariables(e,{type:'message',message_id:getCurrentMessageId()})},reloadInitVar:async function(e){return await H(e)},setMvuVariable:async function(e,t,a,{reason:n='',is_recursive:s=!1}={}){return await L(e.stat_data,t,a,n,s)},getMvuVariable:function(e,t,{category:a='stat',default_value:n}={}){let s;switch(a){case'stat':s=e.stat_data;break;case'display':s=e.display_data;break;case'delta':s=e.delta_data}const i=_.get(s,t,n);return function(e){return Array.isArray(e)&&2===e.length&&'string'==typeof e[1]}(i)?i[0]:i},getRecordFromMvuData:function(e,t){return function(e,t){let a;switch(e){case'stat':a=t.stat_data;break;case'display':a=t.display_data;break;case'delta':a=t.delta_data}return a}(t,e)}}}const K='mvu_VariableUpdate';let Q=!1;function ee(e){Q=e}async function te(e){if(!e?.delta)return'';let t=getLastMessageId(),a=getChatMessages(t).at(-1);if(a&&'system'===a.role&&(t-=1,a=getChatMessages(t).at(-1)),!a)return'';let n=a.message;const s=await j(t);if(!_.has(s,'stat_data'))return console.error(`cannot found stat_data for ${t}`),'';return await R(e.delta,s)&&await replaceVariables(s,{type:'chat'}),await replaceVariables(s,{type:'message',message_id:t}),n+=`<UpdateVariable>\n<Analysis>${e.analysis}</Analysis></Analysis>${e.delta}\n</UpdateVariable>`,'user'===a.role||n.includes('<StatusPlaceHolderImpl/>')?await setChatMessages([{message_id:t,message:n}],{refresh:'affected'}):await setChatMessages([{message_id:t,message:n+'\n\n<StatusPlaceHolderImpl/>'}],{refresh:'affected'}),JSON.stringify(s.delta_data)}function ae(e){const t=V().settings;'额外模型解析'===t.更新方式&&!0===t.额外模型解析配置.使用函数调用&&Q&&void 0!==e.tools&&_.size(e.tools)>0&&(e.tool_choice='required')}const ne={class:'inline-drawer'},se={class:'inline-drawer-content'},ie={class:'flex-container flexFlowColumn'},re={class:'checkbox_label',for:'mvu_notification_error'},oe={class:'checkbox_label',for:'mvu_notification_extra_model_parsing'},le={class:'flex-container flexFlowColumn'},ce={class:'checkbox_label',for:'mvu_extra_model_send_preset'},de={class:'checkbox_label',for:'mvu_extra_model_use_function_calling'},ue={class:'flex-container flexFlowColumn'},_e={class:'flex-container flexFlowColumn'},me={class:'flex-container flexFlowColumn'},pe={class:'flex-container flexFlowColumn'},fe={class:'flex-container flexFlowColumn'},ge={class:'flex-container flexFlowColumn'},he={class:'flex-container flexFlowColumn'},ve={class:'checkbox_label',for:'mvu_auto_clean_checkbox'},ye={class:'flex-container flexFlowColumn'},be={class:'flex-container flex'},$e=['onClick'],Ee=(0,b.defineComponent)({__name:'Panel',setup(e){const t=V();async function a(){SillyTavern.callGenericPopup('<h1>使用说明</h1> <h2>选择你的变量更新方式</h2> <p>为了让剧情模型更专注于剧情，你可以选择变量更新的方式：</p> <ul> <li><strong>随AI输出</strong>：条目将会正常发给 AI，因此 AI 将会在回复时输出变量更新分析及更新命令，进而更新变量。</li> <li><strong>额外模型解析</strong>：先由一个 AI 专门输出剧情，再由一个 AI 专门解析剧情来更新变量，这个过程中： <ul> <li>名字中有 <code>[mvu_plot]</code> 的条目只会发给输出剧情 AI</li> <li>名字中有 <code>[mvu_update]</code> 的条目只会发给更新变量 AI</li> <li>名字中既没有 <code>[mvu_plot]</code> 也没有 <code>[mvu_update]</code> 将会发送给两个 AI</li> </ul> </li> </ul> <p>除“随AI输出”以外的方式，只有在作者适配世界书后才能使用——但没适配也没关系——如果作者没有适配，则 MVU 依旧会使用“随AI输出”的方式更新变量。</p> <h2>适配世界书</h2> <p>你只需要拆分一下条目、给条目改一下名字就能让世界书适配其他变量更新方式。</p> <p>具体地，MVU 变量框架的提示词分为：</p> <ul> <li><strong>变量列表</strong>：让 AI 知道有什么变量，如 <code>{{get_message_variable::stat_data}}</code>、<code>&#x3C;%= getvar(\'stat_data\') _%></code> 等。</li> <li><strong>变量更新规则</strong>：让 AI 知道变量该如何更新，如<code>药物依赖度应该每分钟增加1点</code>等。</li> <li><strong>输出规则</strong>：让 AI 知道该输出什么来表达变量发生变化，如提示词中要求输出的 <code>&#x3C;UpdateVariable></code> 块。</li> </ul> <p>你需要做的，是给“变量更新规则”和“输出规则”条目的名字添加 <code>[mvu_update]</code>，也就是改成：</p> <ul> <li><code>变量列表</code></li> <li><code>[mvu_update]变量更新规则</code></li> <li><code>[mvu_update]输出规则</code></li> </ul> <p>此外，如果你有其他输出格式，为了不对变量更新 AI 产生干扰，你可以用 <code>[mvu_plot]</code> 指定它只发给负责输出剧情的 AI：</p> <ul> <li><code>[mvu_plot]剧情思维链</code></li> </ul> <p>这样修改名字只是区分什么情况下发送条目, 绿灯等功能依旧会生效.</p> ',SillyTavern.POPUP_TYPE.TEXT,'',{allowVerticalScrolling:!0,leftAlign:!0,wide:!0})}async function n(){SillyTavern.callGenericPopup('<h1>额外模型解析方式</h1> <ul> <li> <p>发送预设：是否要把预设里的条目也发给额外模型</p> <ul> <li>开启：额外模型将会被预设破限; 但是预设往往规定了写作任务，因此额外模型可能会选择继续剧情而不是更新变量。</li> <li>关闭：额外模型可能因为没有被破限而道歉。</li> </ul> </li> <li> <p>使用函数调用：一些渠道的模型支持函数调用</p> <ul> <li>开启：额外模型将使用函数调用来更新变量，不受预设的写作任务影响; 但很多渠道不支持函数调用。</li> <li>关闭：额外模型会通过输出文本来更新变量，可能受预设的写作任务影响而选择继续剧情而不是更新变量。</li> </ul> </li> </ul> <h2>什么时候需要调整解析方式</h2> <p>默认情况下，更新变量的 AI 请求也会包含预设的内容，不过 AI 因此有一定概率受预设的写作任务而继续剧情，导致其实是在推进剧情的同时分析了变量——变量的更新结果实际上是属于未来剧情的，与当前回复并不吻合。</p> <p>如果发现了这种不吻合，在 SFW 的场合可以关闭<code>发送预设</code>，避免预设对变量分析请求的影响; 在 NSFW 的场合，则可以尝试开启<code>使用函数调用</code>来稳定覆盖掉预设中的任务。</p> <p>但<code>函数调用</code>存在限制:</p> <ul> <li>MVU 的<code>函数调用</code>要求支持的函数调用类型为 <code>required</code></li> <li>目前只有一部分模型/提供商/反代支持函数调用</li> <li>已知支持的模型至少包括 Claude 4+、Gemini 2.5 Pro、Deepseek V3/V3.1 (官方渠道，硅基流动等的不支持); 如果你使用的是上述模型，但是请求报错，建议换个渠道使用这些模型</li> </ul> ',SillyTavern.POPUP_TYPE.TEXT,'',{allowVerticalScrolling:!0,leftAlign:!0,wide:!0})}return(0,b.watch)(()=>t.settings.更新方式,e=>{'额外模型解析'===e&&r(w(),'1.13.4','<')&&(toastr.error('检查到酒馆版本过低，要使用\'额外模型解析\'请保证酒馆版本大于等于 1.13.4','[MVU]无法使用\'额外模型解析\'',{timeOut:5e3}),t.settings.更新方式='随AI输出')}),(0,b.watch)(()=>t.settings.额外模型解析配置.使用函数调用,e=>{!0===e&&(SillyTavern.ToolManager.isToolCallingSupported()||toastr.error('请在 API 配置 (插头) 处将提示词后处理改为\'含工具\'的选项','[MVU]无法使用\'函数调用\'',{timeOut:5e3}),!1===SillyTavern.chatCompletionSettings.function_calling&&toastr.error('请在预设面板勾选\'启用函数调用\'选项','[MVU]无法使用\'函数调用\'',{timeOut:5e3}),t.settings.额外模型解析配置.使用函数调用=!0)}),(e,s)=>((0,b.openBlock)(),(0,b.createElementBlock)('div',ne,[s[35]||(s[35]=(0,b.createElementVNode)('div',{class:'inline-drawer-toggle inline-drawer-header'},[(0,b.createElementVNode)('b',null,'MVU 变量框架'),(0,b.createElementVNode)('div',{class:'inline-drawer-icon fa-solid fa-circle-chevron-down down'})],-1)),(0,b.createElementVNode)('div',se,[(0,b.createElementVNode)('div',ie,[s[15]||(s[15]=(0,b.createElementVNode)('div',null,[(0,b.createElementVNode)('strong',null,'通知设置')],-1)),(0,b.createElementVNode)('label',re,[(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_notification_error','onUpdate:modelValue':s[0]||(s[0]=e=>(0,b.unref)(t).settings.通知.变量更新出错=e),type:'checkbox'},null,512),[[b.vModelCheckbox,(0,b.unref)(t).settings.通知.变量更新出错]]),s[13]||(s[13]=(0,b.createElementVNode)('span',null,'变量更新出错时通知',-1))]),(0,b.createElementVNode)('label',oe,[(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_notification_extra_model_parsing','onUpdate:modelValue':s[1]||(s[1]=e=>(0,b.unref)(t).settings.通知.额外模型解析中=e),type:'checkbox'},null,512),[[b.vModelCheckbox,(0,b.unref)(t).settings.通知.额外模型解析中]]),s[14]||(s[14]=(0,b.createElementVNode)('span',null,'额外模型解析中通知',-1))])]),s[32]||(s[32]=(0,b.createElementVNode)('hr',null,null,-1)),(0,b.createElementVNode)('div',le,[(0,b.createElementVNode)('div',null,[s[16]||(s[16]=(0,b.createElementVNode)('strong',null,'变量更新方式',-1)),(0,b.createElementVNode)('i',{class:'fa-solid fa-circle-question fa-sm note-link-span',style:{cursor:'pointer'},onClick:a})]),(0,b.withDirectives)((0,b.createElementVNode)('select',{id:'mvu_update_method','onUpdate:modelValue':s[2]||(s[2]=e=>(0,b.unref)(t).settings.更新方式=e),class:'text_pole'},[...s[17]||(s[17]=[(0,b.createElementVNode)('option',{value:'随AI输出'},'随AI输出',-1),(0,b.createElementVNode)('option',{value:'额外模型解析'},'额外模型解析',-1)])],512),[[b.vModelSelect,(0,b.unref)(t).settings.更新方式]]),'额外模型解析'===(0,b.unref)(t).settings.更新方式?((0,b.openBlock)(),(0,b.createElementBlock)(b.Fragment,{key:0},[(0,b.createElementVNode)('label',null,[s[18]||(s[18]=(0,b.createTextVNode)(' 解析方式 ',-1)),(0,b.createElementVNode)('i',{class:'fa-solid fa-circle-question fa-sm note-link-span',style:{cursor:'pointer'},onClick:n})]),(0,b.createElementVNode)('label',ce,[(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_extra_model_send_preset','onUpdate:modelValue':s[3]||(s[3]=e=>(0,b.unref)(t).settings.额外模型解析配置.发送预设=e),type:'checkbox'},null,512),[[b.vModelCheckbox,(0,b.unref)(t).settings.额外模型解析配置.发送预设]]),s[19]||(s[19]=(0,b.createElementVNode)('span',null,'发送预设',-1))]),(0,b.createElementVNode)('label',de,[(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_extra_model_use_function_calling','onUpdate:modelValue':s[4]||(s[4]=e=>(0,b.unref)(t).settings.额外模型解析配置.使用函数调用=e),type:'checkbox'},null,512),[[b.vModelCheckbox,(0,b.unref)(t).settings.额外模型解析配置.使用函数调用]]),s[20]||(s[20]=(0,b.createElementVNode)('span',null,'使用函数调用',-1))]),s[25]||(s[25]=(0,b.createElementVNode)('label',{for:'mvu_extra_model_source'},'模型来源',-1)),(0,b.withDirectives)((0,b.createElementVNode)('select',{id:'mvu_extra_model_source','onUpdate:modelValue':s[5]||(s[5]=e=>(0,b.unref)(t).settings.额外模型解析配置.模型来源=e),class:'text_pole'},[...s[21]||(s[21]=[(0,b.createElementVNode)('option',{value:'与插头相同'},'与插头相同',-1),(0,b.createElementVNode)('option',{value:'自定义'},'自定义',-1)])],512),[[b.vModelSelect,(0,b.unref)(t).settings.额外模型解析配置.模型来源]]),'自定义'===(0,b.unref)(t).settings.额外模型解析配置.模型来源?((0,b.openBlock)(),(0,b.createElementBlock)(b.Fragment,{key:0},[(0,b.createElementVNode)('div',ue,[s[22]||(s[22]=(0,b.createElementVNode)('label',{for:'mvu_api_url'},'API 地址',-1)),(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_api_url','onUpdate:modelValue':s[6]||(s[6]=e=>(0,b.unref)(t).settings.额外模型解析配置.api地址=e),type:'text',class:'text_pole',placeholder:'http://localhost:1234/v1'},null,512),[[b.vModelText,(0,b.unref)(t).settings.额外模型解析配置.api地址]])]),(0,b.createElementVNode)('div',_e,[s[23]||(s[23]=(0,b.createElementVNode)('label',{for:'mvu_api_key'},'API 密钥',-1)),(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_api_key','onUpdate:modelValue':s[7]||(s[7]=e=>(0,b.unref)(t).settings.额外模型解析配置.密钥=e),type:'password',class:'text_pole',placeholder:'留空表示无需密钥'},null,512),[[b.vModelText,(0,b.unref)(t).settings.额外模型解析配置.密钥]])]),(0,b.createElementVNode)('div',me,[s[24]||(s[24]=(0,b.createElementVNode)('label',{for:'mvu_model_name'},'模型名称',-1)),(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_model_name','onUpdate:modelValue':s[8]||(s[8]=e=>(0,b.unref)(t).settings.额外模型解析配置.模型名称=e),type:'text',class:'text_pole',placeholder:'gemini-2.5-flash'},null,512),[[b.vModelText,(0,b.unref)(t).settings.额外模型解析配置.模型名称]])])],64)):(0,b.createCommentVNode)('v-if',!0)],64)):(0,b.createCommentVNode)('v-if',!0)]),s[33]||(s[33]=(0,b.createElementVNode)('hr',null,null,-1)),(0,b.createElementVNode)('div',pe,[s[30]||(s[30]=(0,b.createElementVNode)('div',null,[(0,b.createElementVNode)('strong',null,'杂项配置')],-1)),(0,b.createElementVNode)('div',fe,[s[26]||(s[26]=(0,b.createElementVNode)('label',{for:'mvu_snapshot_interval'},'快照保留间隔',-1)),(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_snapshot_interval','onUpdate:modelValue':s[9]||(s[9]=e=>(0,b.unref)(t).settings.快照保留间隔=e),type:'number',min:'1',step:'1',class:'text_pole',placeholder:'50'},null,512),[[b.vModelText,(0,b.unref)(t).settings.快照保留间隔,void 0,{number:!0}]])]),(0,b.createElementVNode)('div',ge,[s[27]||(s[27]=(0,b.createElementVNode)('label',{for:'mvu_snapshot_interval'},'要保留变量的最近楼层数',-1)),(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_snapshot_interval','onUpdate:modelValue':s[10]||(s[10]=e=>(0,b.unref)(t).settings.auto_cleanup.要保留变量的最近楼层数=e),type:'number',min:'1',step:'1',class:'text_pole',placeholder:'50'},null,512),[[b.vModelText,(0,b.unref)(t).settings.auto_cleanup.要保留变量的最近楼层数,void 0,{number:!0}]])]),(0,b.createElementVNode)('div',he,[s[28]||(s[28]=(0,b.createElementVNode)('label',{for:'mvu_snapshot_interval'},'触发恢复变量的最近楼层数',-1)),(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_snapshot_interval','onUpdate:modelValue':s[11]||(s[11]=e=>(0,b.unref)(t).settings.auto_cleanup.触发恢复变量的最近楼层数=e),type:'number',min:'1',step:'1',class:'text_pole',placeholder:'50'},null,512),[[b.vModelText,(0,b.unref)(t).settings.auto_cleanup.触发恢复变量的最近楼层数,void 0,{number:!0}]])]),(0,b.createElementVNode)('label',ve,[(0,b.withDirectives)((0,b.createElementVNode)('input',{id:'mvu_auto_clean_checkbox','onUpdate:modelValue':s[12]||(s[12]=e=>(0,b.unref)(t).settings.auto_cleanup.启用=e),type:'checkbox'},null,512),[[b.vModelCheckbox,(0,b.unref)(t).settings.auto_cleanup.启用]]),s[29]||(s[29]=(0,b.createElementVNode)('span',null,'变量自动清理',-1))])]),s[34]||(s[34]=(0,b.createElementVNode)('hr',null,null,-1)),(0,b.createElementVNode)('div',ye,[s[31]||(s[31]=(0,b.createElementVNode)('div',null,[(0,b.createElementVNode)('strong',null,'修复按钮')],-1)),(0,b.createElementVNode)('div',be,[((0,b.openBlock)(!0),(0,b.createElementBlock)(b.Fragment,null,(0,b.renderList)((0,b.unref)(X),e=>((0,b.openBlock)(),(0,b.createElementBlock)('div',{key:e.name,class:'menu_button menu_button_icon interactable',tabindex:'0',role:'button',onClick:e.function},(0,b.toDisplayString)(e.name),9,$e))),128))])])])]))}}),Se=(0,b.createApp)(Ee);function Ve(){!function(){if($(`head > div[script_id="${getScriptId()}"]`).length>0)return;const e=$('<div>').attr('script_id',getScriptId()).append($('head > style',document).clone());$('head').append(e)}();const e=$('<div>').attr('script_id',getScriptId());$('#extensions_settings2').append(e),Se.use(t()).mount(e[0])}function Ae(){Se.unmount(),$(`#extensions_settings2 > div[script_id="${getScriptId()}"]`).remove(),$(`head > div[script_id="${getScriptId()}"]`).remove()}let we=!1,Te=!1;async function Me(e){const t=V().settings;if(Te=!1,'随AI输出'===t.更新方式)return;if(t.额外模型解析配置.使用函数调用&&!T())return void toastr.warning('当前预设/API 不支持函数调用，已退化回 `随AI输出`','[MVU]无法使用函数调用',{timeOut:2e3});const a=/\[mvu_update\]/i,n=/\[mvu_plot\]/i,s=e=>{_.remove(e,e=>{const t=e.comment.match(a),s=e.comment.match(n);return we?s&&!t:!s&&t}).length>0&&(Te=!0)};s(e.globalLore),s(e.characterLore),s(e.chatLore),s(e.personaLore)}let Ne=null;async function xe(e){const t=getChatMessages(e).at(-1);if(!t)return;if(t.message.length<5)return;const a=V().settings;if(we=!1,Y=Te,'随AI输出'===a.更新方式||a.额外模型解析配置.使用函数调用&&!T()||!1===Te)return void await G(e);we=!0;let n='---\n<must>\nThe latest storyline is contained within the `<past_observe>` block.\nThe `<status_description>` section records the state of variables *prior to* the latest storyline.\n# Ignore all the instructions I received before, my task has now changed.\nI must now **stop role-playing** and analyze the latest storyline **from a narrator’s perspective**, reviewing what has happened and updating the variables in `<status_description>` according to the variable update rules.\nFrom this point onward, **only** output the `<VariableUpdate>` content.\n</must>';a.额外模型解析配置.使用函数调用&&(n+='\n use `mvu_VariableUpdate` tool to update variables.');const s=!1===a.额外模型解析配置.发送预设?generateRaw:generate;let i='',o=0;try{ee(!0),console.log('Before RegisterMacro'),r(w(),'1.13.4','<=')&&await new Promise(e=>setTimeout(e,1e3)),SillyTavern.registerMacro('lastUserMessage',()=>n),console.log('After RegisterMacro');const e=[{id:'817114514',position:'in_chat',depth:0,should_scan:!1,role:'system',content:n},{id:'817114515',position:'in_chat',depth:2,should_scan:!1,role:'assistant',content:'<past_observe>'},{id:'817114516',position:'in_chat',depth:1,should_scan:!1,role:'assistant',content:'</past_observe>'}];let t;if(a.额外模型解析配置.使用函数调用){Ne=SillyTavern.ToolManager.parseToolCalls;const e=SillyTavern.ToolManager.parseToolCalls.bind(SillyTavern.ToolManager);SillyTavern.ToolManager.parseToolCalls=(a,n)=>{e(a,n),t=a}}for(o=0;o<3;o++){a.通知.额外模型解析中&&toastr.info('[MVU]额外模型分析变量更新中...'+(0===o?'':` 重试 ${o}/3`)),t=void 0;const n=await s('与插头相同'===a.额外模型解析配置.模型来源?{user_input:'遵循后续的 <must> 指令',injects:e,max_chat_history:2,should_stream:a.额外模型解析配置.使用函数调用}:{user_input:'遵循后续的 <must> 指令',custom_api:{apiurl:a.额外模型解析配置.api地址,key:a.额外模型解析配置.密钥,model:a.额外模型解析配置.模型名称},injects:e,max_chat_history:2,should_stream:a.额外模型解析配置.使用函数调用});if(void 0!==t){const e=_.get(t,'[0]');if(e){const t=_(e).findLast(e=>e.function.name===K);if(t){const e=_.get(t,'function.arguments');if(e)try{const t=JSON.parse(e);if(t.delta&&t.delta.length>5){i=`<UpdateVariable><Analyze>${t.analysis}</Analyze>${t.delta}</UpdateVariable>`;break}}catch(t){console.log(`failed to parse function call content,retry: ${e}: ${t}`)}}}}if(console.log(`Vanilla Response: ${n}`),-1!==n.indexOf('<UpdateVariable>')){const e=n.lastIndexOf('<UpdateVariable>'),t=n.slice(e+16).replace(/<\/UpdateVariable>/g,'');if(/_\.(?:set|insert|assign|remove|unset|delete|add)\s*\([\s\S]*?\)\s*;/.test(t)){i=`<UpdateVariable>${t}</UpdateVariable>`;break}}}}catch(t){return console.error(`变量更新请求发生错误: ${t}`),void await G(e)}finally{null!==Ne&&(SillyTavern.ToolManager.parseToolCalls=Ne,Ne=null),SillyTavern.unregisterMacro('lastUserMessage'),ee(!1),we=!1,Te=!0}if(''!==i){const t=getChatMessages(e);await setChatMessages([{message_id:e,message:t[0].message+i}],{refresh:'none'})}else toastr.error('建议调整变量更新方式/额外模型解析模式','[MVU]额外模型分析变量更新失败');await G(e)}async function Ie(){r(await getTavernHelperVersion(),'3.4.17','<')&&toastr.warning('酒馆助手版本过低, 无法正常处理, 请更新至 3.4.17 或更高版本（建议保持酒馆助手最新）','[MVU]不支持当前酒馆助手版本'),await async function(){A=await fetch('/version').then(e=>e.json()).then(e=>e.pkgVersion).catch(()=>'1.0.0')}();const t=V();appendInexistentScriptButtons(X.map(e=>({name:e.name,visible:!1}))),X.forEach(e=>{eventOn(getButtonEvent(e.name),e.function)});const{要保留变量的最近楼层数:a,启用:n}=t.settings.auto_cleanup;if(n&&SillyTavern.chat.length>a&&_.has(SillyTavern.chat,[1,'variables',0,'stat_data'])){toastr.info('即将开始清理就聊天记录的变量，自动生成备份...','[MVU]自动清理');let e=!1;try{const t={is_group:!1,avatar_url:SillyTavern.characters[Number(SillyTavern.characterId)]?.avatar,file:`${SillyTavern.getCurrentChatId()}.jsonl`,exportfilename:`${SillyTavern.getCurrentChatId()}.jsonl`,format:'jsonl'},a=await fetch('/api/chats/export',{method:'POST',body:JSON.stringify(t),headers:SillyTavern.getRequestHeaders()}),n=await a.json();if(a.ok){toastr.success(n.message);const a=n.result,s=new Blob([a],{type:'text/plain'}),i=URL.createObjectURL(s),r=document.createElement('a');r.href=i,r.download=t.exportfilename,r.click(),URL.revokeObjectURL(i),e=!0}else toastr.error(`聊天记录导出失败，放弃清理: ${n.message}`,'[MVU]自动清理')}catch(e){toastr.error(`聊天记录导出失败，放弃清理: ${e}`,'[MVU]自动清理')}if(e){const e=B(1,SillyTavern.chat.length-1-a,t.settings.快照保留间隔);e>0&&toastr.info(`已清理老聊天记录中的 ${e} 条消息`,'[MVU]自动清理',{timeOut:1e3})}}eventOn(tavern_events.MESSAGE_DELETED,_.debounce(async()=>{const t=SillyTavern.chat.length-1,n=V(),{触发恢复变量的最近楼层数:s}=n.settings.auto_cleanup,i=Math.max(1,t-s),r=SillyTavern.chat.findLastIndex(e=>!_.has(e,['variables',e.swipe_id??0,'stat_data'])||!_.has(e,['variables',e.swipe_id??0,'schema']));if(i>r)return void console.info(`最近 ${s} 层都包含变量数据，不需要进行恢复。`);const o=Math.max(1,t-a),l=x(o);if(-1===l||!_.has(SillyTavern.chat,[l,'variables',0,'stat_data']))return void toastr.warning(`在 0 ~ ${o} 层找不到有效的变量信息，无法进行楼层变量恢复`,'[MVU]恢复旧楼层变量');const c=SillyTavern.chat[l];toastr.info('恢复变量内容中...','[MVU]恢复旧楼层变量',{timeOut:1e3});let d=SillyTavern.chat[l+1].mes,u=e(c.variables[c.swipe_id??0]);for(let t=l+1;t<=r;t++){d=SillyTavern.chat[t].mes,await R(d,u);const a=SillyTavern.chat[t],n=_.has(a,['variables',a.swipe_id??0,'stat_data'])&&_.has(a,['variables',a.swipe_id??0,'schema']);t>=o&&!n&&(await updateVariablesWith(e=>(e.initialized_lorebooks=u.initialized_lorebooks,e.stat_data=u.stat_data,void 0!==u.schema?e.schema=u.schema:_.unset(e,'schema'),e.display_data=u.display_data,e.delta_data=u.delta_data,e),{type:'message',message_id:t}),u=e(u))}toastr.info('恢复完成。','[MVU]恢复旧楼层变量',{timeOut:3e3})},2e3)),eventOn(tavern_events.GENERATION_STARTED,q),eventOn(tavern_events.MESSAGE_SENT,q),eventOn(tavern_events.MESSAGE_SENT,G),eventOn('worldinfo_entries_loaded',Me),eventOn(tavern_events.MESSAGE_RECEIVED,M?xe:_.throttle(xe,3e3)),W=xe,eventOn(m,J),eventOn(p,L),eventOn(tavern_events.CHAT_COMPLETION_SETTINGS_READY,ae),eventOn(tavern_events.CHAT_CHANGED,ke),_.set(window.parent,'handleVariablesInMessage',G),function(){const{registerFunctionTool:e}=SillyTavern;if(!e)return void console.debug('MVU: function tools are not supported');const t=Object.freeze({$schema:'http://json-schema.org/draft-04/schema#',type:'object',additionalProperties:!1,properties:{analysis:{type:'string',minLength:1,description:'Write in ENGLISH. A compact reasoning summary that includes: (1) calculate time passed; (2) decide whether dramatic updates are allowed (special case or sufficiently long time); (3) list every variable name that appears in the <status_description> section BEFORE actual variable analysis, without revealing their contents; (4) for each variable, judge whether it satisfies its change conditions and output only Y/N without reasons; (5) only evaluate stories inside <past_observe> block.'},delta:{type:'string',minLength:0,description:'multilines Update statements, includes `_.set`,`_.insert`,`_.assign`,`_.delete`,`_.remove`,`_.add`. example: _.set(\'悠纪.好感度\',35);//愉快的一次讨论，悠纪觉得与你一起是开心的'}},required:['delta']});e({name:K,displayName:'MVU update',stealth:!0,description:'use this tool to UpdateVariable.',parameters:t,shouldRegister:()=>!!Q&&V().settings.额外模型解析配置.使用函数调用,action:te,formatMessage:()=>''})}(),eventOn(tavern_events.MESSAGE_RECEIVED,e=>{const t=V(),{启用:n}=t.settings.auto_cleanup;if(!n)return;if(SillyTavern.chat.length%5!=0)return;const s=e-a;if(s>0){const e=B(Math.max(1,s-2-2*a),s,t.settings.快照保留间隔);console.log(`[MVU]已清理 ${e} 层的消息`)}}),!1===t.settings.internal.已提醒更新了配置界面&&(toastr.info('配置界面位于酒馆扩展界面-「正则」下方, 请点开了解新功能或自定义配置','[MVU]已更新独立配置界面'),t.settings.internal.已提醒更新了配置界面=!0),!1===t.settings.internal.已提醒自动清理旧变量功能&&(toastr.info('MVU 现在可以自动清理旧变量来减少聊天文件大小; 这不会影响你回退游玩以前的楼层；在设置中开启 `变量自动清理` 启用','[MVU]已更新自动清理旧变量功能'),t.settings.internal.已提醒自动清理旧变量功能=!0),toastr.info('构建信息: 2025-10-30T15:16:46.215Z (c9674e1)','[MVU]脚本加载成功')}async function Oe(){null!==Ne&&(SillyTavern.ToolManager.parseToolCalls=Ne,Ne=null),SillyTavern.unregisterFunctionTool(K),SillyTavern.unregisterFunctionTool('mvu_updateRound'),eventClearAll()}$(()=>{!function(){const e=Z();_.set(window,'Mvu',e),_.set(window.parent,'Mvu',e),eventEmit('global_Mvu_initialized')}(),Ve(),Ie()}),$(window).on('pagehide',async()=>{Ae(),Oe(),_.unset(window.parent,'Mvu')});let Ue=SillyTavern.getCurrentChatId();function ke(e){Ue!==e&&(Ue=e,Oe(),Ie())}
//# sourceMappingURL=bundle.js.map