import * as __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_compare_versions_esm_4fbc8a69__ from "https://testingcf.jsdelivr.net/npm/compare-versions/+esm";

import * as __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_json5_esm_143ca249__ from "https://testingcf.jsdelivr.net/npm/json5/+esm";

import * as __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_mathjs_esm_aec644b1__ from "https://testingcf.jsdelivr.net/npm/mathjs/+esm";

import * as __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_pinia_esm_b723a504__ from "https://testingcf.jsdelivr.net/npm/pinia/+esm";

import * as __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_toml_esm_005ece54__ from "https://testingcf.jsdelivr.net/npm/toml/+esm";

var __webpack_modules__ = {
  "./node_modules/ts-loader/index.js??clonedRuleSet-6!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[4].use[0]!./src/Panel.vue?vue&type=script&setup=true&lang=ts": 
  /*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/ts-loader/index.js??clonedRuleSet-6!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[4].use[0]!./src/Panel.vue?vue&type=script&setup=true&lang=ts ***!
  \*********************************************************************************************************************************************************************************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/button */ "./src/button.ts");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/settings */ "./src/settings.ts");\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pinia */ "pinia");\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/*@__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    __name: \'Panel\',\n    setup(__props, { expose: __expose }) {\n        __expose();\n        const { settings } = (0,pinia__WEBPACK_IMPORTED_MODULE_3__.storeToRefs)((0,_settings__WEBPACK_IMPORTED_MODULE_2__.useSettingsStore)());\n        function showHelp() {\n            SillyTavern.callGenericPopup(`<p>为了让剧情模型更专注于剧情，你可以选择变量更新的方式：</p>\n        <ul>\n        <li><strong>随AI输出</strong>：名字中有 <code>[mvu_update]</code> 的条目将会正常发给 AI，因此 AI 将会在回复时输出变量更新分析及更新命令，进而更新变量。</li>\n        <li><strong>额外模型解析</strong>：名字中有 <code>[mvu_update]</code> 的条目不会发给 AI。在 AI 回复完成后，MVU 将会只使用名字中有 <code>[mvu_update]</code> 的条目调用额外模型专门解析变量更新。</li>\n        <li><strong>工具调用（待完成）</strong>：名字中有 <code>[mvu_update]</code> 的条目将作为工具调用的提示词发给 AI，因此 AI 将会通过工具调用来更新变量。</li>\n        </ul>\n        <hr/>\n        <p>如果要使用除<q>随AI输出</q>以外的方式，则需要作者适配世界书，添加带有 <code>[mvu_update]</code> 的条目；如果作者没有适配，则依旧会使用<q>随AI输出</q>的方式。<br>\n        具体地，MVU 变量框架的提示词分为：</p>\n        <ul>\n        <li><strong>变量列表</strong>：让 AI 知道有什么变量，如 <code>null</code>、<code>&lt;%= getvar(\'stat_data\') _%&gt;</code> 等。</li>\n        <li><strong>变量更新规则</strong>：让 AI 知道变量该如何更新，如<code>药物依赖度应该每分钟增加1点</code>等。</li>\n        <li><strong>输出规则</strong>：让 AI 知道该输出什么来表达变量发生变化，如提示词中要求输出的<code>&lt;UpdateVariable&gt;</code>块。</li>\n        </ul>\n        <p>作者需要做的，是给<q>变量更新规则</q>和<q>输出规则</q>条目的名字添加 <code>[mvu_update]</code>。</p>`, SillyTavern.POPUP_TYPE.TEXT, \'\', { allowHorizontalScrolling: true, leftAlign: true });\n        }\n        const __returned__ = { settings, showHelp, get buttons() { return _button__WEBPACK_IMPORTED_MODULE_1__.buttons; } };\n        Object.defineProperty(__returned__, \'__isScriptSetup\', { enumerable: false, value: true });\n        return __returned__;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ts-loader/index.js??clonedRuleSet-6!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[4].use[0]!./src/Panel.vue?vue&type=script&setup=true&lang=ts\n\n}');
  },
  "./node_modules/ts-loader/index.js??clonedRuleSet-6!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[4].use[0]!./src/Panel.vue?vue&type=template&id=789bc3db&ts=true": 
  /*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/ts-loader/index.js??clonedRuleSet-6!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[4].use[0]!./src/Panel.vue?vue&type=template&id=789bc3db&ts=true ***!
  \**********************************************************************************************************************************************************************************************************************************************************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   render: () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);\n\nconst _hoisted_1 = { class: "inline-drawer" };\nconst _hoisted_2 = { class: "inline-drawer-content" };\nconst _hoisted_3 = { class: "flex-container flexFlowColumn" };\nconst _hoisted_4 = {\n    class: "checkbox_label",\n    for: "mvu_notification_error"\n};\nconst _hoisted_5 = { class: "flex-container flexFlowColumn" };\nconst _hoisted_6 = { class: "flex-container flexFlowColumn" };\nconst _hoisted_7 = { class: "flex-container flexFlowColumn" };\nconst _hoisted_8 = { class: "flex-container flexFlowColumn" };\nconst _hoisted_9 = { class: "flex-container flexFlowColumn" };\nconst _hoisted_10 = { class: "flex-container flex" };\nconst _hoisted_11 = ["onClick"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n    return ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_1, [\n        _cache[17] || (_cache[17] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", { class: "inline-drawer-toggle inline-drawer-header" }, [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("b", null, "MVU 变量框架"),\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", { class: "inline-drawer-icon fa-solid fa-circle-chevron-down down" })\n        ], -1 /* CACHED */)),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_2, [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_3, [\n                _cache[7] || (_cache[7] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", null, [\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("strong", null, "通知设置")\n                ], -1 /* CACHED */)),\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("label", _hoisted_4, [\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", {\n                        id: "mvu_notification_error",\n                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => (($setup.settings.通知.变量更新出错) = $event)),\n                        type: "checkbox"\n                    }, null, 512 /* NEED_PATCH */), [\n                        [vue__WEBPACK_IMPORTED_MODULE_0__.vModelCheckbox, $setup.settings.通知.变量更新出错]\n                    ]),\n                    _cache[6] || (_cache[6] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", null, "变量更新出错时通知", -1 /* CACHED */))\n                ])\n            ]),\n            _cache[15] || (_cache[15] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("hr", null, null, -1 /* CACHED */)),\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_5, [\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", null, [\n                    _cache[8] || (_cache[8] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("strong", null, "变量更新方式", -1 /* CACHED */)),\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("i", {\n                        class: "fa-solid fa-circle-question fa-sm note-link-span",\n                        style: { "cursor": "pointer" },\n                        onClick: $setup.showHelp\n                    })\n                ]),\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("select", {\n                    id: "mvu_update_method",\n                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => (($setup.settings.更新方式) = $event)),\n                    class: "text_pole"\n                }, [...(_cache[9] || (_cache[9] = [\n                        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("option", { value: "随AI输出" }, "随AI输出", -1 /* CACHED */),\n                        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("option", { value: "额外模型解析" }, "额外模型解析", -1 /* CACHED */)\n                    ]))], 512 /* NEED_PATCH */), [\n                    [vue__WEBPACK_IMPORTED_MODULE_0__.vModelSelect, $setup.settings.更新方式]\n                ]),\n                ($setup.settings.更新方式 === \'额外模型解析\')\n                    ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: 0 }, [\n                        (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("select", {\n                            id: "mvu_extra_model_source",\n                            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => (($setup.settings.额外模型解析配置.模型来源) = $event)),\n                            class: "text_pole"\n                        }, [...(_cache[10] || (_cache[10] = [\n                                (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("option", { value: "与插头相同" }, "与插头相同", -1 /* CACHED */),\n                                (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("option", { value: "自定义" }, "自定义", -1 /* CACHED */)\n                            ]))], 512 /* NEED_PATCH */), [\n                            [vue__WEBPACK_IMPORTED_MODULE_0__.vModelSelect, $setup.settings.额外模型解析配置.模型来源]\n                        ]),\n                        ($setup.settings.额外模型解析配置.模型来源 === \'自定义\')\n                            ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: 0 }, [\n                                (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_6, [\n                                    _cache[11] || (_cache[11] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("label", { for: "mvu_api_url" }, "API 地址", -1 /* CACHED */)),\n                                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", {\n                                        id: "mvu_api_url",\n                                        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => (($setup.settings.额外模型解析配置.api地址) = $event)),\n                                        type: "text",\n                                        class: "text_pole",\n                                        placeholder: "http://localhost:1234/v1"\n                                    }, null, 512 /* NEED_PATCH */), [\n                                        [vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, $setup.settings.额外模型解析配置.api地址]\n                                    ])\n                                ]),\n                                (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_7, [\n                                    _cache[12] || (_cache[12] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("label", { for: "mvu_api_key" }, "API 密钥", -1 /* CACHED */)),\n                                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", {\n                                        id: "mvu_api_key",\n                                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => (($setup.settings.额外模型解析配置.密钥) = $event)),\n                                        type: "password",\n                                        class: "text_pole",\n                                        placeholder: "留空表示无需密钥"\n                                    }, null, 512 /* NEED_PATCH */), [\n                                        [vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, $setup.settings.额外模型解析配置.密钥]\n                                    ])\n                                ]),\n                                (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_8, [\n                                    _cache[13] || (_cache[13] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("label", { for: "mvu_model_name" }, "模型名称", -1 /* CACHED */)),\n                                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", {\n                                        id: "mvu_model_name",\n                                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => (($setup.settings.额外模型解析配置.模型名称) = $event)),\n                                        type: "text",\n                                        class: "text_pole",\n                                        placeholder: "gemini-2.5-flash"\n                                    }, null, 512 /* NEED_PATCH */), [\n                                        [vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, $setup.settings.额外模型解析配置.模型名称]\n                                    ])\n                                ])\n                            ], 64 /* STABLE_FRAGMENT */))\n                            : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true)\n                    ], 64 /* STABLE_FRAGMENT */))\n                    : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true)\n            ]),\n            _cache[16] || (_cache[16] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("hr", null, null, -1 /* CACHED */)),\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_9, [\n                _cache[14] || (_cache[14] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", null, [\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("strong", null, "修复按钮")\n                ], -1 /* CACHED */)),\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_10, [\n                    ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)($setup.buttons, (button) => {\n                        return ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {\n                            key: button.name,\n                            class: "menu_button menu_button_icon interactable",\n                            tabindex: "0",\n                            role: "button",\n                            onClick: button.function\n                        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(button.name), 9 /* TEXT, PROPS */, _hoisted_11));\n                    }), 128 /* KEYED_FRAGMENT */))\n                ])\n            ])\n        ])\n    ]));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ts-loader/index.js??clonedRuleSet-6!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[4].use[0]!./src/Panel.vue?vue&type=template&id=789bc3db&ts=true\n\n}');
  },
  "./node_modules/vue-loader/dist/exportHelper.js": 
  /*!******************************************************!*\
  !*** ./node_modules/vue-loader/dist/exportHelper.js ***!
  \******************************************************/ (__unused_webpack_module, exports) => {
    eval('{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports["default"] = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0Esa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbInNyYzovL3RhdmVybl9oZWxwZXJfdGVtcGxhdGUvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBydW50aW1lIGhlbHBlciBmb3Igc2V0dGluZyBwcm9wZXJ0aWVzIG9uIGNvbXBvbmVudHNcbi8vIGluIGEgdHJlZS1zaGFrYWJsZSB3YXlcbmV4cG9ydHMuZGVmYXVsdCA9IChzZmMsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gc2ZjLl9fdmNjT3B0cyB8fCBzZmM7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIHByb3BzKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/exportHelper.js\n\n}');
  },
  "./src/Panel.vue": 
  /*!***********************!*\
  !*** ./src/Panel.vue ***!
  \***********************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Panel_vue_vue_type_template_id_789bc3db_ts_true__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Panel.vue?vue&type=template&id=789bc3db&ts=true */ "./src/Panel.vue?vue&type=template&id=789bc3db&ts=true");\n/* harmony import */ var _Panel_vue_vue_type_script_setup_true_lang_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Panel.vue?vue&type=script&setup=true&lang=ts */ "./src/Panel.vue?vue&type=script&setup=true&lang=ts");\n/* harmony import */ var _node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");\n\n\n\n\n;\nconst __exports__ = /*#__PURE__*/(0,_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__["default"])(_Panel_vue_vue_type_script_setup_true_lang_ts__WEBPACK_IMPORTED_MODULE_1__["default"], [[\'render\',_Panel_vue_vue_type_template_id_789bc3db_ts_true__WEBPACK_IMPORTED_MODULE_0__.render],[\'__file\',"src/Panel.vue"]])\n/* hot reload */\nif (false) // removed by dead control flow\n{}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvUGFuZWwudnVlIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMEU7QUFDUDtBQUNMOztBQUU5RCxDQUE2RTtBQUM3RSxpQ0FBaUMseUZBQWUsQ0FBQyxxRkFBTSxhQUFhLG9GQUFNO0FBQzFFO0FBQ0EsSUFBSSxLQUFVLEVBQUU7QUFBQSxFQVlmOzs7QUFHRCxpRUFBZSxXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF2ZXJuX2hlbHBlcl90ZW1wbGF0ZS9zcmMvUGFuZWwudnVlPzhhYjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vUGFuZWwudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc4OWJjM2RiJnRzPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9QYW5lbC52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9QYW5lbC52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz10c1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fZmlsZScsXCJzcmMvUGFuZWwudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjc4OWJjM2RiXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnNzg5YmMzZGInLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCc3ODliYzNkYicsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vUGFuZWwudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc4OWJjM2RiJnRzPXRydWVcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignNzg5YmMzZGInLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Panel.vue\n\n}');
  },
  "./src/Panel.vue?vue&type=script&setup=true&lang=ts": 
  /*!**********************************************************!*\
  !*** ./src/Panel.vue?vue&type=script&setup=true&lang=ts ***!
  \**********************************************************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* reexport safe */ _node_modules_ts_loader_index_js_clonedRuleSet_6_node_modules_vue_loader_dist_index_js_ruleSet_1_rules_4_use_0_Panel_vue_vue_type_script_setup_true_lang_ts__WEBPACK_IMPORTED_MODULE_0__["default"])\n/* harmony export */ });\n/* harmony import */ var _node_modules_ts_loader_index_js_clonedRuleSet_6_node_modules_vue_loader_dist_index_js_ruleSet_1_rules_4_use_0_Panel_vue_vue_type_script_setup_true_lang_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/ts-loader/index.js??clonedRuleSet-6!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[4].use[0]!./Panel.vue?vue&type=script&setup=true&lang=ts */ "./node_modules/ts-loader/index.js??clonedRuleSet-6!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[4].use[0]!./src/Panel.vue?vue&type=script&setup=true&lang=ts");\n //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvUGFuZWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb00iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXZlcm5faGVscGVyX3RlbXBsYXRlL3NyYy9QYW5lbC52dWU/MzZlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC02IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbNF0udXNlWzBdIS4vUGFuZWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIjsgZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC02IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbNF0udXNlWzBdIS4vUGFuZWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9dHNcIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Panel.vue?vue&type=script&setup=true&lang=ts\n\n}');
  },
  "./src/Panel.vue?vue&type=template&id=789bc3db&ts=true": 
  /*!*************************************************************!*\
  !*** ./src/Panel.vue?vue&type=template&id=789bc3db&ts=true ***!
  \*************************************************************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    __webpack_require__.r(__webpack_exports__);
    __webpack_require__.d(__webpack_exports__, {
      render: () => _node_modules_ts_loader_index_js_clonedRuleSet_6_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_1_rules_4_use_0_Panel_vue_vue_type_template_id_789bc3db_ts_true__WEBPACK_IMPORTED_MODULE_0__.render
    });
    var _node_modules_ts_loader_index_js_clonedRuleSet_6_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_1_rules_4_use_0_Panel_vue_vue_type_template_id_789bc3db_ts_true__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/ts-loader/index.js??clonedRuleSet-6!../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[4].use[0]!./Panel.vue?vue&type=template&id=789bc3db&ts=true */ "./node_modules/ts-loader/index.js??clonedRuleSet-6!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[4].use[0]!./src/Panel.vue?vue&type=template&id=789bc3db&ts=true");
  },
  "./src/button.ts": 
  /*!***********************!*\
  !*** ./src/button.ts ***!
  \***********************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buttons: () => (/* binding */ buttons),\n/* harmony export */   registerButtons: () => (/* binding */ registerButtons)\n/* harmony export */ });\n/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/function */ \"./src/function.ts\");\n/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/schema */ \"./src/schema.ts\");\n/* harmony import */ var _update_descriptions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/update_descriptions */ \"./src/update_descriptions.ts\");\n/* harmony import */ var _variable_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/variable_init */ \"./src/variable_init.ts\");\n\n\n\n\nconst buttons = [\n    {\n        name: '重新处理变量',\n        function: async () => {\n            const last_msg = getLastMessageId();\n            if (last_msg < 1)\n                return;\n            if (SillyTavern.chat.length === 0)\n                return;\n            await updateVariablesWith(variables => {\n                _.unset(variables, `stat_data`);\n                _.unset(variables, `delta_data`);\n                _.unset(variables, `display_data`);\n                _.unset(variables, `schema`);\n                return variables;\n            }, { type: 'message', message_id: last_msg });\n            //重新处理变量\n            await (0,_function__WEBPACK_IMPORTED_MODULE_0__.handleVariablesInMessage)(getLastMessageId());\n        },\n    },\n    {\n        name: '重新读取初始变量',\n        function: async () => {\n            // 1. 创建一个新的空 GameData 并加载 InitVar 数据\n            const latest_init_data = (0,_variable_init__WEBPACK_IMPORTED_MODULE_3__.createEmptyGameData)();\n            try {\n                const hasInitData = await (0,_variable_init__WEBPACK_IMPORTED_MODULE_3__.loadInitVarData)(latest_init_data);\n                if (!hasInitData) {\n                    console.error('没有找到 InitVar 数据');\n                    toastr.error('没有找到 InitVar 数据', '', { timeOut: 3000 });\n                    return;\n                }\n            }\n            catch (e) {\n                console.error('加载 InitVar 数据失败:', e);\n                return;\n            }\n            await (0,_schema__WEBPACK_IMPORTED_MODULE_1__.reconcileAndApplySchema)(latest_init_data);\n            (0,_schema__WEBPACK_IMPORTED_MODULE_1__.cleanUpMetadata)(latest_init_data.stat_data);\n            // 2. 从最新楼层获取最新变量\n            const message_id = getLastMessageId();\n            if (message_id < 0) {\n                console.error('没有找到消息');\n                toastr.error('没有找到消息', '', { timeOut: 3000 });\n                return;\n            }\n            const latest_msg_data = await (0,_function__WEBPACK_IMPORTED_MODULE_0__.getLastValidVariable)(message_id);\n            if (!_.has(latest_msg_data, 'stat_data')) {\n                console.error('最新消息中没有找到 stat_data');\n                toastr.error('最新消息中没有 stat_data', '', { timeOut: 3000 });\n                return;\n            }\n            // 3. 产生新变量，以 latest_init_data 为基础，合并入 latest_msg_data 的内容\n            //此处 latest_init_data 内不存在复杂类型，因此可以采用 structuredClone\n            const merged_data = { stat_data: undefined, schema: undefined };\n            merged_data.stat_data = _.merge({}, latest_init_data.stat_data, latest_msg_data.stat_data);\n            merged_data.schema = _.merge({}, latest_msg_data.schema, latest_init_data.schema);\n            merged_data.initialized_lorebooks = _.merge({}, latest_init_data.initialized_lorebooks, latest_msg_data.initialized_lorebooks);\n            merged_data.display_data = structuredClone(merged_data.stat_data);\n            merged_data.delta_data = latest_msg_data.delta_data;\n            // 4-5. 遍历并更新描述字段\n            (0,_update_descriptions__WEBPACK_IMPORTED_MODULE_2__.updateDescriptions)('', latest_init_data.stat_data, latest_msg_data.stat_data, merged_data.stat_data);\n            //应用\n            await (0,_schema__WEBPACK_IMPORTED_MODULE_1__.reconcileAndApplySchema)(merged_data);\n            (0,_schema__WEBPACK_IMPORTED_MODULE_1__.cleanUpMetadata)(merged_data.stat_data);\n            // 6. 更新变量到最新消息\n            await replaceVariables(merged_data, { type: 'message', message_id: message_id });\n            // @ts-expect-error 该函数可用\n            await setChatMessage({}, message_id);\n            await replaceVariables(merged_data, { type: 'chat' });\n            console.info('InitVar更新完成');\n            toastr.success('InitVar描述已更新', '', { timeOut: 3000 });\n        },\n    },\n    {\n        name: '清除旧楼层变量',\n        function: async () => {\n            const result = (await SillyTavern.callGenericPopup('<h4>清除旧楼层变量信息以减小聊天文件大小避免手机崩溃</h4>请填写要保留变量信息的楼层数 (如 10 为保留最后 10 层)<br><strong>注意: 你将不能正常回退游玩到没保留变量信息的楼层</strong>', SillyTavern.POPUP_TYPE.INPUT, '10'));\n            if (!result) {\n                return;\n            }\n            const depth = parseInt(result);\n            if (isNaN(depth)) {\n                toastr.error(`请输入有效的楼层数, 你输入的是 '${result}'`, '清理旧楼层变量失败');\n                return;\n            }\n            SillyTavern.chat.slice(0, -depth).forEach(chat_message => {\n                if (chat_message.variables === undefined) {\n                    return;\n                }\n                chat_message.variables = _.range(0, chat_message.swipes?.length ?? 1).map(i => {\n                    if (chat_message?.variables?.[i] === undefined) {\n                        return {};\n                    }\n                    return _.omit(chat_message.variables[i], `stat_data`, `display_data`, `delta_data`, `schema`);\n                });\n            });\n            SillyTavern.saveChat().then(() => toastr.success(`已清理旧变量, 保留了最后 ${depth} 层的变量`, '清理旧楼层变量成功'));\n        },\n    },\n];\nfunction registerButtons() {\n    appendInexistentScriptButtons(buttons.map(b => ({ name: b.name, visible: false })));\n    buttons.forEach(b => {\n        eventOn(getButtonEvent(b.name), b.function);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/button.ts\n\n}");
  },
  "./src/export_globals.ts": 
  /*!*******************************!*\
  !*** ./src/export_globals.ts ***!
  \*******************************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exportGlobals: () => (/* binding */ exportGlobals)\n/* harmony export */ });\n/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/function */ \"./src/function.ts\");\n/* harmony import */ var _variable_def__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/variable_def */ \"./src/variable_def.ts\");\n/* harmony import */ var _variable_init__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/variable_init */ \"./src/variable_init.ts\");\n\n\n\nfunction createMVU() {\n    const mvu = {\n        /**\n         * 变量事件常量集合\n         * 包含三个核心事件，用于监听和响应变量系统的不同更新阶段\n         *\n         * @property {string} SINGLE_VARIABLE_UPDATED - 'mag_variable_updated'\n         * 单个变量更新时触发的事件\n         * - 事件值: 'mag_variable_updated'\n         * - 回调签名: (stat_data: Record<string, any>, path: string, oldValue: any, newValue: any) => void\n         *   - stat_data: 完整的状态数据对象\n         *   - path: 被更新的变量路径（如 'player.health' 或 'items[0].name'）\n         *   - oldValue: 更新前的值\n         *   - newValue: 更新后的新值\n         * - 触发条件: 当通过 setMvuVariable / _.set 语句更新一个变量之后， 会触发这个事件\n         * - 典型用途:\n         *   - 实现变量间的联动逻辑（如等级提升时自动增加属性）\n         *   - 如果某个变量不符合更新条件，则拒绝这次更新。\n         *\n         * @property {string} VARIABLE_UPDATE_STARTED - 'mag_variable_update_started'\n         * 批量变量更新开始时触发的事件\n         * - 事件值: 'mag_variable_update_started'\n         * - 回调签名: (variables: MvuData, out_is_updated: boolean) => void\n         *   - variables: 包含 stat_data、display_data、delta_data 的完整数据对象\n         *   - out_is_updated: 弃用\n         * - 触发时机: parseMessage 或 LLM消息回复结束 开始解析命令之前\n         * - 典型用途:\n         *   - 保存更新前的状态快照\n         *   - 初始化批处理所需的临时数据结构\n         *\n         * @property {string} VARIABLE_UPDATE_ENDED - 'mag_variable_update_ended'\n         * 批量变量更新结束时触发的事件\n         * - 事件值: 'mag_variable_update_ended'\n         * - 回调签名: (variables: MvuData, out_is_updated: boolean) => void\n         *   - variables: 更新完成后的完整数据对象\n         *     - variables.stat_data: 最新的状态数据\n         *     - variables.display_data: 包含变化描述的显示数据\n         *     - variables.delta_data: 仅包含本次更新变化的数据\n         * - 触发时机: parseMessage 或 LLM消息回复结束 完成所有命令的处理后\n         * - 典型用途:\n         *   - 对变量的值进行回滚\n         *   - 根据变量的变更更新事件触发、变量取值（如日替后更新每日任务等）\n         *\n         * @example\n         * // 1. 监听单个变量更新 - 实现变量联动\n         * eventOn(Mvu.events.SINGLE_VARIABLE_UPDATED, (stat_data, path, oldValue, newValue) => {\n         *   console.log(`[变量更新] ${path}: ${oldValue} -> ${newValue}`);\n         *\n         *   // 等级提升时的连锁反应\n         *   if (path === 'player.level' && newValue > oldValue) {\n         *     const levelUp = newValue - oldValue;\n         *     // 每级增加10点生命上限\n         *     const newMaxHealth = stat_data.player.maxHealth + (levelUp * 10);\n         *     Mvu.setMvuVariable(stat_data, 'player.maxHealth', newMaxHealth, {\n         *       reason: `升级奖励(+${levelUp}级)`\n         *     });\n         *   }\n         *\n         *   // 生命值降到0时触发死亡\n         *   if (path === 'player.health' && newValue <= 0 && oldValue > 0) {\n         *     Mvu.setMvuVariable(mvuData, 'player.status', 'dead', {\n         *       reason: '生命值耗尽',\n         *       is_recursive: true  // 允许因此再次触发 events\n         *     });\n         *   }\n         * });\n         *\n         * // 2. 监听批量更新开始 - 准备UI和状态\n         * var value_snapshot = undefined;\n         * eventOn(Mvu.events.VARIABLE_UPDATE_STARTED, (variables, out_is_updated) => {\n         *   console.log('[批量更新] 开始处理变量更新...');\n         *\n         *   // 保存老值\n         *   value_snapshot = variables.stat_data.世界线变更度;\n         * });\n         *\n         * // 3. 监听批量更新结束 - 完成后处理\n         * eventOn(Mvu.events.VARIABLE_UPDATE_ENDED, (variables, out_is_updated) => {\n         *   console.log('[批量更新] 完成，是否有更新:', out_is_updated);\n         *   //使用老值覆盖，禁止llm 更新\n         *   Mvu.setMvuVariable(variables.stat_data, '世界线变更都', value_snapshot);\n         * });\n         *\n         */\n        events: _variable_def__WEBPACK_IMPORTED_MODULE_1__.variable_events,\n        /**\n         * 解析包含变量更新命令的消息\n         * @param message - 包含 _.set() 命令的消息字符串\n         * @param old_data - 当前的 MvuData 状态\n         * @returns 如果有变量被更新则返回新的 MvuData，否则返回 undefined\n         * @example\n         * const newData = await Mvu.parseMessage(`\n         *   _.set('player.health', 100, 80);//受到伤害\n         *   _.set('player.position', \"城镇\", \"森林\");//移动\n         * `, currentData);\n         */\n        parseMessage: async function (message, old_data) {\n            const variableData = {\n                old_variables: old_data,\n            };\n            await (0,_function__WEBPACK_IMPORTED_MODULE_0__.handleVariablesInCallback)(message, variableData);\n            return variableData.new_variables;\n        },\n        /**\n         * 获取指定作用域的 MvuData\n         * @param options - 变量选项，指定获取哪个作用域的变量（chat/message/global等）\n         * @returns MvuData 对象\n         * @example\n         * const chatData = Mvu.getMvuData({ type: 'chat' });\n         * const messageData = Mvu.getMvuData({ type: 'message', message_id: 'latest' });\n         */\n        getMvuData: function (options) {\n            const result = getVariables(options);\n            return result;\n        },\n        /**\n         * 替换指定作用域的 MvuData\n         * @param mvu_data - 要设置的新 MvuData\n         * @param options - 变量选项，指定替换哪个作用域的变量\n         * @example\n         * await Mvu.replaceMvuData(newData, { type: 'chat' });\n         */\n        replaceMvuData: async function (mvu_data, options) {\n            await replaceVariables(mvu_data, options);\n        },\n        /**\n         * 获取当前消息的 MvuData\n         * @returns 当前消息的 MvuData 对象\n         * @example\n         * const currentData = Mvu.getCurrentMvuData();\n         */\n        getCurrentMvuData: function () {\n            const variables = getVariables({ type: 'message', message_id: getCurrentMessageId() });\n            return variables;\n        },\n        /**\n         * 替换当前消息的 MvuData\n         * @param mvu_data - 要设置的新 MvuData\n         * @example\n         * await Mvu.replaceCurrentMvuData(updatedData);\n         */\n        replaceCurrentMvuData: async function (mvu_data) {\n            await replaceVariables(mvu_data, {\n                type: 'message',\n                message_id: getCurrentMessageId(),\n            });\n        },\n        /**\n         * 重新加载初始变量数据\n         * @param mvu_data - 要重新加载初始数据的 MvuData 对象\n         * @returns 是否加载成功\n         * @example\n         * const success = await Mvu.reloadInitVar(mvuData);\n         */\n        reloadInitVar: async function (mvu_data) {\n            return await (0,_variable_init__WEBPACK_IMPORTED_MODULE_2__.loadInitVarData)(mvu_data);\n        },\n        /**\n         * 设置单个变量的值\n         * @param mvu_data - 要更新的 MvuData 对象\n         * @param path - 变量路径，支持嵌套路径如 \"player.health\" 或数组索引 \"items[0]\"\n         * @param new_value - 新值\n         * @param options - 可选参数\n         * @param options.reason - 更新原因，会显示在 display_data 中\n         * @param options.is_recursive - 是否触发 mag_variable_updated 事件，默认 false\n         * @returns 更新是否成功\n         * @example\n         * // 简单更新\n         * await Mvu.setMvuVariable(data, 'player.health', 80);\n         *\n         * // 带原因的更新\n         * await Mvu.setMvuVariable(data, 'player.health', 80, { reason: '受到伤害' });\n         *\n         * // 触发事件的更新\n         * await Mvu.setMvuVariable(data, 'player.level', 2, {\n         *   reason: '升级',\n         *   is_recursive: true\n         * });\n         *\n         */\n        setMvuVariable: async function (mvu_data, path, new_value, { reason = '', is_recursive = false } = {}) {\n            return await (0,_function__WEBPACK_IMPORTED_MODULE_0__.updateVariable)(mvu_data.stat_data, path, new_value, reason, is_recursive);\n        },\n        /**\n         * 获取变量的值\n         * @param mvu_data - MvuData 对象\n         * @param path - 变量路径，支持嵌套路径\n         * @param options - 可选参数\n         * @param options.category - 从哪个数据类别获取：'stat'(默认)/'display'/'delta'\n         * @param options.default_value - 当路径不存在时返回的默认值\n         * @returns 变量值。如果是 ValueWithDescription 类型，返回第一个元素（实际值）\n         * @example\n         * // 获取 stat_data 中的值\n         * const health = Mvu.getMvuVariable(data, 'player.health');\n         *\n         * // 获取 display_data 中的显示值\n         * const healthDisplay = Mvu.getMvuVariable(data, 'player.health', {\n         *   category: 'display'\n         * });\n         *\n         * // 带默认值\n         * const score = Mvu.getMvuVariable(data, 'player.score', {\n         *   default_value: 0\n         * });\n         */\n        getMvuVariable: function (mvu_data, path, { category = 'stat', default_value = undefined, } = {}) {\n            let data;\n            switch (category) {\n                case 'stat':\n                    data = mvu_data.stat_data;\n                    break;\n                case 'display':\n                    data = mvu_data.display_data;\n                    break;\n                case 'delta':\n                    data = mvu_data.delta_data;\n                    break;\n            }\n            const value = _.get(data, path, default_value);\n            /* 如果是 VWD，取第一个元素 */\n            if ((0,_variable_def__WEBPACK_IMPORTED_MODULE_1__.isValueWithDescription)(value)) {\n                return value[0];\n            }\n            /* 否则直接返回值本身 */\n            return value;\n        },\n        /**\n         * 获取指定类别的完整数据记录\n         * @param mvu_data - MvuData 对象\n         * @param category - 数据类别：'stat'/'display'/'delta'\n         * @returns 对应类别的完整数据记录对象\n         * @example\n         * // 获取所有状态数据\n         * const allStatData = Mvu.getRecordFromMvuData(data, 'stat');\n         *\n         * // 获取所有显示数据\n         * const allDisplayData = Mvu.getRecordFromMvuData(data, 'display');\n         *\n         * // 获取所有增量数据\n         * const allDeltaData = Mvu.getRecordFromMvuData(data, 'delta');\n         *\n         * @note 通常用于 LLM 准备 foreach 数据时使用\n         */\n        getRecordFromMvuData: function (mvu_data, category) {\n            return (0,_variable_def__WEBPACK_IMPORTED_MODULE_1__.extractRecord)(category, mvu_data);\n        },\n    };\n    return mvu;\n}\nfunction exportGlobals() {\n    const mvu = createMVU();\n    _.set(window, 'Mvu', mvu);\n    _.set(window.parent, 'Mvu', mvu);\n    eventEmit('global_Mvu_initialized');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/export_globals.ts\n\n}");
  },
  "./src/function.ts": 
  /*!*************************!*\
  !*** ./src/function.ts ***!
  \*************************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyTemplate: () => (/* binding */ applyTemplate),\n/* harmony export */   extractCommands: () => (/* binding */ extractCommands),\n/* harmony export */   getLastValidVariable: () => (/* binding */ getLastValidVariable),\n/* harmony export */   handleVariablesInCallback: () => (/* binding */ handleVariablesInCallback),\n/* harmony export */   handleVariablesInMessage: () => (/* binding */ handleVariablesInMessage),\n/* harmony export */   parseCommandValue: () => (/* binding */ parseCommandValue),\n/* harmony export */   parseParameters: () => (/* binding */ parseParameters),\n/* harmony export */   trimQuotesAndBackslashes: () => (/* binding */ trimQuotesAndBackslashes),\n/* harmony export */   updateVariable: () => (/* binding */ updateVariable),\n/* harmony export */   updateVariables: () => (/* binding */ updateVariables)\n/* harmony export */ });\n/* harmony import */ var _variable_def__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/variable_def */ \"./src/variable_def.ts\");\n/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mathjs */ \"mathjs\");\n/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/schema */ \"./src/schema.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/settings */ \"./src/settings.ts\");\n\n\n\n\nfunction trimQuotesAndBackslashes(str) {\n    if (!_.isString(str))\n        return str;\n    // Regular expression to match backslashes and quotes (including backticks) at the beginning and end\n    return str.replace(/^[\\\\\"'` ]*(.*?)[\\\\\"'` ]*$/, '$1');\n}\n/**\n * 应用模板到值上，值的属性优先级高于模板\n * @param value 要应用模板的值\n * @param template 模板 (TemplateType | undefined)\n * @param strict_array_cast 是否开启严格模式，开启后不允许 primitive type -> [primitive type] 的隐式转换\n * @param array_merge_concat 指明数组的 合并 行为是指 覆盖 还是 拼接，默认拼接。\n * @returns 合并后的值\n */\nfunction applyTemplate(value, template, strict_array_cast = false, array_merge_concat = true) {\n    // 如果没有模板，直接返回原值\n    if (!template) {\n        return value;\n    }\n    // 检查类型是否匹配\n    const value_is_object = _.isObject(value) && !Array.isArray(value) && !_.isDate(value);\n    const value_is_array = Array.isArray(value);\n    const template_is_array = Array.isArray(template);\n    if (value_is_object && !template_is_array) {\n        // value 是对象，template 是 StatData（对象）\n        // 先应用模板，再应用值，确保值的优先级更高\n        return _.merge({}, template, value);\n    }\n    else if (value_is_array && template_is_array) {\n        // 都是数组，进行合并\n        if (array_merge_concat)\n            return _.concat(value, template);\n        return _.merge([], template, value);\n    }\n    else if (((value_is_object || value_is_array) && template_is_array !== value_is_array) ||\n        (!value_is_object && !value_is_array && _.isObject(template) && !Array.isArray(template))) {\n        // 类型不匹配\n        console.error(`Template type mismatch: template is ${template_is_array ? 'array' : 'object'}, but value is ${value_is_array ? 'array' : 'object'}. Skipping template merge.`);\n        return value;\n    }\n    else if (!value_is_object && !value_is_array && template_is_array) {\n        // 特殊情况：值是原始类型（字面量），模板是数组\n        // 当作 [value] 进行数组的合并\n        if (strict_array_cast)\n            //严格模式不提供 primitive type -> [primitive type] 的转换\n            return value;\n        if (array_merge_concat)\n            return _.concat([value], template);\n        return _.merge([], template, [value]);\n    }\n    else {\n        // 其他情况：值是原始类型，模板不是数组，不应用模板\n        return value;\n    }\n}\n// 一个更安全的、用于解析命令中值的辅助函数\n// 它会尝试将字符串解析为 JSON, 布尔值, null, 数字, 或数学表达式\nfunction parseCommandValue(valStr) {\n    if (typeof valStr !== 'string')\n        return valStr;\n    const trimmed = valStr.trim();\n    // 检查布尔值/null/undefined\n    if (trimmed === 'true')\n        return true;\n    if (trimmed === 'false')\n        return false;\n    if (trimmed === 'null')\n        return null;\n    if (trimmed === 'undefined')\n        return undefined;\n    try {\n        // 如果字符串能被 JSON.parse 解析，说明它是一个标准格式，直接返回解析结果\n        return JSON.parse(trimmed);\n    }\n    catch (e) {\n        // Handle JavaScript array or object literals\n        if ((trimmed.startsWith('{') && trimmed.endsWith('}')) ||\n            (trimmed.startsWith('[') && trimmed.endsWith(']'))) {\n            try {\n                // Safely evaluate literals using a function constructor\n                const result = new Function(`return ${trimmed};`)();\n                if (_.isObject(result) || Array.isArray(result)) {\n                    return result;\n                }\n            }\n            catch (err) {\n                // 如果解析失败，说明它可能是一个未加引号的字符串或数学表达式，继续往下走\n            }\n        }\n    }\n    // 如果代码走到这里，说明 trimmed 是一个未加引号的字符串，例如：\n    // 'hello_world', '10 + 2', 'sqrt(16)'\n    try {\n        // 创建一个 scope 对象，将多种数学库/对象注入到 mathjs 的执行环境中，\n        // 以便统一处理不同风格的数学表达式。\n        const scope = {\n            // 支持 JavaScript 标准的 Math 对象 (e.g., Math.sqrt(), Math.PI)\n            Math: Math,\n            // 支持 Python 风格的 math 库用法 (e.g., math.sqrt(), math.pi)，\n            // 这在 LLM 生成的代码中很常见。\n            // 'math' 是我们导入的 mathjs 库本身。\n            math: mathjs__WEBPACK_IMPORTED_MODULE_1__,\n        };\n        // 尝试使用 mathjs 进行数学求值\n        // math.evaluate 对于无法识别为表达式的纯字符串会抛出错误\n        const result = mathjs__WEBPACK_IMPORTED_MODULE_1__.evaluate(trimmed, scope);\n        // 如果结果是 mathjs 的复数或矩阵对象，则将其转换为字符串表示形式\n        if (mathjs__WEBPACK_IMPORTED_MODULE_1__.isComplex(result) || mathjs__WEBPACK_IMPORTED_MODULE_1__.isMatrix(result)) {\n            return result.toString();\n        }\n        // 避免将单个单词的字符串（mathjs可能将其识别为符号）作为 undefined 返回\n        if (result === undefined && !/^[a-zA-Z_]+$/.test(trimmed)) {\n            return trimmed; // 如果是 undefined 但不是一个简单的符号名，则可能是解析错误\n        }\n        if (result !== undefined) {\n            // 使用 toPrecision 来处理浮点数精度造成的误差问题\n            return parseFloat(result.toPrecision(12));\n        }\n    }\n    catch (err) {\n        // 如果 math.evaluate 失败，说明它不是一个有效的表达式，\n        // 那么它就是一个普通的未加引号的字符串。\n    }\n    // 实验性功能，暂不启用\n    // 尝试将字符串解析为日期对象，用于传入_.add直接以毫秒数更新时间，如 `_.add('当前时间', 10 * 60 * 1000);`\n    // 此检查用于识别日期字符串（例如 \"2024-01-01T12:00:00Z\"）\n    // `isNaN(Number(trimmed))`确保纯数字字符串（如 \"12345\"）不会被错误地解析为日期\n    /*\n    if (isNaN(Number(trimmed))) {\n        const potentialDate = new Date(trimQuotesAndBackslashes(trimmed));\n        if (!isNaN(potentialDate.getTime())) {\n            return potentialDate;\n        }\n    }\n    */\n    try {\n        // 尝试 YAML.parse\n        return YAML.parse(trimmed);\n    }\n    catch (e) {\n        /* empty */\n    }\n    // 最终，返回这个去除了首尾引号的字符串\n    return trimQuotesAndBackslashes(valStr);\n}\n/**\n * 从输入文本中提取所有 _.set() 调用\n *\n * 问题背景：\n * 原本使用正则表达式 /_\\.set\\(([\\s\\S]*?)\\);/ 来匹配，但这种非贪婪匹配会在遇到\n * 嵌套的 ); 时提前结束。例如：\n * _.set('path', [\"text with _.set('inner',null);//comment\"], []);\n * 会在 \"comment\") 处错误地结束匹配\n *\n * 解决方案：\n * 使用状态机方法，通过计数括号配对来准确找到 _.set() 调用的结束位置\n */\n// 将 extractSetCommands 扩展为 extractCommands 以支持多种命令\nfunction extractCommands(inputText) {\n    const results = [];\n    let i = 0;\n    while (i < inputText.length) {\n        // 循环处理整个输入文本，直到找不到更多命令\n        // 使用正则匹配 _.set(、_.assign(、_.remove( 或 _.add(，重构后支持多种命令\n        const setMatch = inputText\n            .substring(i)\n            .match(/_\\.(set|insert|assign|remove|unset|delete|add)\\(/);\n        if (!setMatch || setMatch.index === undefined) {\n            // 没有找到匹配的命令，退出循环，防止无限循环\n            break;\n        }\n        // 提取命令类型（set、assign、remove 或 add），并计算命令的起始位置\n        const commandType = setMatch[1];\n        const setStart = i + setMatch.index;\n        // 计算开括号位置，用于后续提取参数\n        const openParen = setStart + setMatch[0].length;\n        // 使用 findMatchingCloseParen 查找匹配的闭括号，解决原正则匹配在嵌套结构（如 _.set('path', ['inner);'])）中提前结束的问题\n        const closeParen = findMatchingCloseParen(inputText, openParen);\n        if (closeParen === -1) {\n            // 找不到闭括号，说明命令格式错误\n            // 跳过此无效命令，并从开括号后继续搜索，以防无限循环\n            i = openParen; // 从开括号后继续搜索\n            continue; // 继续 while 循环，寻找下一个命令\n        }\n        // 检查闭括号后是否紧跟分号，确保命令语法完整，防止误解析字符串中的类似结构\n        let endPos = closeParen + 1;\n        if (endPos >= inputText.length || inputText[endPos] !== ';') {\n            // 没有分号，命令无效，跳到闭括号后继续搜索，避免误解析\n            i = closeParen + 1;\n            continue;\n        }\n        endPos++; // 包含分号，更新命令结束位置\n        // 提取可能的注释（// 开头），用于记录命令的 reason\n        let comment = '';\n        const potentialComment = inputText.substring(endPos).match(/^\\s*\\/\\/(.*)/);\n        if (potentialComment) {\n            // 提取注释内容并去除首尾空格，更新结束位置\n            comment = potentialComment[1].trim();\n            endPos += potentialComment[0].length;\n        }\n        // 提取完整命令字符串，用于返回结果中的 fullMatch 字段，便于追踪原始内容\n        const fullMatch = inputText.substring(setStart, endPos);\n        // 提取参数字符串，位于开括号和闭括号之间\n        const paramsString = inputText.substring(openParen, closeParen);\n        // 使用 parseParameters 解析参数，支持嵌套结构（如数组、对象）\n        const params = parseParameters(paramsString);\n        // 验证命令有效性，根据命令类型检查参数数量，防止无效命令进入结果\n        let isValid = false;\n        if (commandType === 'set' && params.length >= 2)\n            isValid = true; // _.set 至少需要路径和值\n        else if (commandType === 'assign' && params.length >= 2)\n            isValid = true; // _.assign 支持两种参数格式\n        else if (commandType === 'insert' && params.length >= 2)\n            isValid = true; // _.insert 支持两种参数格式\n        else if (commandType === 'remove' && params.length >= 1)\n            isValid = true; // _.remove 至少需要路径\n        else if (commandType === 'unset' && params.length >= 1)\n            isValid = true; // _.unset 至少需要路径\n        else if (commandType === 'delete' && params.length >= 1)\n            isValid = true; // _.delete 至少需要路径\n        else if (commandType === 'add' && /*params.length === 1 || */ params.length === 2)\n            isValid = true; // _.add 需要1个或2个参数\n        if (isValid) {\n            // 命令有效，添加到结果列表，包含命令类型、完整匹配、参数和注释\n            results.push({ command: commandType, fullMatch, args: params, reason: comment });\n        }\n        // 更新搜索索引到命令末尾，继续查找下一个命令\n        i = endPos;\n    }\n    // 返回所有解析出的有效命令\n    return results;\n}\n/**\n * 辅助函数：找到匹配的闭括号\n *\n * 算法说明：\n * 1. 使用括号计数器，遇到 ( 加1，遇到 ) 减1\n * 2. 当计数器归零时，找到了匹配的闭括号\n * 3. 重要：忽略引号内的括号，避免字符串内容干扰匹配\n *\n * @param str 要搜索的字符串\n * @param startPos 开始括号的位置\n * @returns 匹配的闭括号位置，如果找不到返回 -1\n */\nfunction findMatchingCloseParen(str, startPos) {\n    let parenCount = 1; // 从1开始，因为已经有一个开括号\n    let inQuote = false;\n    let quoteChar = '';\n    for (let i = startPos; i < str.length; i++) {\n        const char = str[i];\n        const prevChar = i > 0 ? str[i - 1] : '';\n        // 处理引号状态\n        // 支持三种引号：双引号、单引号和反引号（模板字符串）\n        // 注意：需要检查前一个字符不是反斜杠，以正确处理转义的引号\n        if ((char === '\"' || char === \"'\" || char === '`') && prevChar !== '\\\\') {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            }\n            else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n        // 只在不在引号内时计算括号\n        // 这确保了像 \"text with )\" 这样的字符串不会影响括号匹配\n        if (!inQuote) {\n            if (char === '(') {\n                parenCount++;\n            }\n            else if (char === ')') {\n                parenCount--;\n                if (parenCount === 0) {\n                    return i;\n                }\n            }\n        }\n    }\n    return -1; // 没有找到匹配的闭括号\n}\n// 解析参数字符串，处理嵌套结构\n// 增加了对圆括号的层级计数。\nfunction parseParameters(paramsString) {\n    const params = [];\n    let currentParam = '';\n    let inQuote = false;\n    let quoteChar = '';\n    let bracketCount = 0;\n    let braceCount = 0;\n    let parenCount = 0;\n    for (let i = 0; i < paramsString.length; i++) {\n        const char = paramsString[i];\n        // 处理引号（包括反引号）\n        if ((char === '\"' || char === \"'\" || char === '`') &&\n            (i === 0 || paramsString[i - 1] !== '\\\\')) {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            }\n            else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n        if (!inQuote) {\n            // 处理圆括号 (函数调用、数学运算等)\n            if (char === '(')\n                parenCount++;\n            if (char === ')')\n                parenCount--;\n            // 处理方括号 (数组)\n            if (char === '[')\n                bracketCount++;\n            if (char === ']')\n                bracketCount--;\n            // 处理花括号 (对象)\n            if (char === '{')\n                braceCount++;\n            if (char === '}')\n                braceCount--;\n        }\n        // 处理参数分隔符\n        // 现在只有当所有括号都匹配闭合时，逗号才被视为分隔符\n        if (char === ',' &&\n            !inQuote &&\n            parenCount === 0 &&\n            bracketCount === 0 &&\n            braceCount === 0) {\n            params.push(currentParam.trim());\n            currentParam = '';\n            continue;\n        }\n        currentParam += char;\n    }\n    // 添加最后一个参数\n    if (currentParam.trim()) {\n        params.push(currentParam.trim());\n    }\n    return params;\n}\nasync function getLastValidVariable(message_id) {\n    return (structuredClone(_(SillyTavern.chat)\n        .slice(0, message_id + 1)\n        .map(chat_message => _.get(chat_message, ['variables', chat_message.swipe_id ?? 0]))\n        .findLast(variables => _.has(variables, 'stat_data'))) ?? getVariables());\n}\nfunction pathFix(path) {\n    const segments = [];\n    let currentSegment = '';\n    let inQuotes = false;\n    let quoteChar = '';\n    for (let i = 0; i < path.length; i++) {\n        const char = path[i];\n        // Handle quotes\n        if ((char === '\"' || char === \"'\") && (i === 0 || path[i - 1] !== '\\\\')) {\n            if (!inQuotes) {\n                inQuotes = true;\n                quoteChar = char;\n            }\n            else if (char === quoteChar) {\n                inQuotes = false;\n            }\n            else {\n                currentSegment += char;\n            }\n        }\n        else if (char === '.' && !inQuotes) {\n            segments.push(currentSegment);\n            currentSegment = '';\n        }\n        else {\n            currentSegment += char;\n        }\n    }\n    if (currentSegment) {\n        segments.push(currentSegment);\n    }\n    return segments.join('.');\n}\n/**\n * MVU 风格的变量更新操作，同时会更新 display_data/delta_data\n * @param stat_data 当前的变量状态，来源应当是 mag_variable_updated 回调中提供的 stat_data。其他来源则不会修改 display_data 等。\n * @param path 要更改的变量路径\n * @param new_value 新值\n * @param reason 修改原因（可选，默认为空）\n * @param is_recursive 此次修改是否允许触发 mag_variable_updated 回调（默认不允许）\n */\nasync function updateVariable(stat_data, path, new_value, reason = '', is_recursive = false) {\n    const display_data = stat_data.$internal?.display_data;\n    const delta_data = stat_data.$internal?.delta_data;\n    if (_.has(stat_data, path)) {\n        const currentValue = _.get(stat_data, path);\n        if (Array.isArray(currentValue) && currentValue.length === 2) {\n            //VWD 处理\n            const oldValue = _.cloneDeep(currentValue[0]);\n            currentValue[0] = new_value;\n            _.set(stat_data, path, currentValue);\n            const reason_str = reason ? `(${reason})` : '';\n            const display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${trimQuotesAndBackslashes(JSON.stringify(new_value))} ${reason_str}`;\n            if (display_data)\n                _.set(display_data, path, display_str);\n            if (delta_data)\n                _.set(delta_data, path, display_str);\n            console.info(`Set '${path}' to '${trimQuotesAndBackslashes(JSON.stringify(new_value))}' ${reason_str}`);\n            if (is_recursive)\n                await eventEmit(_variable_def__WEBPACK_IMPORTED_MODULE_0__.variable_events.SINGLE_VARIABLE_UPDATED, stat_data, path, oldValue, new_value);\n            return true;\n        }\n        else {\n            const oldValue = _.cloneDeep(currentValue);\n            _.set(stat_data, path, new_value);\n            const reason_str = reason ? `(${reason})` : '';\n            const stringNewValue = trimQuotesAndBackslashes(JSON.stringify(new_value));\n            const display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${stringNewValue} ${reason_str}`;\n            if (display_data)\n                _.set(display_data, path, display_str);\n            if (delta_data)\n                _.set(delta_data, path, display_str);\n            console.info(`Set '${path}' to '${stringNewValue}' ${reason_str}`);\n            if (is_recursive)\n                await eventEmit(_variable_def__WEBPACK_IMPORTED_MODULE_0__.variable_events.SINGLE_VARIABLE_UPDATED, stat_data, path, oldValue, new_value);\n            return true;\n        }\n    }\n    return false;\n}\n// 重构 updateVariables 以处理更多命令\nasync function updateVariables(current_message_content, variables) {\n    const out_is_modifed = false;\n    // 深拷贝变量对象，生成状态快照，用于记录显示数据\n    const out_status = _.cloneDeep(variables);\n    // 初始化增量状态对象，记录变化详情\n    const delta_status = { stat_data: {} };\n    // 重构新增：统一处理宏替换，确保命令中的宏（如 ${variable}）被替换，提升一致性\n    const processed_message_content = substitudeMacros(current_message_content);\n    // 使用重构后的 extractCommands 提取所有命令\n    const commands = extractCommands(processed_message_content);\n    // 触发变量更新开始事件，通知外部系统\n    variables.stat_data.$internal = {\n        display_data: out_status.stat_data,\n        delta_data: delta_status.stat_data || {},\n    };\n    await eventEmit(_variable_def__WEBPACK_IMPORTED_MODULE_0__.variable_events.VARIABLE_UPDATE_STARTED, variables);\n    let variable_modified = false;\n    let error_info;\n    let current_command;\n    const outError = function (message) {\n        console.warn(message);\n        error_info = {\n            error_last: message,\n            error_command: current_command,\n        };\n    };\n    const schema = variables.schema; // 获取 schema，可能为 undefined\n    const strict_template = schema?.strictTemplate ?? false;\n    const concat_template_array = schema?.concatTemplateArray ?? true;\n    const strict_set = schema?.strictSet ?? false;\n    for (const command of commands) {\n        // 遍历所有命令，逐一处理\n        // 修正路径格式，去除首尾引号和反斜杠，确保路径有效\n        const path = pathFix(trimQuotesAndBackslashes(command.args[0]));\n        // 生成原因字符串，用于日志和显示\n        const reason_str = command.reason ? `(${command.reason})` : '';\n        let display_str = ''; // 初始化显示字符串，记录操作详情\n        current_command = command;\n        switch (command.command // 根据命令类型执行不同操作\n        ) {\n            case 'set': {\n                // _.has 检查，确保路径存在\n                if (!_.has(variables.stat_data, path)) {\n                    outError(`Path '${path}' does not exist in stat_data, skipping set command ${reason_str}`);\n                    continue;\n                }\n                // 获取路径上的旧值，可能为 undefined（路径不存在）\n                let oldValue = _.get(variables.stat_data, path);\n                // 支持两种格式：_.set(path, newValue) 或 _.set(path, oldValue, newValue)\n                const newValueStr = command.args.length >= 3 ? command.args[2] : command.args[1];\n                // 解析新值，支持字符串、数字、布尔值、JSON 对象等\n                let newValue = parseCommandValue(newValueStr);\n                // 在写入前，将 Date 对象序列化为 ISO 字符串\n                if (newValue instanceof Date) {\n                    newValue = newValue.toISOString();\n                }\n                let isPathVWD = false;\n                if (!strict_set &&\n                    Array.isArray(oldValue) &&\n                    oldValue.length === 2 &&\n                    typeof oldValue[1] === 'string' &&\n                    !Array.isArray(oldValue[0])) {\n                    // 处理 ValueWithDescription<T> 类型，更新数组第一个元素\n                    // 仅当旧值为数字且新值不为 null 时，才强制转换为数字\n                    // 这允许将数字字段设置为 null (例如角色死亡后好感度变为 null)\n                    const oldValueCopy = _.cloneDeep(oldValue[0]);\n                    oldValue[0] =\n                        typeof oldValue[0] === 'number' && newValue !== null\n                            ? Number(newValue)\n                            : newValue;\n                    oldValue = oldValueCopy;\n                    isPathVWD = true;\n                }\n                else if (typeof oldValue === 'number' && newValue !== null) {\n                    _.set(variables.stat_data, path, Number(newValue));\n                }\n                else {\n                    // 其他情况直接设置新值，支持任意类型\n                    _.set(variables.stat_data, path, newValue);\n                }\n                // 获取最终设置的新值，用于日志和事件\n                let finalNewValue = _.get(variables.stat_data, path);\n                (0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.assertVWD)(isPathVWD, finalNewValue);\n                if (isPathVWD) {\n                    finalNewValue = finalNewValue[0];\n                }\n                // 检查是否为 ValueWithDescription 类型，以优化显示\n                const isStrict = !strict_set;\n                if (isStrict &&\n                    (0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isValueWithDescriptionStatData)(oldValue) &&\n                    Array.isArray(finalNewValue)) {\n                    // 如果是 ValueWithDescription，只显示值的变化\n                    display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue[0]))}->${trimQuotesAndBackslashes(JSON.stringify(finalNewValue[0]))} ${reason_str}`;\n                }\n                else {\n                    // 否则，按常规显示\n                    display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${trimQuotesAndBackslashes(JSON.stringify(finalNewValue))} ${reason_str}`;\n                }\n                variable_modified = true; // 标记变量已修改\n                // 记录操作日志，便于调试\n                console.info(`Set '${path}' to '${JSON.stringify(finalNewValue)}' ${reason_str}`);\n                // 触发单变量更新事件，通知外部系统\n                await eventEmit(_variable_def__WEBPACK_IMPORTED_MODULE_0__.variable_events.SINGLE_VARIABLE_UPDATED, variables.stat_data, path, oldValue, finalNewValue);\n                break;\n            }\n            case 'insert':\n            case 'assign': {\n                // 检查目标路径是否指向一个集合（数组或对象）\n                // 如果路径已存在且其值为原始类型（字符串、数字等），则跳过此命令，以防止结构污染\n                const targetPath = path;\n                // 统一获取目标值和目标Schema，优雅地处理根路径\n                const existingValue = targetPath === ''\n                    ? variables.stat_data\n                    : _.get(variables.stat_data, targetPath);\n                const targetSchema = (0,_schema__WEBPACK_IMPORTED_MODULE_2__.getSchemaForPath)(schema, targetPath);\n                // 验证1：目标是否为原始类型？如果是，则无法插入。\n                if (existingValue !== null &&\n                    !Array.isArray(existingValue) &&\n                    !_.isObject(existingValue)) {\n                    outError(`Cannot assign into path '${targetPath}' because it holds a primitive value (${typeof existingValue}). Operation skipped. ${reason_str}`);\n                    continue;\n                }\n                // 验证2：Schema 规则\n                if (targetSchema) {\n                    if (targetSchema.type === 'object' && targetSchema.extensible === false) {\n                        if (command.args.length === 2) {\n                            // 合并\n                            outError(`SCHEMA VIOLATION: Cannot merge data into non-extensible object at path '${targetPath}'. ${reason_str}`);\n                            continue;\n                        }\n                        if (command.args.length >= 3) {\n                            // 插入键\n                            const newKey = String(parseCommandValue(command.args[1]));\n                            if (!_.has(targetSchema.properties, newKey)) {\n                                outError(`SCHEMA VIOLATION: Cannot assign new key '${newKey}' into non-extensible object at path '${targetPath}'. ${reason_str}`);\n                                continue;\n                            }\n                        }\n                    }\n                    else if (targetSchema.type === 'array' &&\n                        (targetSchema.extensible === false || targetSchema.extensible === undefined)) {\n                        outError(`SCHEMA VIOLATION: Cannot assign elements into non-extensible array at path '${targetPath}'. ${reason_str}`);\n                        continue;\n                    }\n                }\n                else if (\n                // 增加 targetPath !== '' 条件，防止对根路径进行父路径检查\n                targetPath !== '' &&\n                    !_.get(variables.stat_data, _.toPath(targetPath).slice(0, -1).join('.'))) {\n                    // 验证3：如果要插入到新路径，确保其父路径存在且可扩展\n                    outError(`Cannot assign into non-existent path '${targetPath}' without an extensible parent. ${reason_str}`);\n                    continue;\n                }\n                // --- 所有验证通过，现在可以安全执行 ---\n                // 深拷贝旧值，防止直接修改影响后续比较\n                const oldValue = _.cloneDeep(_.get(variables.stat_data, path));\n                let successful = false; // 标记插入是否成功\n                if (command.args.length === 2) {\n                    // _.assign('path.to.array', value)\n                    // 解析插入值，支持复杂类型\n                    let valueToAssign = parseCommandValue(command.args[1]);\n                    // 在写入前，将 Date 对象（或数组中的Date）序列化\n                    if (valueToAssign instanceof Date) {\n                        valueToAssign = valueToAssign.toISOString();\n                    }\n                    else if (Array.isArray(valueToAssign)) {\n                        valueToAssign = valueToAssign.map(item => item instanceof Date ? item.toISOString() : item);\n                    }\n                    // 获取目标集合，可能为数组或对象\n                    let collection = targetPath === '' ? variables.stat_data : _.get(variables.stat_data, path);\n                    // 如果目标不存在，初始化为空数组或对象\n                    if (!Array.isArray(collection) && !_.isObject(collection)) {\n                        collection = Array.isArray(valueToAssign) ? [] : {};\n                        _.set(variables.stat_data, path, collection);\n                    }\n                    if (Array.isArray(collection)) {\n                        // 目标是数组，追加元素\n                        // 检查是否有模板并应用\n                        const template = targetSchema && (0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isArraySchema)(targetSchema)\n                            ? targetSchema.template\n                            : undefined;\n                        valueToAssign = applyTemplate(valueToAssign, template, strict_template, concat_template_array);\n                        collection.push(valueToAssign);\n                        display_str = `ASSIGNED ${JSON.stringify(valueToAssign)} into array '${path}' ${reason_str}`;\n                        successful = true;\n                    }\n                    else if (_.isObject(collection)) {\n                        // 目标是对象，合并属性\n                        // 注意：对象合并时不应用模板，因为无法明确确定增加的元素\n                        // 模板只在明确添加单个新属性时应用（如使用三参数的 assign）\n                        if (_.isObject(valueToAssign) && !Array.isArray(valueToAssign)) {\n                            _.merge(collection, valueToAssign);\n                            display_str = `MERGED object ${JSON.stringify(valueToAssign)} into object '${path}' ${reason_str}`;\n                            successful = true;\n                        }\n                        else {\n                            // 不支持将数组或非对象合并到对象，记录错误\n                            outError(`Cannot merge ${Array.isArray(valueToAssign) ? 'array' : 'non-object'} into object at '${path}'`);\n                            continue;\n                        }\n                    }\n                }\n                else if (command.args.length >= 3) {\n                    // _.assign('path', key/index, value)\n                    // 解析插入值和键/索引\n                    let valueToAssign = parseCommandValue(command.args[2]);\n                    const keyOrIndex = parseCommandValue(command.args[1]);\n                    // 在写入前，将 Date 对象（或数组中的Date）序列化\n                    if (valueToAssign instanceof Date) {\n                        valueToAssign = valueToAssign.toISOString();\n                    }\n                    else if (Array.isArray(valueToAssign)) {\n                        valueToAssign = valueToAssign.map(item => item instanceof Date ? item.toISOString() : item);\n                    }\n                    let collection = targetPath === '' ? variables.stat_data : _.get(variables.stat_data, path);\n                    // 获取模板\n                    const template = targetSchema &&\n                        ((0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isArraySchema)(targetSchema) || (0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isObjectSchema)(targetSchema))\n                        ? targetSchema.template\n                        : undefined;\n                    if (Array.isArray(collection) && typeof keyOrIndex === 'number') {\n                        // 目标是数组且索引是数字，插入到指定位置\n                        valueToAssign = applyTemplate(valueToAssign, template, strict_template, concat_template_array);\n                        collection.splice(keyOrIndex, 0, valueToAssign);\n                        display_str = `ASSIGNED ${JSON.stringify(valueToAssign)} into '${path}' at index ${keyOrIndex} ${reason_str}`;\n                        successful = true;\n                    }\n                    else if (_.isObject(collection)) {\n                        // 目标是对象，设置指定键\n                        // _.set(collection, String(keyOrIndex), valueToAssign);\n                        // 对单个属性值应用模板\n                        valueToAssign = applyTemplate(valueToAssign, template, strict_template, concat_template_array);\n                        collection[String(keyOrIndex)] = valueToAssign;\n                        display_str = `ASSIGNED key '${keyOrIndex}' with value ${JSON.stringify(valueToAssign)} into object '${path}' ${reason_str}`;\n                        successful = true;\n                    }\n                    else {\n                        // 目标不存在，创建新对象并插入\n                        collection = {};\n                        _.set(variables.stat_data, path, collection);\n                        /*\n                        _.set(\n                            collection as Record<string, unknown>,\n                            String(keyOrIndex),\n                            valueToAssign\n                        );\n                        */\n                        // 对新属性值应用模板\n                        valueToAssign = applyTemplate(valueToAssign, template, strict_template, concat_template_array);\n                        collection[String(keyOrIndex)] = valueToAssign;\n                        display_str = `CREATED object at '${path}' and ASSIGNED key '${keyOrIndex}' ${reason_str}`;\n                        successful = true;\n                    }\n                }\n                if (successful) {\n                    // 插入成功，获取新值并触发事件\n                    const newValue = _.get(variables.stat_data, path);\n                    variable_modified = true;\n                    console.info(display_str);\n                    await eventEmit(_variable_def__WEBPACK_IMPORTED_MODULE_0__.variable_events.SINGLE_VARIABLE_UPDATED, variables.stat_data, path, oldValue, newValue);\n                    try {\n                        //对新应用的 template 立刻处理模板。\n                        const currentDataClone = structuredClone(newValue);\n                        const newSchema = (0,_schema__WEBPACK_IMPORTED_MODULE_2__.generateSchema)(currentDataClone, targetSchema);\n                        _.merge(targetSchema, newSchema);\n                        (0,_schema__WEBPACK_IMPORTED_MODULE_2__.cleanUpMetadata)(newValue);\n                    }\n                    catch (error) {\n                        // 应用失败，记录错误并继续处理下一命令\n                        if (error instanceof Error) {\n                            outError(`Failed to resolve template meta at '${path}', '${error.message}'`);\n                        }\n                        else {\n                            outError(`Failed to resolve template meta at '${path}', '${error}'`);\n                        }\n                    }\n                }\n                else {\n                    // 插入失败，记录错误并继续处理下一命令\n                    outError(`Invalid arguments for _.assign on path '${path}'`);\n                    continue;\n                }\n                break;\n            }\n            case 'unset':\n            case 'delete':\n            case 'remove': {\n                // 验证路径存在，防止无效删除\n                if (!_.has(variables.stat_data, path)) {\n                    outError(`undefined Path: ${path} in _.remove command`);\n                    continue;\n                }\n                // --- 模式校验开始 ---\n                let containerPath = path;\n                let keyOrIndexToRemove;\n                if (command.args.length > 1) {\n                    // _.remove('path', key_or_index)\n                    keyOrIndexToRemove = parseCommandValue(command.args[1]);\n                    // 如果 key 是字符串，需要去除可能存在的引号\n                    if (typeof keyOrIndexToRemove === 'string') {\n                        keyOrIndexToRemove = trimQuotesAndBackslashes(keyOrIndexToRemove);\n                    }\n                }\n                else {\n                    // _.remove('path.to.key[index]')\n                    const pathParts = _.toPath(path);\n                    const lastPart = pathParts.pop();\n                    if (lastPart) {\n                        keyOrIndexToRemove = /^\\d+$/.test(lastPart) ? Number(lastPart) : lastPart;\n                        containerPath = pathParts.join('.');\n                    }\n                }\n                if (keyOrIndexToRemove === undefined) {\n                    outError(`Could not determine target for deletion for command on path '${path}' ${reason_str}`);\n                    continue;\n                }\n                // 只有当容器路径不是根路径（即不为空）时，才检查其是否存在\n                if (containerPath !== '' && !_.has(variables.stat_data, containerPath)) {\n                    outError(`Cannot remove from non-existent path '${containerPath}'. ${reason_str}`);\n                    continue;\n                }\n                const containerSchema = (0,_schema__WEBPACK_IMPORTED_MODULE_2__.getSchemaForPath)(schema, containerPath);\n                if (containerSchema) {\n                    if (containerSchema.type === 'array') {\n                        if (containerSchema.extensible !== true) {\n                            outError(`SCHEMA VIOLATION: Cannot remove element from non-extensible array at path '${containerPath}'. ${reason_str}`);\n                            continue;\n                        }\n                    }\n                    else if (containerSchema.type === 'object') {\n                        const keyString = String(keyOrIndexToRemove);\n                        if (_.has(containerSchema.properties, keyString) &&\n                            containerSchema.properties[keyString].required === true) {\n                            outError(`SCHEMA VIOLATION: Cannot remove required key '${keyString}' from path '${containerPath}'. ${reason_str}`);\n                            continue;\n                        }\n                    }\n                }\n                // --- 所有验证通过，现在可以安全执行 ---\n                // 解析删除目标，可能是值或索引\n                const targetToRemove = command.args.length > 1 ? parseCommandValue(command.args[1]) : undefined;\n                let itemRemoved = false; // 标记是否删除成功\n                if (targetToRemove === undefined) {\n                    // _.remove('path.to.key')\n                    // 删除整个路径\n                    const oldValue = _.get(variables.stat_data, path);\n                    _.unset(variables.stat_data, path);\n                    display_str = `REMOVED path '${path}' ${reason_str}`;\n                    itemRemoved = true;\n                    await eventEmit(_variable_def__WEBPACK_IMPORTED_MODULE_0__.variable_events.SINGLE_VARIABLE_UPDATED, variables.stat_data, path, oldValue, undefined);\n                }\n                else {\n                    // _.remove('path.to.array', value_or_index)\n                    const collection = _.get(variables.stat_data, path);\n                    // 当从一个集合中删除元素时，必须确保目标路径确实是一个集合\n                    // 如果目标是原始值（例如字符串），则无法执行删除操作\n                    if (!Array.isArray(collection) && !_.isObject(collection)) {\n                        outError(`Cannot remove from path '${path}' because it is not an array or object. Skipping command. ${reason_str}`);\n                        continue;\n                    }\n                    if (Array.isArray(collection)) {\n                        // 目标是数组，删除指定元素\n                        const originalArray = _.cloneDeep(collection);\n                        let indexToRemove = -1;\n                        if (typeof targetToRemove === 'number') {\n                            indexToRemove = targetToRemove;\n                        }\n                        else {\n                            indexToRemove = collection.findIndex(item => _.isEqual(item, targetToRemove));\n                        }\n                        if (indexToRemove >= 0 && indexToRemove < collection.length) {\n                            collection.splice(indexToRemove, 1);\n                            itemRemoved = true;\n                            display_str = `REMOVED item from '${path}' ${reason_str}`;\n                            await eventEmit(_variable_def__WEBPACK_IMPORTED_MODULE_0__.variable_events.SINGLE_VARIABLE_UPDATED, variables.stat_data, path, originalArray, collection);\n                        }\n                    }\n                    else if (_.isObject(collection)) {\n                        if (typeof targetToRemove === 'number') {\n                            // 目标是对象，按索引删除键\n                            const keys = Object.keys(collection);\n                            const index = targetToRemove;\n                            if (index >= 0 && index < keys.length) {\n                                const keyToRemove = keys[index];\n                                _.unset(collection, keyToRemove);\n                                itemRemoved = true;\n                                display_str = `REMOVED ${index + 1}th entry ('${keyToRemove}') from object '${path}' ${reason_str}`;\n                            }\n                        }\n                        else {\n                            // 目标是对象，按键名删除\n                            const keyToRemove = String(targetToRemove);\n                            if (_.has(collection, keyToRemove)) {\n                                // _.unset(collection, keyToRemove);\n                                delete collection[keyToRemove];\n                                itemRemoved = true;\n                                display_str = `REMOVED key '${keyToRemove}' from object '${path}' ${reason_str}`;\n                            }\n                        }\n                    }\n                }\n                if (itemRemoved) {\n                    // 删除成功，更新状态并记录日志\n                    variable_modified = true;\n                    console.info(display_str);\n                }\n                else {\n                    // 删除失败，记录警告并继续\n                    outError(`Failed to execute remove on '${path}'`);\n                    continue;\n                }\n                break;\n            }\n            case 'add': {\n                // 验证路径存在\n                if (!_.has(variables.stat_data, path)) {\n                    outError(`Path '${path}' does not exist in stat_data, skipping add command ${reason_str}`);\n                    continue;\n                }\n                // 获取当前值\n                const initialValue = _.cloneDeep(_.get(variables.stat_data, path));\n                const oldValue = _.get(variables.stat_data, path);\n                let valueToAdd = oldValue;\n                const isVWD = (0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isValueWithDescriptionStatData)(oldValue) && typeof oldValue[0] !== 'object';\n                if (isVWD) {\n                    (0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.assertVWD)(isVWD, oldValue);\n                    valueToAdd = oldValue[0]; // 对 ValueWithDescription 类型，操作其第一个元素\n                }\n                // console.warn(valueToAdd);\n                // 尝试将当前值解析为 Date 对象，无论其原始类型是 Date 还是字符串\n                let potentialDate = null;\n                if (valueToAdd instanceof Date) {\n                    potentialDate = valueToAdd;\n                }\n                else if (typeof valueToAdd === 'string') {\n                    const parsedDate = new Date(valueToAdd);\n                    // 确保它是一个有效的日期，并且不是一个可以被 `new Date` 解析的纯数字字符串\n                    if (!isNaN(parsedDate.getTime()) && isNaN(Number(valueToAdd))) {\n                        potentialDate = parsedDate;\n                    }\n                }\n                if (command.args.length === 2) {\n                    // 双参数：调整数值或日期\n                    const delta = parseCommandValue(command.args[1]);\n                    // 处理 Date 类型\n                    if (potentialDate) {\n                        if (typeof delta !== 'number') {\n                            outError(`Delta '${command.args[1]}' for Date operation is not a number, skipping add command ${reason_str}`);\n                            continue;\n                        }\n                        // delta 是毫秒数，更新时间\n                        const newDate = new Date(potentialDate.getTime() + delta);\n                        // 总是将更新后的 Date 对象转换为 ISO 字符串再存回去\n                        const finalValueToSet = newDate.toISOString();\n                        if (isVWD) {\n                            (0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.assertVWD)(isVWD, oldValue);\n                            oldValue[0] = finalValueToSet;\n                            _.set(variables.stat_data, path, oldValue);\n                        }\n                        else {\n                            _.set(variables.stat_data, path, finalValueToSet);\n                        }\n                        const finalNewValue = _.get(variables.stat_data, path);\n                        if (isVWD) {\n                            display_str = `${JSON.stringify(initialValue[0])}->${JSON.stringify(finalNewValue[0])} ${reason_str}`;\n                        }\n                        else {\n                            display_str = `${JSON.stringify(initialValue)}->${JSON.stringify(finalNewValue)} ${reason_str}`;\n                        }\n                        variable_modified = true;\n                        console.info(`ADDED date '${path}' from '${potentialDate.toISOString()}' to '${newDate.toISOString()}' by delta '${delta}'ms ${reason_str}`);\n                        await eventEmit(_variable_def__WEBPACK_IMPORTED_MODULE_0__.variable_events.SINGLE_VARIABLE_UPDATED, variables.stat_data, path, initialValue, finalNewValue);\n                    }\n                    else if (typeof valueToAdd === 'number') {\n                        // 原有的处理 number 类型的逻辑\n                        if (typeof delta !== 'number') {\n                            outError(`Delta '${command.args[1]}' is not a number, skipping add command ${reason_str}`);\n                            continue;\n                        }\n                        let newValue = valueToAdd + delta;\n                        newValue = parseFloat(newValue.toPrecision(12)); // 避免浮点数精度误差\n                        if (isVWD) {\n                            oldValue[0] = newValue; // Update the first element\n                            _.set(variables.stat_data, path, oldValue);\n                        }\n                        else {\n                            _.set(variables.stat_data, path, newValue);\n                        }\n                        const finalNewValue = _.get(variables.stat_data, path);\n                        if (isVWD) {\n                            display_str = `${JSON.stringify(initialValue[0])}->${JSON.stringify(finalNewValue[0])} ${reason_str}`;\n                        }\n                        else {\n                            display_str = `${JSON.stringify(initialValue)}->${JSON.stringify(finalNewValue)} ${reason_str}`;\n                        }\n                        variable_modified = true;\n                        console.info(`ADDED number '${path}' from '${valueToAdd}' to '${newValue}' by delta '${delta}' ${reason_str}`);\n                        await eventEmit(_variable_def__WEBPACK_IMPORTED_MODULE_0__.variable_events.SINGLE_VARIABLE_UPDATED, variables.stat_data, path, initialValue, finalNewValue);\n                    }\n                    else {\n                        // 如果值不是可识别的类型（日期、数字），则跳过\n                        outError(`Path '${path}' value is not a date or number; skipping add command ${reason_str}`);\n                        continue;\n                    }\n                }\n                else {\n                    outError(`Invalid number of arguments for _.add on path '${path}' ${reason_str}`);\n                    continue;\n                }\n                break;\n            }\n        }\n        if (display_str) {\n            // 更新状态和增量数据，记录操作详情\n            _.set(out_status.stat_data, path, display_str);\n            _.set(delta_status.stat_data, path, display_str);\n        }\n    }\n    // 更新变量的显示和增量数据\n    variables.display_data = out_status.stat_data;\n    variables.delta_data = delta_status.stat_data;\n    // 触发变量更新结束事件\n    await eventEmit(_variable_def__WEBPACK_IMPORTED_MODULE_0__.variable_events.VARIABLE_UPDATE_ENDED, variables);\n    //在结束事件中也可能设置变量\n    delete variables.stat_data.$internal;\n    // 在所有命令执行完毕后，如果数据有任何变动，则执行一次 Schema 调和\n    if (variable_modified) {\n        (0,_schema__WEBPACK_IMPORTED_MODULE_2__.reconcileAndApplySchema)(variables);\n    }\n    if (error_info && (0,_settings__WEBPACK_IMPORTED_MODULE_3__.useSettingsStore)().settings.通知.变量更新出错) {\n        const base_command = error_info.error_command.fullMatch;\n        if (typeof toastr !== 'undefined')\n            toastr.warning(`最近错误: ${error_info.error_last}`, `发生变量更新错误，可能需要重Roll:${base_command}`, { timeOut: 6000 });\n    }\n    // 返回是否修改了变量\n    return variable_modified || out_is_modifed;\n}\nasync function handleVariablesInMessage(message_id) {\n    const chat_message = getChatMessages(message_id).at(-1);\n    if (!chat_message) {\n        return;\n    }\n    let message_content = chat_message.message;\n    if (message_content.length < 5)\n        //MESSAGE_RECEIVED会递交一个 \"...\" 的消息\n        return;\n    const request_message_id = message_id === 0 ? 0 : message_id - 1;\n    const variables = await getLastValidVariable(request_message_id);\n    if (!_.has(variables, 'stat_data')) {\n        console.error(`cannot found stat_data for ${request_message_id}`);\n        return;\n    }\n    const has_variable_modified = await updateVariables(message_content, variables);\n    const updater = (data) => {\n        data.stat_data = variables.stat_data;\n        data.display_data = variables.display_data;\n        data.delta_data = variables.delta_data;\n        data.initialized_lorebooks = variables.initialized_lorebooks;\n        if (variables.schema !== undefined) {\n            data.schema = variables.schema;\n        }\n        else {\n            delete data.schema;\n        }\n        return data;\n    };\n    if (has_variable_modified) {\n        await updateVariablesWith(updater, { type: 'chat' });\n    }\n    await updateVariablesWith(updater, { type: 'message', message_id: message_id });\n    if (chat_message.role !== 'user') {\n        if (!message_content.includes('<StatusPlaceHolderImpl/>')) {\n            message_content += '\\n\\n<StatusPlaceHolderImpl/>';\n        }\n        await setChatMessages([\n            {\n                message_id: message_id,\n                message: message_content,\n            },\n        ], {\n            refresh: 'affected',\n        });\n    }\n}\nasync function handleVariablesInCallback(message_content, in_out_variable_info) {\n    if (in_out_variable_info.old_variables === undefined) {\n        return;\n    }\n    in_out_variable_info.new_variables = _.cloneDeep(in_out_variable_info.old_variables);\n    const variables = in_out_variable_info.new_variables;\n    const modified = await updateVariables(message_content, variables);\n    //如果没有修改，则不产生 newVariable\n    if (!modified)\n        delete in_out_variable_info.new_variables;\n    return;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/function.ts\n\n}");
  },
  "./src/main.ts": 
  /*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/button */ \"./src/button.ts\");\n/* harmony import */ var _export_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/export_globals */ \"./src/export_globals.ts\");\n/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/function */ \"./src/function.ts\");\n/* harmony import */ var _panel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/panel */ \"./src/panel.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/settings */ \"./src/settings.ts\");\n/* harmony import */ var _variable_def__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/variable_def */ \"./src/variable_def.ts\");\n/* harmony import */ var _variable_init__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/variable_init */ \"./src/variable_init.ts\");\n/* harmony import */ var compare_versions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! compare-versions */ \"compare-versions\");\n\n\n\n\n\n\n\n\n$(async () => {\n    if ((0,compare_versions__WEBPACK_IMPORTED_MODULE_7__.compare)(await getTavernHelperVersion(), '3.4.17', '<')) {\n        toastr.warning('酒馆助手版本过低, 可能无法正常处理, 请更新至 3.4.17 或更高版本（建议保持酒馆助手最新）');\n    }\n    (0,_panel__WEBPACK_IMPORTED_MODULE_3__.initPanel)();\n    (0,_export_globals__WEBPACK_IMPORTED_MODULE_1__.exportGlobals)();\n    (0,_button__WEBPACK_IMPORTED_MODULE_0__.registerButtons)();\n    eventOn(tavern_events.GENERATION_STARTED, _variable_init__WEBPACK_IMPORTED_MODULE_6__.initCheck);\n    eventOn(tavern_events.MESSAGE_SENT, _variable_init__WEBPACK_IMPORTED_MODULE_6__.initCheck);\n    eventOn(tavern_events.MESSAGE_SENT, _function__WEBPACK_IMPORTED_MODULE_2__.handleVariablesInMessage);\n    // TODO: 拆分进专门的文件\n    const settings = (0,_settings__WEBPACK_IMPORTED_MODULE_4__.useSettingsStore)().settings;\n    let reverse = false;\n    eventOn(tavern_events.WORLD_INFO_ACTIVATED, entries => {\n        if (settings.更新方式 === '随AI输出') {\n            return;\n        }\n        _.remove(entries, entry => {\n            const match = entry.comment.match(/\\[mvu_update\\]/i);\n            return reverse ? !match : !!match;\n        });\n    });\n    eventOn(tavern_events.MESSAGE_RECEIVED, async (message_id) => {\n        const primary_worldbook = getCharWorldbookNames('current').primary;\n        if (settings.更新方式 === '随AI输出' ||\n            primary_worldbook === null ||\n            // 角色卡未适配时, 依旧使用 \"随AI输出\"\n            !(await getWorldbook(primary_worldbook)).some(entry => entry.name.match(/\\[mvu_update\\]/i))) {\n            (0,_function__WEBPACK_IMPORTED_MODULE_2__.handleVariablesInMessage)(message_id);\n            return;\n        }\n        reverse = true;\n        const user_input = `---\n<status_description>\n<%= YAML.stringify(getvar('stat_data'), { blockQuote: 'literal' }) _%>\n</status_description>\n<must>\\`<status_description>\\`中所记录的是在最新剧情之前的变量情况。你现在必须停止扮演模式，以旁白视角分析最新剧情，按照变量更新规则更新\\`<status_description>\\`中的变量</must>`;\n        // TODO: 破限怎么办\n        const result = await generateRaw(settings.额外模型解析配置.模型来源 === '与插头相同'\n            ? { user_input }\n            : {\n                user_input,\n                custom_api: {\n                    apiurl: settings.额外模型解析配置.api地址,\n                    key: settings.额外模型解析配置.密钥,\n                    model: settings.额外模型解析配置.模型名称,\n                },\n            });\n        reverse = false;\n        // QUESTION: 目前的方案是直接将额外模型对变量的解析结果直接尾附到楼层中, 会不会像 tool calling 那样把结果新建为一个楼层更好?\n        const chat_message = getChatMessages(message_id);\n        await setChatMessages([\n            {\n                message_id,\n                message: chat_message[0].message +\n                    '<UpdateVariable>' +\n                    result\n                        .replaceAll('<UpdateVariable>', '')\n                        .replaceAll('</UpdateVariable>', '') +\n                    '</UpdateVariable>',\n            },\n        ], {\n            refresh: 'none',\n        });\n        (0,_function__WEBPACK_IMPORTED_MODULE_2__.handleVariablesInMessage)(message_id);\n    });\n    eventOn(tavern_events.MESSAGE_RECEIVED, _function__WEBPACK_IMPORTED_MODULE_2__.handleVariablesInMessage);\n    eventOn(_variable_def__WEBPACK_IMPORTED_MODULE_5__.exported_events.INVOKE_MVU_PROCESS, _function__WEBPACK_IMPORTED_MODULE_2__.handleVariablesInCallback);\n    eventOn(_variable_def__WEBPACK_IMPORTED_MODULE_5__.exported_events.UPDATE_VARIABLE, _function__WEBPACK_IMPORTED_MODULE_2__.updateVariable);\n    _.set(window.parent, 'handleVariablesInMessage', _function__WEBPACK_IMPORTED_MODULE_2__.handleVariablesInMessage);\n    toastr.info(`构建信息: ${__BUILD_DATE__ ?? 'Unknown'} (${__COMMIT_ID__ ?? 'Unknown'})`, 'MVU加载成功');\n});\n$(window).on('pagehide', () => {\n    (0,_panel__WEBPACK_IMPORTED_MODULE_3__.destroyPanel)();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main.ts\n\n}");
  },
  "./src/panel.ts": 
  /*!**********************!*\
  !*** ./src/panel.ts ***!
  \**********************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   destroyPanel: () => (/* binding */ destroyPanel),\n/* harmony export */   initPanel: () => (/* binding */ initPanel)\n/* harmony export */ });\n/* harmony import */ var _Panel_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/Panel.vue */ "./src/Panel.vue");\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pinia */ "pinia");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue */ "vue");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst app = (0,vue__WEBPACK_IMPORTED_MODULE_2__.createApp)(_Panel_vue__WEBPACK_IMPORTED_MODULE_0__["default"]);\nfunction teleportStyle() {\n    if ($(`head > div[script_id="${getScriptId()}"]`).length > 0) {\n        return;\n    }\n    const $div = $(`<div>`)\n        .attr(\'script_id\', getScriptId())\n        .append($(`head > style`, document).clone());\n    $(\'head\').append($div);\n}\nfunction initPanel() {\n    teleportStyle();\n    const $app = $(\'<div>\').attr(\'script_id\', getScriptId());\n    $(\'#extensions_settings2\').append($app);\n    app.use((0,pinia__WEBPACK_IMPORTED_MODULE_1__.createPinia)()).mount($app[0]);\n}\nfunction deteleportStyle() {\n    $(`head > div[script_id="${getScriptId()}"]`).remove();\n}\nfunction destroyPanel() {\n    app.unmount();\n    $(`#extensions_settings2 > div[script_id="${getScriptId()}"]`).remove();\n    deteleportStyle();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFuZWwudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdDO0FBQ0k7QUFDSjtBQUVoQyxNQUFNLEdBQUcsR0FBRyw4Q0FBUyxDQUFDLGtEQUFLLENBQUMsQ0FBQztBQUU3QixTQUFTLGFBQWE7SUFDbEIsSUFBSSxDQUFDLENBQUMseUJBQXlCLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDM0QsT0FBTztJQUNYLENBQUM7SUFDRCxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO1NBQ2xCLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLENBQUM7U0FDaEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFDTSxTQUFTLFNBQVM7SUFDckIsYUFBYSxFQUFFLENBQUM7SUFFaEIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFeEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxrREFBVyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUVELFNBQVMsZUFBZTtJQUNwQixDQUFDLENBQUMseUJBQXlCLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUMzRCxDQUFDO0FBQ00sU0FBUyxZQUFZO0lBQ3hCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVkLENBQUMsQ0FBQywwQ0FBMEMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRXhFLGVBQWUsRUFBRSxDQUFDO0FBQ3RCLENBQUMiLCJzb3VyY2VzIjpbInNyYzovL3RhdmVybl9oZWxwZXJfdGVtcGxhdGUvc3JjL3BhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYW5lbCBmcm9tICdAL1BhbmVsLnZ1ZSc7XG5pbXBvcnQgeyBjcmVhdGVQaW5pYSB9IGZyb20gJ3BpbmlhJztcbmltcG9ydCB7IGNyZWF0ZUFwcCB9IGZyb20gJ3Z1ZSc7XG5cbmNvbnN0IGFwcCA9IGNyZWF0ZUFwcChQYW5lbCk7XG5cbmZ1bmN0aW9uIHRlbGVwb3J0U3R5bGUoKSB7XG4gICAgaWYgKCQoYGhlYWQgPiBkaXZbc2NyaXB0X2lkPVwiJHtnZXRTY3JpcHRJZCgpfVwiXWApLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCAkZGl2ID0gJChgPGRpdj5gKVxuICAgICAgICAuYXR0cignc2NyaXB0X2lkJywgZ2V0U2NyaXB0SWQoKSlcbiAgICAgICAgLmFwcGVuZCgkKGBoZWFkID4gc3R5bGVgLCBkb2N1bWVudCkuY2xvbmUoKSk7XG4gICAgJCgnaGVhZCcpLmFwcGVuZCgkZGl2KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbml0UGFuZWwoKSB7XG4gICAgdGVsZXBvcnRTdHlsZSgpO1xuXG4gICAgY29uc3QgJGFwcCA9ICQoJzxkaXY+JykuYXR0cignc2NyaXB0X2lkJywgZ2V0U2NyaXB0SWQoKSk7XG4gICAgJCgnI2V4dGVuc2lvbnNfc2V0dGluZ3MyJykuYXBwZW5kKCRhcHApO1xuXG4gICAgYXBwLnVzZShjcmVhdGVQaW5pYSgpKS5tb3VudCgkYXBwWzBdKTtcbn1cblxuZnVuY3Rpb24gZGV0ZWxlcG9ydFN0eWxlKCkge1xuICAgICQoYGhlYWQgPiBkaXZbc2NyaXB0X2lkPVwiJHtnZXRTY3JpcHRJZCgpfVwiXWApLnJlbW92ZSgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lQYW5lbCgpIHtcbiAgICBhcHAudW5tb3VudCgpO1xuXG4gICAgJChgI2V4dGVuc2lvbnNfc2V0dGluZ3MyID4gZGl2W3NjcmlwdF9pZD1cIiR7Z2V0U2NyaXB0SWQoKX1cIl1gKS5yZW1vdmUoKTtcblxuICAgIGRldGVsZXBvcnRTdHlsZSgpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/panel.ts\n\n}');
  },
  "./src/schema.ts": 
  /*!***********************!*\
  !*** ./src/schema.ts ***!
  \***********************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXTENSIBLE_MARKER: () => (/* binding */ EXTENSIBLE_MARKER),\n/* harmony export */   cleanUpMetadata: () => (/* binding */ cleanUpMetadata),\n/* harmony export */   generateSchema: () => (/* binding */ generateSchema),\n/* harmony export */   getSchemaForPath: () => (/* binding */ getSchemaForPath),\n/* harmony export */   reconcileAndApplySchema: () => (/* binding */ reconcileAndApplySchema)\n/* harmony export */ });\n/* harmony import */ var _variable_def__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/variable_def */ \"./src/variable_def.ts\");\n\n// 定义魔法字符串为常量，便于管理和引用\nconst EXTENSIBLE_MARKER = '$__META_EXTENSIBLE__$';\n// 模式生成函数\n/**\n * 递归地为数据对象生成一个模式。\n * @param data - 要为其生成模式的数据对象 (stat_data)。\n * @param oldSchemaNode - (可选) 来自旧 Schema 的对应节点，用于继承元数据。\n * @param parentRecursiveExtensible - (可选) 父节点的 recursiveExtensible 状态，默认为 false。\n * @returns - 生成的模式对象。\n */\nfunction generateSchema(data, oldSchemaNode, parentRecursiveExtensible = false) {\n    if (Array.isArray(data)) {\n        let isExtensible = false;\n        let isRecursiveExtensible = parentRecursiveExtensible;\n        let oldElementType;\n        let template;\n        // 使用类型守卫检查 oldSchemaNode 是否为 ArraySchemaNode\n        if (oldSchemaNode) {\n            if ((0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isArraySchema)(oldSchemaNode)) {\n                isExtensible = oldSchemaNode.extensible === true;\n                isRecursiveExtensible =\n                    oldSchemaNode.recursiveExtensible === true || parentRecursiveExtensible;\n                oldElementType = oldSchemaNode.elementType;\n                template = oldSchemaNode.template;\n            }\n            else {\n                console.error(`Type mismatch: expected array schema but got ${oldSchemaNode.type} at path`);\n            }\n        }\n        // 检查是否有只包含 $meta 的元素\n        const metaElementIndex = data.findIndex(item => _.isObject(item) &&\n            !_.isDate(item) &&\n            '$arrayMeta' in item &&\n            '$meta' in item &&\n            item['$arrayMeta'] === true);\n        if (metaElementIndex !== -1) {\n            const metaElement = data[metaElementIndex];\n            // 从 $meta 中提取数组的元数据\n            if (metaElement.$meta.extensible !== undefined) {\n                isExtensible = metaElement.$meta.extensible;\n            }\n            if (metaElement.$meta.template !== undefined) {\n                template = metaElement.$meta.template;\n            }\n            // 从数组中移除这个元数据元素\n            data.splice(metaElementIndex, 1);\n            console.log(`Array metadata element found and processed.`);\n        }\n        // 检查并处理魔法字符串\n        const markerIndex = data.indexOf(EXTENSIBLE_MARKER);\n        if (markerIndex > -1) {\n            isExtensible = true;\n            // 从数组中移除标记，以免影响后续的类型推断\n            data.splice(markerIndex, 1);\n            console.log(`Extensible marker found and removed from an array.`);\n        }\n        const schema_node = {\n            type: 'array',\n            extensible: isExtensible || parentRecursiveExtensible,\n            recursiveExtensible: isRecursiveExtensible,\n            elementType: data.length > 0\n                ? generateSchema(data[0], oldElementType, isRecursiveExtensible)\n                : { type: 'any' },\n        };\n        if (template !== undefined) {\n            schema_node.template = template;\n        }\n        return schema_node;\n    }\n    if (_.isObject(data) && !_.isDate(data)) {\n        const typedData = data; // 类型断言\n        // 使用类型守卫检查 oldSchemaNode 是否为 ObjectSchemaNode\n        let oldExtensible = false;\n        let oldRecursiveExtensible = parentRecursiveExtensible;\n        let oldProperties;\n        if (oldSchemaNode) {\n            if ((0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isObjectSchema)(oldSchemaNode)) {\n                oldExtensible = oldSchemaNode.extensible === true;\n                oldRecursiveExtensible =\n                    oldSchemaNode.recursiveExtensible === true || parentRecursiveExtensible;\n                oldProperties = oldSchemaNode.properties;\n            }\n            else {\n                console.error(`Type mismatch: expected object schema but got ${oldSchemaNode.type} at path`);\n            }\n        }\n        const schemaNode = {\n            type: 'object',\n            properties: {},\n            // 默认不可扩展，但检查旧 schema、$meta.extensible 或 parentRecursiveExtensible\n            extensible: oldExtensible ||\n                typedData.$meta?.extensible === true ||\n                typedData.$meta?.recursiveExtensible === true ||\n                parentRecursiveExtensible,\n            recursiveExtensible: oldRecursiveExtensible || typedData.$meta?.recursiveExtensible === true,\n        };\n        // 处理 template\n        if (typedData.$meta?.template !== undefined) {\n            schemaNode.template = typedData.$meta.template;\n        }\n        else if (oldSchemaNode && (0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isObjectSchema)(oldSchemaNode) && oldSchemaNode.template) {\n            schemaNode.template = oldSchemaNode.template;\n        }\n        // 暂存父节点的 $meta，以便在循环中使用\n        const parentMeta = typedData.$meta;\n        // 从 $meta 中读取信息后，将其从数据中移除，避免污染\n        if (typedData.$meta) {\n            delete typedData.$meta;\n        }\n        for (const key in data) {\n            const oldChildNode = oldProperties?.[key];\n            // 传递当前节点的 recursiveExtensible（如果存在）或父节点的 recursiveExtensible\n            // 但如果当前节点明确设置 extensible: false, 则停止递归扩展\n            const childRecursiveExtensible = schemaNode.extensible !== false && schemaNode.recursiveExtensible;\n            const childSchema = generateSchema(typedData[key], oldChildNode, childRecursiveExtensible);\n            // 一个属性是否必需？\n            // 1. 默认值: 如果父节点可扩展，子节点默认为可选；否则为必需。\n            let isRequired = !schemaNode.extensible;\n            // 2. 覆盖规则: 检查父元数据中的 'required' 数组。\n            //    如果父节点的 $meta.required 是一个数组，并且当前 key 在这个数组里，\n            //    则无论默认值是什么，都强制覆盖为必需。\n            if (Array.isArray(parentMeta?.required) && parentMeta.required.includes(key)) {\n                isRequired = true;\n            }\n            // 3. 检查旧 schema 的设置，作为最后的参考\n            if (oldChildNode?.required === false) {\n                // 如果旧 schema 明确说这个是可选的，那么以这个为准\n                isRequired = false;\n            }\n            else if (oldChildNode?.required === true) {\n                isRequired = true;\n            }\n            schemaNode.properties[key] = {\n                ...childSchema,\n                required: isRequired,\n            };\n        }\n        return schemaNode;\n    }\n    // 处理原始类型\n    const dataType = typeof data;\n    if (dataType === 'string' || dataType === 'number' || dataType === 'boolean') {\n        return { type: dataType };\n    }\n    // 对于其他类型（function, symbol, bigint, undefined 等），默认返回 'any'\n    return { type: 'any' };\n}\n/**\n * 辅助函数：为数据路径获取对应的 Schema 规则。\n * 能够处理数组索引，将其转换为 .elementType 来查询 Schema。\n * @param schema - 完整的 Schema 对象\n * @param path - 要查询的数据路径\n * @returns 对应路径的 Schema 节点，如果找不到则返回 null。\n */\nfunction getSchemaForPath(schema, path) {\n    if (!path || !schema) {\n        return schema || null;\n    }\n    // 将 lodash 路径字符串转换为段数组，例如 'a.b[0].c' -> ['a', 'b', '0', 'c']\n    const pathSegments = _.toPath(path);\n    let currentSchema = schema;\n    for (const segment of pathSegments) {\n        if (!currentSchema)\n            return null;\n        // 如果 segment 是数字（数组索引），则移动到 elementType\n        if (/^\\d+$/.test(segment)) {\n            if ((0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isArraySchema)(currentSchema)) {\n                currentSchema = currentSchema.elementType;\n            }\n            else {\n                return null; // 路径试图索引一个非数组或无 elementType 的 schema\n            }\n        }\n        else if ((0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isObjectSchema)(currentSchema) && currentSchema.properties[segment]) {\n            // 否则，作为对象属性访问\n            const property = currentSchema.properties[segment];\n            currentSchema = property;\n        }\n        else {\n            return null; // 路径中的键在 schema 中不存在\n        }\n    }\n    return currentSchema;\n}\n/**\n * 调和函数：比较数据和旧 Schema，生成并应用一个与当前数据状态完全同步的新 Schema。\n * @param variables - 包含 stat_data 和旧 schema 的变量对象。\n */\nfunction reconcileAndApplySchema(variables) {\n    console.log('Reconciling schema with current data state...');\n    // 1. 深拷贝数据，以防 generateSchema 修改原始数据（例如删除 $meta）\n    const currentDataClone = _.cloneDeep(variables.stat_data);\n    // 2. 使用改进后的 generateSchema 生成一个与当前数据完全匹配的新 Schema，\n    //    并在此过程中从旧 Schema 继承元数据。\n    const newSchema = generateSchema(currentDataClone, variables.schema);\n    // 3. 直接用新 Schema 替换旧 Schema\n    // stat_data 的根节点应该始终是对象，所以生成的 schema 也应该是 ObjectSchemaNode\n    if (!(0,_variable_def__WEBPACK_IMPORTED_MODULE_0__.isObjectSchema)(newSchema)) {\n        console.error('Generated schema is not an object schema, which is unexpected for stat_data root');\n        return;\n    }\n    // 保留 RootAdditionalProps\n    const newSchemaWithProps = newSchema;\n    if (variables.schema?.strictTemplate !== undefined) {\n        newSchemaWithProps.strictTemplate = variables.schema.strictTemplate;\n    }\n    if (variables.schema?.strictSet !== undefined) {\n        newSchemaWithProps.strictSet = variables.schema.strictSet;\n    }\n    if (variables.schema?.concatTemplateArray !== undefined) {\n        newSchemaWithProps.concatTemplateArray = variables.schema.concatTemplateArray;\n    }\n    if (_.has(variables.stat_data, '$meta.strictTemplate'))\n        newSchemaWithProps.strictTemplate = variables.stat_data['$meta']?.strictTemplate;\n    if (_.has(variables.stat_data, '$meta.strictSet'))\n        newSchemaWithProps.strictSet = variables.stat_data['$meta']?.strictSet;\n    if (_.has(variables.stat_data, '$meta.concatTemplateArray'))\n        newSchemaWithProps.concatTemplateArray = variables.stat_data['$meta']\n            ?.concatTemplateArray;\n    variables.schema = newSchemaWithProps;\n    console.log('Schema reconciliation complete.');\n}\nfunction isMetaCarrier(value) {\n    return _.isObject(value) && !_.isDate(value);\n}\n/**\n * 递归清理数据中的元数据标记\n * - 从数组中移除 EXTENSIBLE_MARKER\n * - 从对象中删除 $meta 属性\n * @param data 需要清理的数据\n */\nfunction cleanUpMetadata(data) {\n    // 如果是数组，移除魔法字符串和只包含 $meta 的元素，并递归\n    if (Array.isArray(data)) {\n        let i = data.length;\n        while (i--) {\n            if (data[i] === EXTENSIBLE_MARKER) {\n                data.splice(i, 1);\n            }\n            else if (_.isObject(data[i]) &&\n                !_.isDate(data[i]) &&\n                '$arrayMeta' in data[i] &&\n                '$meta' in data[i] &&\n                data[i]['$arrayMeta'] === true) {\n                // 移除只包含 $meta & $arrayMeta 的元素\n                data.splice(i, 1);\n            }\n            else {\n                // 对数组中的其他元素（可能是对象或数组）进行递归清理\n                cleanUpMetadata(data[i]);\n            }\n        }\n    }\n    // 如果是对象，移除 $meta 并递归\n    else if (isMetaCarrier(data)) {\n        // 清除自身 $meta\n        delete data.$meta;\n        // 递归\n        for (const key in data) {\n            cleanUpMetadata(data[key]);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/schema.ts\n\n}");
  },
  "./src/settings.ts": 
  /*!*************************!*\
  !*** ./src/settings.ts ***!
  \*************************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSettingsStore: () => (/* binding */ useSettingsStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pinia */ \"pinia\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"vue\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"zod\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(zod__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst Settings = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    更新方式: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"](['随AI输出', '额外模型解析']).prefault('随AI输出').catch('随AI输出'),\n    额外模型解析配置: zod__WEBPACK_IMPORTED_MODULE_2__.object({\n        模型来源: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"](['与插头相同', '自定义']).default('与插头相同'),\n        api地址: zod__WEBPACK_IMPORTED_MODULE_2__.string().prefault('http://localhost:1234/v1'),\n        密钥: zod__WEBPACK_IMPORTED_MODULE_2__.string().prefault(''),\n        模型名称: zod__WEBPACK_IMPORTED_MODULE_2__.string().prefault('gemini-2.5-flash'),\n    })\n        .prefault({}),\n    通知: zod__WEBPACK_IMPORTED_MODULE_2__.object({\n        变量更新出错: zod__WEBPACK_IMPORTED_MODULE_2__.boolean().prefault(false).catch(false),\n    })\n        .prefault({}),\n})\n    .prefault({});\nconst useSettingsStore = (0,pinia__WEBPACK_IMPORTED_MODULE_0__.defineStore)('settings', () => {\n    const settings = (0,vue__WEBPACK_IMPORTED_MODULE_1__.ref)(Settings.parse(_.get(SillyTavern.extensionSettings, 'mvu_settings', {})));\n    (0,vue__WEBPACK_IMPORTED_MODULE_1__.watch)(settings, new_settings => {\n        _.set(SillyTavern.extensionSettings, 'mvu_settings', (0,vue__WEBPACK_IMPORTED_MODULE_1__.toRaw)(new_settings));\n        SillyTavern.saveSettingsDebounced();\n    }, { deep: true });\n    return { settings };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2V0dGluZ3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW9DO0FBQ0k7QUFDZjtBQUV6QixNQUFNLFFBQVEsR0FBRyx1Q0FDTixDQUFDO0lBQ0osSUFBSSxFQUFFLHdDQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUNsRSxRQUFRLEVBQUUsdUNBQ0MsQ0FBQztRQUNKLElBQUksRUFBRSx3Q0FBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUMvQyxLQUFLLEVBQUUsdUNBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQywwQkFBMEIsQ0FBQztRQUN0RCxFQUFFLEVBQUUsdUNBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDM0IsSUFBSSxFQUFFLHVDQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUM7S0FDaEQsQ0FBQztTQUNELFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFDakIsRUFBRSxFQUFFLHVDQUNPLENBQUM7UUFDSixNQUFNLEVBQUUsd0NBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO0tBQ25ELENBQUM7U0FDRCxRQUFRLENBQUMsRUFBRSxDQUFDO0NBQ3BCLENBQUM7S0FDRCxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFWCxNQUFNLGdCQUFnQixHQUFHLGtEQUFXLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtJQUN6RCxNQUFNLFFBQVEsR0FBRyx3Q0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRiwwQ0FBSyxDQUNELFFBQVEsRUFDUixZQUFZLENBQUMsRUFBRTtRQUNYLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLGNBQWMsRUFBRSwwQ0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDMUUsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDeEMsQ0FBQyxFQUNELEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUNqQixDQUFDO0lBRUYsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQ3hCLENBQUMsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJzcmM6Ly90YXZlcm5faGVscGVyX3RlbXBsYXRlL3NyYy9zZXR0aW5ncy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVTdG9yZSB9IGZyb20gJ3BpbmlhJztcbmltcG9ydCB7IHJlZiwgdG9SYXcsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCAqIGFzIHogZnJvbSAnem9kJztcblxuY29uc3QgU2V0dGluZ3MgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgICAgIOabtOaWsOaWueW8jzogei5lbnVtKFsn6ZqPQUnovpPlh7onLCAn6aKd5aSW5qih5Z6L6Kej5p6QJ10pLnByZWZhdWx0KCfpmo9BSei+k+WHuicpLmNhdGNoKCfpmo9BSei+k+WHuicpLFxuICAgICAgICDpop3lpJbmqKHlnovop6PmnpDphY3nva46IHpcbiAgICAgICAgICAgIC5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIOaooeWei+adpea6kDogei5lbnVtKFsn5LiO5o+S5aS055u45ZCMJywgJ+iHquWumuS5iSddKS5kZWZhdWx0KCfkuI7mj5LlpLTnm7jlkIwnKSxcbiAgICAgICAgICAgICAgICBhcGnlnLDlnYA6IHouc3RyaW5nKCkucHJlZmF1bHQoJ2h0dHA6Ly9sb2NhbGhvc3Q6MTIzNC92MScpLFxuICAgICAgICAgICAgICAgIOWvhumSpTogei5zdHJpbmcoKS5wcmVmYXVsdCgnJyksXG4gICAgICAgICAgICAgICAg5qih5Z6L5ZCN56ewOiB6LnN0cmluZygpLnByZWZhdWx0KCdnZW1pbmktMi41LWZsYXNoJyksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnByZWZhdWx0KHt9KSxcbiAgICAgICAg6YCa55+lOiB6XG4gICAgICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgICAgICAgICDlj5jph4/mm7TmlrDlh7rplJk6IHouYm9vbGVhbigpLnByZWZhdWx0KGZhbHNlKS5jYXRjaChmYWxzZSksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnByZWZhdWx0KHt9KSxcbiAgICB9KVxuICAgIC5wcmVmYXVsdCh7fSk7XG5cbmV4cG9ydCBjb25zdCB1c2VTZXR0aW5nc1N0b3JlID0gZGVmaW5lU3RvcmUoJ3NldHRpbmdzJywgKCkgPT4ge1xuICAgIGNvbnN0IHNldHRpbmdzID0gcmVmKFNldHRpbmdzLnBhcnNlKF8uZ2V0KFNpbGx5VGF2ZXJuLmV4dGVuc2lvblNldHRpbmdzLCAnbXZ1X3NldHRpbmdzJywge30pKSk7XG4gICAgd2F0Y2goXG4gICAgICAgIHNldHRpbmdzLFxuICAgICAgICBuZXdfc2V0dGluZ3MgPT4ge1xuICAgICAgICAgICAgXy5zZXQoU2lsbHlUYXZlcm4uZXh0ZW5zaW9uU2V0dGluZ3MsICdtdnVfc2V0dGluZ3MnLCB0b1JhdyhuZXdfc2V0dGluZ3MpKTtcbiAgICAgICAgICAgIFNpbGx5VGF2ZXJuLnNhdmVTZXR0aW5nc0RlYm91bmNlZCgpO1xuICAgICAgICB9LFxuICAgICAgICB7IGRlZXA6IHRydWUgfVxuICAgICk7XG5cbiAgICByZXR1cm4geyBzZXR0aW5ncyB9O1xufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/settings.ts\n\n}");
  },
  "./src/update_descriptions.ts": 
  /*!************************************!*\
  !*** ./src/update_descriptions.ts ***!
  \************************************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   updateDescriptions: () => (/* binding */ updateDescriptions)\n/* harmony export */ });\n/**\n * 递归更新描述字段\n *\n * 示例数据结构：\n * initData: {\n *   "属性": {\n *     "value": 100,\n *     "description": "这是初始描述"  // 条件 4(a)\n *   },\n *   "生命值": [100, "初始生命值"],  // 条件 4(b): ValueWithDescription<number>\n *   "技能": [{\n *     "name": "攻击",\n *     "damage": [50, "基础伤害"],  // 嵌套的 ValueWithDescription\n *     "description": "普通攻击"\n *   }],\n *   "装备": {\n *     "武器": ["剑", "初始武器"],  // ValueWithDescription<string>\n *     "属性加成": {\n *       "攻击力": [10, "武器攻击力加成"]\n *     }\n *   }\n * }\n */\nfunction updateDescriptions(_init_path, init_data, msg_data, target_data) {\n    _.forEach(init_data, (value, key) => {\n        const current_path = key; //init_path ? `${init_path}.${key}` : key;\n        if (_.isArray(value)) {\n            // 检查是否为 ValueWithDescription<T> 类型 (长度为2，第二个元素是字符串)\n            if (value.length === 2 && _.isString(value[1])) {\n                // 条件 4(b): 满足 ValueWithDescription<T> 定义\n                if (_.isArray(_.get(msg_data, current_path))) {\n                    const msgValue = _.get(msg_data, current_path);\n                    if (msgValue.length === 2) {\n                        // 更新描述(第二个元素)\n                        _.set(target_data, `${current_path}[1]`, value[1]);\n                        // 如果第一个元素是对象或数组，需要递归处理\n                        if (_.isObject(value[0]) && !_.isArray(value[0])) {\n                            // 处理对象\n                            const targetObj = _.get(target_data, `${key}[0]`);\n                            // 如果对象包含description属性，需要特殊处理\n                            if (_.has(value[0], \'description\') &&\n                                _.isString(value[0].description)) {\n                                if (_.has(msgValue[0], \'description\')) {\n                                    _.set(target_data, `${current_path}[0].description`, value[0].description);\n                                }\n                            }\n                            // 递归处理对象的其他属性\n                            updateDescriptions(`${current_path}[0]`, value[0], msgValue[0], targetObj);\n                        }\n                        else if (_.isArray(value[0])) {\n                            // 处理数组\n                            updateDescriptions(`${current_path}[0]`, value[0], msgValue[0], target_data[0]);\n                        }\n                    }\n                }\n            }\n            else if (_.isArray(_.get(msg_data, current_path))) {\n                // 普通数组，递归处理每个元素\n                const msg_array = _.get(msg_data, current_path);\n                value.forEach((item, index) => {\n                    if (index < msg_array.length) {\n                        if (_.isObject(item)) {\n                            const current_target = _.get(target_data, `${current_path}[${index}]`);\n                            // 如果对象包含description属性，需要特殊处理\n                            if (_.has(item, \'description\') && _.isString(item.description)) {\n                                if (_.has(msg_array[index], \'description\')) {\n                                    _.set(current_target, `description`, item.description);\n                                }\n                            }\n                            updateDescriptions(`${current_path}[${index}]`, value[index], msg_array[index], current_target);\n                        }\n                    }\n                });\n            }\n        }\n        else if (_.isObject(value)) {\n            // 处理对象\n            if (_.has(value, \'description\') && _.isString(value.description)) {\n                // 条件 4(a): 对象包含 description 字段且为字符串\n                //msg_data 等已经在递归时跟着进入了更深的层次，不需要 currentPath前缀\n                const description_path = `${key}.description`;\n                if (_.has(msg_data, description_path)) {\n                    _.set(target_data, description_path, value.description);\n                }\n            }\n            // 继续递归处理对象的其他属性\n            if (_.has(msg_data, key) && _.isObject(msg_data[key])) {\n                updateDescriptions(current_path, value, msg_data[key], target_data[key]);\n            }\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/update_descriptions.ts\n\n}');
  },
  "./src/variable_def.ts": 
  /*!*****************************!*\
  !*** ./src/variable_def.ts ***!
  \*****************************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertVWD: () => (/* binding */ assertVWD),\n/* harmony export */   exported_events: () => (/* binding */ exported_events),\n/* harmony export */   extractRecord: () => (/* binding */ extractRecord),\n/* harmony export */   isArraySchema: () => (/* binding */ isArraySchema),\n/* harmony export */   isObjectSchema: () => (/* binding */ isObjectSchema),\n/* harmony export */   isPrimitiveSchema: () => (/* binding */ isPrimitiveSchema),\n/* harmony export */   isValueWithDescription: () => (/* binding */ isValueWithDescription),\n/* harmony export */   isValueWithDescriptionStatData: () => (/* binding */ isValueWithDescriptionStatData),\n/* harmony export */   variable_events: () => (/* binding */ variable_events)\n/* harmony export */ });\nfunction assertVWD(_flag, _v) { }\nfunction isValueWithDescription(value) {\n    return Array.isArray(value) && value.length === 2 && typeof value[1] === 'string';\n}\nfunction isValueWithDescriptionStatData(value) {\n    return Array.isArray(value) && value.length === 2 && typeof value[1] === 'string';\n}\n// 类型守卫函数\nfunction isArraySchema(value) {\n    return value.type === 'array';\n}\nfunction isObjectSchema(value) {\n    return value.type === 'object';\n}\nfunction isPrimitiveSchema(value) {\n    return (value.type === 'string' ||\n        value.type === 'number' ||\n        value.type === 'boolean' ||\n        value.type === 'any');\n}\nconst variable_events = {\n    SINGLE_VARIABLE_UPDATED: 'mag_variable_updated',\n    VARIABLE_UPDATE_ENDED: 'mag_variable_update_ended',\n    VARIABLE_UPDATE_STARTED: 'mag_variable_update_started',\n};\nconst exported_events = {\n    INVOKE_MVU_PROCESS: 'mag_invoke_mvu',\n    UPDATE_VARIABLE: 'mag_update_variable',\n};\nfunction extractRecord(category, game_data) {\n    let data = undefined;\n    switch (category) {\n        case 'stat':\n            data = game_data.stat_data;\n            break;\n        case 'display':\n            data = game_data.display_data;\n            break;\n        case 'delta':\n            data = game_data.delta_data;\n            break;\n    }\n    return data;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdmFyaWFibGVfZGVmLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQXFETyxTQUFTLFNBQVMsQ0FDckIsS0FBYyxFQUNkLEVBQTJELElBQ0UsQ0FBQztBQUUzRCxTQUFTLHNCQUFzQixDQUFDLEtBQWM7SUFDakQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUN0RixDQUFDO0FBRU0sU0FBUyw4QkFBOEIsQ0FDMUMsS0FBOEQ7SUFFOUQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUN0RixDQUFDO0FBRUQsU0FBUztBQUNGLFNBQVMsYUFBYSxDQUFDLEtBQWlCO0lBQzNDLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPLENBQUM7QUFDbEMsQ0FBQztBQUVNLFNBQVMsY0FBYyxDQUFDLEtBQWlCO0lBQzVDLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7QUFDbkMsQ0FBQztBQUVNLFNBQVMsaUJBQWlCLENBQUMsS0FBaUI7SUFDL0MsT0FBTyxDQUNILEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUTtRQUN2QixLQUFLLENBQUMsSUFBSSxLQUFLLFFBQVE7UUFDdkIsS0FBSyxDQUFDLElBQUksS0FBSyxTQUFTO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUN2QixDQUFDO0FBQ04sQ0FBQztBQWlFTSxNQUFNLGVBQWUsR0FBRztJQUMzQix1QkFBdUIsRUFBRSxzQkFBc0I7SUFDL0MscUJBQXFCLEVBQUUsMkJBQTJCO0lBQ2xELHVCQUF1QixFQUFFLDZCQUE2QjtDQUNoRCxDQUFDO0FBQ0osTUFBTSxlQUFlLEdBQUc7SUFDM0Isa0JBQWtCLEVBQUUsZ0JBQWdCO0lBQ3BDLGVBQWUsRUFBRSxxQkFBcUI7Q0FDaEMsQ0FBQztBQW9DSixTQUFTLGFBQWEsQ0FBQyxRQUFzQyxFQUFFLFNBQWtCO0lBQ3BGLElBQUksSUFBSSxHQUFvQyxTQUFTLENBQUM7SUFDdEQsUUFBUSxRQUFRLEVBQUUsQ0FBQztRQUNmLEtBQUssTUFBTTtZQUNQLElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDO1lBQzNCLE1BQU07UUFDVixLQUFLLFNBQVM7WUFDVixJQUFJLEdBQUcsU0FBUyxDQUFDLFlBQWEsQ0FBQztZQUMvQixNQUFNO1FBQ1YsS0FBSyxPQUFPO1lBQ1IsSUFBSSxHQUFHLFNBQVMsQ0FBQyxVQUFXLENBQUM7WUFDN0IsTUFBTTtJQUNkLENBQUM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDIiwic291cmNlcyI6WyJzcmM6Ly90YXZlcm5faGVscGVyX3RlbXBsYXRlL3NyYy92YXJpYWJsZV9kZWYudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8g5qih5p2/57G75Z6L5a6a5LmJXG5leHBvcnQgdHlwZSBUZW1wbGF0ZVR5cGUgPSBTdGF0RGF0YSB8IFN0YXREYXRhW10gfCBhbnlbXTtcblxuLy8gU3RhdERhdGEg55qE5YWD5pWw5o2u57G75Z6L5a6a5LmJXG5leHBvcnQgdHlwZSBTdGF0RGF0YU1ldGEgPSB7XG4gICAgZXh0ZW5zaWJsZT86IGJvb2xlYW47XG4gICAgcmVjdXJzaXZlRXh0ZW5zaWJsZT86IGJvb2xlYW47XG4gICAgcmVxdWlyZWQ/OiBzdHJpbmdbXTtcbiAgICB0ZW1wbGF0ZT86IFRlbXBsYXRlVHlwZTsgLy8g5qih5p2/5a6a5LmJ77yM55So5LqO6Ieq5Yqo5aGr5YWF5paw5YWD57SgXG4gICAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn07XG5cbmV4cG9ydCB0eXBlIEpTT05QcmltaXRpdmUgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgbnVsbDtcblxuLy8gU3RhdERhdGEg57G75Z6L5a6a5LmJIC0g5pSv5oyB5bWM5aWX5a+56LGh5ZKM5pWw57uE77yM5Y+v5Lul5pyJICRtZXRhIOWxnuaAp1xuZXhwb3J0IHR5cGUgU3RhdERhdGEgPSB7XG4gICAgW2tleTogc3RyaW5nXTogU3RhdERhdGEgfCBKU09OUHJpbWl0aXZlIHwgKFN0YXREYXRhIHwgSlNPTlByaW1pdGl2ZSlbXTtcbn0gJiB7XG4gICAgJG1ldGE/OiBTdGF0RGF0YU1ldGE7XG4gICAgJGFycmF5TWV0YT86IGJvb2xlYW47XG59O1xuXG4vLyBTY2hlbWEg6IqC54K557G75Z6L5a6a5LmJXG5leHBvcnQgdHlwZSBTY2hlbWFOb2RlID0gT2JqZWN0U2NoZW1hTm9kZSB8IEFycmF5U2NoZW1hTm9kZSB8IFByaW1pdGl2ZVNjaGVtYU5vZGU7XG5cbi8vIOWvueixoeexu+Wei+eahCBTY2hlbWEg6IqC54K5XG5leHBvcnQgdHlwZSBPYmplY3RTY2hlbWFOb2RlID0ge1xuICAgIHR5cGU6ICdvYmplY3QnO1xuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogU2NoZW1hTm9kZSAmIHsgcmVxdWlyZWQ/OiBib29sZWFuIH07XG4gICAgfTtcbiAgICBleHRlbnNpYmxlPzogYm9vbGVhbjtcbiAgICB0ZW1wbGF0ZT86IFRlbXBsYXRlVHlwZTsgLy8g5paw5aKe5bGe5oCn55qE5qih5p2/XG4gICAgcmVjdXJzaXZlRXh0ZW5zaWJsZT86IGJvb2xlYW47XG59O1xuXG4vLyDmlbDnu4TnsbvlnovnmoQgU2NoZW1hIOiKgueCuVxuZXhwb3J0IHR5cGUgQXJyYXlTY2hlbWFOb2RlID0ge1xuICAgIHR5cGU6ICdhcnJheSc7XG4gICAgZWxlbWVudFR5cGU6IFNjaGVtYU5vZGU7XG4gICAgZXh0ZW5zaWJsZT86IGJvb2xlYW47XG4gICAgdGVtcGxhdGU/OiBUZW1wbGF0ZVR5cGU7IC8vIOaWsOWinuWFg+e0oOeahOaooeadv1xuICAgIHJlY3Vyc2l2ZUV4dGVuc2libGU/OiBib29sZWFuO1xufTtcblxuLy8g5Y6f5aeL57G75Z6L55qEIFNjaGVtYSDoioLngrlcbmV4cG9ydCB0eXBlIFByaW1pdGl2ZVNjaGVtYU5vZGUgPSB7XG4gICAgdHlwZTogJ3N0cmluZycgfCAnbnVtYmVyJyB8ICdib29sZWFuJyB8ICdhbnknO1xufTtcblxuLy8gVmFsdWVXaXRoRGVzY3JpcHRpb24g57G75Z6LIC0g55So5LqO6KGo56S65bim5o+P6L+w55qE5YC8XG5leHBvcnQgdHlwZSBWYWx1ZVdpdGhEZXNjcmlwdGlvbjxUPiA9IFtULCBzdHJpbmddO1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VldEKFxuICAgIF9mbGFnOiBib29sZWFuLFxuICAgIF92OiBTdGF0RGF0YSB8IEpTT05QcmltaXRpdmUgfCAoU3RhdERhdGEgfCBKU09OUHJpbWl0aXZlKVtdXG4pOiBhc3NlcnRzIF92IGlzIFZhbHVlV2l0aERlc2NyaXB0aW9uPFN0YXREYXRhIHwgSlNPTlByaW1pdGl2ZT4ge31cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsdWVXaXRoRGVzY3JpcHRpb24odmFsdWU6IHVua25vd24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyICYmIHR5cGVvZiB2YWx1ZVsxXSA9PT0gJ3N0cmluZyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbHVlV2l0aERlc2NyaXB0aW9uU3RhdERhdGEoXG4gICAgdmFsdWU6IFN0YXREYXRhIHwgSlNPTlByaW1pdGl2ZSB8IChTdGF0RGF0YSB8IEpTT05QcmltaXRpdmUpW11cbik6IHZhbHVlIGlzIFZhbHVlV2l0aERlc2NyaXB0aW9uPFN0YXREYXRhIHwgSlNPTlByaW1pdGl2ZT4ge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDIgJiYgdHlwZW9mIHZhbHVlWzFdID09PSAnc3RyaW5nJztcbn1cblxuLy8g57G75Z6L5a6I5Y2r5Ye95pWwXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheVNjaGVtYSh2YWx1ZTogU2NoZW1hTm9kZSk6IHZhbHVlIGlzIEFycmF5U2NoZW1hTm9kZSB7XG4gICAgcmV0dXJuIHZhbHVlLnR5cGUgPT09ICdhcnJheSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdFNjaGVtYSh2YWx1ZTogU2NoZW1hTm9kZSk6IHZhbHVlIGlzIE9iamVjdFNjaGVtYU5vZGUge1xuICAgIHJldHVybiB2YWx1ZS50eXBlID09PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlU2NoZW1hKHZhbHVlOiBTY2hlbWFOb2RlKTogdmFsdWUgaXMgUHJpbWl0aXZlU2NoZW1hTm9kZSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdmFsdWUudHlwZSA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgdmFsdWUudHlwZSA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgdmFsdWUudHlwZSA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgIHZhbHVlLnR5cGUgPT09ICdhbnknXG4gICAgKTtcbn1cblxuZXhwb3J0IHR5cGUgUm9vdEFkZGl0aW9uYWxQcm9wcyA9IHtcbiAgICBzdHJpY3RUZW1wbGF0ZT86IGJvb2xlYW47XG4gICAgY29uY2F0VGVtcGxhdGVBcnJheT86IGJvb2xlYW47XG4gICAgc3RyaWN0U2V0PzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIFJvb3RBZGRpdGlvbmFsTWV0YVByb3BzID0ge1xuICAgICRtZXRhPzogU3RhdERhdGFNZXRhICYgUm9vdEFkZGl0aW9uYWxQcm9wcztcbn07XG5cbmV4cG9ydCB0eXBlIE12dURhdGEgPSB7XG4gICAgLy8gaW5pdGlhbGl6ZWRfbG9yZWJvb2tzIOS7juWtl+espuS4suWIl+ihqOWPmOS4uuiusOW9leWvueixoVxuICAgIC8vIOi/meagt+WPr+S7peS4uuavj+S4quefpeivhuW6k+WtmOWCqOWFg+aVsOaNru+8jOS+i+WmguWIneWni+WMlueahOagh+iusOWPmOmHj1xuICAgIC8qKiDlt7LliJ3lp4vljJbnmoQgbG9yZWJvb2sg5YiX6KGoICovXG4gICAgaW5pdGlhbGl6ZWRfbG9yZWJvb2tzPzogUmVjb3JkPHN0cmluZywgYW55W10+O1xuXG4gICAgLyoqXG4gICAgICog54q25oCB5pWw5o2uIC0g5a2Y5YKo5a6e6ZmF55qE5Y+Y6YeP5YC8XG4gICAgICog5pSv5oyB5bWM5aWX5a+56LGh57uT5p6E77yM6YCa6L+H6Lev5b6E77yI5aaCIFwicGxheWVyLmhlYWx0aFwi77yJ6K6/6ZeuXG4gICAgICogJGludGVybmFsIOWxnuaAp+WcqOabtOaWsOi/h+eoi+S4reS4tOaXtuWtmOWCqCBkaXNwbGF5X2RhdGEg5ZKMIGRlbHRhX2RhdGEg55qE5byV55SoXG4gICAgICpcbiAgICAgKiDmm7TmlrDpgLvovpHvvJpcbiAgICAgKiAxLiDmma7pgJrlgLzvvJrnm7TmjqXmm7TmlrDkuLrmlrDlgLxcbiAgICAgKiAyLiBWYWx1ZVdpdGhEZXNjcmlwdGlvbiDnsbvlnovvvJrmm7TmlrDmlbDnu4TnmoTnrKzkuIDkuKrlhYPntKDvvIjlrp7pmYXlgLzvvInvvIzkv53nlZnnrKzkuozkuKrlhYPntKDvvIjmj4/ov7DvvIlcbiAgICAgKiAzLiDmlbDlrZfnsbvlnovvvJroh6rliqjlsIblrZfnrKbkuLLmlrDlgLzovazmjaLkuLrmlbDlrZdcbiAgICAgKi9cbiAgICBzdGF0X2RhdGE6IFN0YXREYXRhICYgUm9vdEFkZGl0aW9uYWxNZXRhUHJvcHMgJiB7ICRpbnRlcm5hbD86IEludGVybmFsRGF0YSB9O1xuXG4gICAgLyoqXG4gICAgICog5pi+56S65pWw5o2uIC0g5a2Y5YKo5Y+Y6YeP5Y+Y5YyW55qE5Y+v6KeG5YyW6KGo56S6XG4gICAgICog5qC85byP77yaXCJ75pen5YC8fS0+e+aWsOWAvH0gKHvljp/lm6B9KVwiXG4gICAgICog5L6L5aaC77yaXCIxMDAtPjgwICjlj5fliLDkvKTlrrMpXCJcbiAgICAgKlxuICAgICAqIOm7mOiupOaDheWGteS4i+WMheWQq+WujOaVtOeahCBzdGF0X2RhdGEg77yM5L2G5piv5Zyo5Y+Y5pu05ZCO77yM5Lya5bCG5Y+Y5pu055qE5YWD57Sg5Y+Y5Li65LiK6Z2i5ZCr5Y6f5Zug55qE6KGo56S644CCXG4gICAgICog5pu05paw5pe25py677ya5q+P5qyhIHN0YXRfZGF0YSDkuK3nmoTlgLzlj5HnlJ/lj5jljJbml7blkIzmraXmm7TmlrBcbiAgICAgKiDnlKjpgJTvvJrlnKhVSeS4reWxleekuuWPmOmHj+eahOWPmOWMluWOhuWPsu+8jOiuqeeUqOaIt+S6huino+aVsOWAvOaYr+WmguS9leWPmOWMlueahFxuICAgICAqL1xuICAgIGRpc3BsYXlfZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT47XG5cbiAgICAvKipcbiAgICAgKiDlop7ph4/mlbDmja4gLSDlrZjlgqjmnKzmrKHmm7TmlrDkuK3lj5HnlJ/lj5jljJbnmoTlj5jph49cbiAgICAgKiDmoLzlvI/vvJrkuI4gZGlzcGxheV9kYXRhIOebuOWQjO+8jFwie+aXp+WAvH0tPnvmlrDlgLx9ICjljp/lm6ApXCJcbiAgICAgKlxuICAgICAqIOabtOaWsOaXtuacuu+8mlxuICAgICAqIC0g5ZyoIHVwZGF0ZVZhcmlhYmxlcyDlvIDlp4vml7bliJ3lp4vljJbkuLrnqbrlr7nosaFcbiAgICAgKiAtIOavj+asoeWPmOmHj+abtOaWsOaXtuiusOW9leWPmOWMllxuICAgICAqIC0g5pu05paw57uT5p2f5ZCO5L+d5a2Y5Yiw5raI5oGv55qEIHZhcmlhYmxlcyDkuK1cbiAgICAgKlxuICAgICAqIOeUqOmAlO+8muS7heaYvuekuuW9k+WJjea2iOaBry/mk43kvZzkuK3lrp7pmYXlj5HnlJ/lj5jljJbnmoTlj5jph4/vvIzogIzkuI3mmK/miYDmnInljoblj7Llj5jljJZcbiAgICAgKi9cbiAgICBkZWx0YV9kYXRhPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgICAvLyDnlKjkuo7lrZjlgqjmlbDmja7nu5PmnoTnmoTmqKHlvI9cbiAgICBzY2hlbWE/OiBPYmplY3RTY2hlbWFOb2RlICYgUGFydGlhbDxSb290QWRkaXRpb25hbFByb3BzPjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFyaWFibGVEYXRhIHtcbiAgICBvbGRfdmFyaWFibGVzOiBNdnVEYXRhO1xuICAgIC8qKlxuICAgICAqIOi+k+WHuuWPmOmHj++8jOS7heW9k+WunumZheS6p+eUn+S6huWPmOmHj+WPmOabtOeahOWcuuWQiO+8jOS8muS6p+eUnyBuZXdWYXJpYWJsZXNcbiAgICAgKi9cbiAgICBuZXdfdmFyaWFibGVzPzogTXZ1RGF0YTtcbn1cblxuZXhwb3J0IGNvbnN0IHZhcmlhYmxlX2V2ZW50cyA9IHtcbiAgICBTSU5HTEVfVkFSSUFCTEVfVVBEQVRFRDogJ21hZ192YXJpYWJsZV91cGRhdGVkJyxcbiAgICBWQVJJQUJMRV9VUERBVEVfRU5ERUQ6ICdtYWdfdmFyaWFibGVfdXBkYXRlX2VuZGVkJyxcbiAgICBWQVJJQUJMRV9VUERBVEVfU1RBUlRFRDogJ21hZ192YXJpYWJsZV91cGRhdGVfc3RhcnRlZCcsXG59IGFzIGNvbnN0O1xuZXhwb3J0IGNvbnN0IGV4cG9ydGVkX2V2ZW50cyA9IHtcbiAgICBJTlZPS0VfTVZVX1BST0NFU1M6ICdtYWdfaW52b2tlX212dScsXG4gICAgVVBEQVRFX1ZBUklBQkxFOiAnbWFnX3VwZGF0ZV92YXJpYWJsZScsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBJbnRlcm5hbERhdGEgPSB7XG4gICAgZGlzcGxheV9kYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICAgIGRlbHRhX2RhdGE6IFJlY29yZDxzdHJpbmcsIGFueT47XG59O1xuXG5leHBvcnQgdHlwZSBFeHRlbmRlZExpc3RlbmVyVHlwZSA9IHtcbiAgICBbdmFyaWFibGVfZXZlbnRzLlNJTkdMRV9WQVJJQUJMRV9VUERBVEVEXTogKFxuICAgICAgICBzdGF0X2RhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgICAgIHBhdGg6IHN0cmluZyxcbiAgICAgICAgX29sZFZhbHVlOiBhbnksXG4gICAgICAgIF9uZXdWYWx1ZTogYW55XG4gICAgKSA9PiB2b2lkO1xuICAgIFt2YXJpYWJsZV9ldmVudHMuVkFSSUFCTEVfVVBEQVRFX1NUQVJURURdOiAoXG4gICAgICAgIHZhcmlhYmxlczogTXZ1RGF0YSxcbiAgICAgICAgb3V0X2lzX3VwZGF0ZWQ6IGJvb2xlYW5cbiAgICApID0+IHZvaWQ7XG4gICAgW3ZhcmlhYmxlX2V2ZW50cy5WQVJJQUJMRV9VUERBVEVfRU5ERURdOiAodmFyaWFibGVzOiBNdnVEYXRhLCBvdXRfaXNfdXBkYXRlZDogYm9vbGVhbikgPT4gdm9pZDtcbiAgICBbZXhwb3J0ZWRfZXZlbnRzLklOVk9LRV9NVlVfUFJPQ0VTU106IChcbiAgICAgICAgbWVzc2FnZV9jb250ZW50OiBzdHJpbmcsXG4gICAgICAgIHZhcmlhYmxlX2luZm86IFZhcmlhYmxlRGF0YVxuICAgICkgPT4gdm9pZDtcbiAgICBbZXhwb3J0ZWRfZXZlbnRzLlVQREFURV9WQVJJQUJMRV06IChcbiAgICAgICAgc3RhdF9kYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgICAgICBwYXRoOiBzdHJpbmcsXG4gICAgICAgIG5ld1ZhbHVlOiBhbnksXG4gICAgICAgIHJlYXNvbjogc3RyaW5nLFxuICAgICAgICBpc1JlY3Vyc2l2ZTogYm9vbGVhblxuICAgICkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCB0eXBlIEluaXRWYXJUeXBlID0gU3RhdERhdGEgJiBSb290QWRkaXRpb25hbE1ldGFQcm9wcztcblxuZXhwb3J0IHR5cGUgRGF0YUNhdGVnb3J5ID0gJ3N0YXQnIHwgJ2Rpc3BsYXknIHwgJ2RlbHRhJztcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RSZWNvcmQoY2F0ZWdvcnk6ICdzdGF0JyB8ICdkaXNwbGF5JyB8ICdkZWx0YScsIGdhbWVfZGF0YTogTXZ1RGF0YSkge1xuICAgIGxldCBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgIHN3aXRjaCAoY2F0ZWdvcnkpIHtcbiAgICAgICAgY2FzZSAnc3RhdCc6XG4gICAgICAgICAgICBkYXRhID0gZ2FtZV9kYXRhLnN0YXRfZGF0YTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkaXNwbGF5JzpcbiAgICAgICAgICAgIGRhdGEgPSBnYW1lX2RhdGEuZGlzcGxheV9kYXRhITtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkZWx0YSc6XG4gICAgICAgICAgICBkYXRhID0gZ2FtZV9kYXRhLmRlbHRhX2RhdGEhO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/variable_def.ts\n\n}");
  },
  "./src/variable_init.ts": 
  /*!******************************!*\
  !*** ./src/variable_init.ts ***!
  \******************************/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmptyGameData: () => (/* binding */ createEmptyGameData),\n/* harmony export */   getEnabledLorebookList: () => (/* binding */ getEnabledLorebookList),\n/* harmony export */   getLastMessageVariables: () => (/* binding */ getLastMessageVariables),\n/* harmony export */   initCheck: () => (/* binding */ initCheck),\n/* harmony export */   loadInitVarData: () => (/* binding */ loadInitVarData),\n/* harmony export */   updateLorebookSettings: () => (/* binding */ updateLorebookSettings)\n/* harmony export */ });\n/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/function */ \"./src/function.ts\");\n/* harmony import */ var _variable_def__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/variable_def */ \"./src/variable_def.ts\");\n/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/schema */ \"./src/schema.ts\");\n/* harmony import */ var json5__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! json5 */ \"json5\");\n/* harmony import */ var toml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! toml */ \"toml\");\n// 整体游戏数据类型\n\n\n\n\n\nasync function initCheck() {\n    let variables;\n    //这个函数需要处理 dryRun,因为0层。\n    try {\n        if (SillyTavern.chat.length === 0) {\n            console.error('不存在任何一条消息，退出');\n            toastr.error(`无开场白，无法进行初始化`, '变量初始化失败');\n            return;\n        }\n        variables = (await (0,_function__WEBPACK_IMPORTED_MODULE_0__.getLastValidVariable)(getLastMessageId())) ?? createEmptyGameData();\n    }\n    catch (e) {\n        console.error('不存在任何一条消息，退出');\n        return;\n    }\n    // 确保变量结构完整\n    if (variables === undefined) {\n        variables = createEmptyGameData();\n    }\n    if (!_.has(variables, 'initialized_lorebooks')) {\n        variables.initialized_lorebooks = {};\n    }\n    if (Array.isArray(variables.initialized_lorebooks)) {\n        console.warn('Old \"initialized_lorebooks\" array format detected. Migrating to the new object format.');\n        const oldArray = variables.initialized_lorebooks;\n        const newObject = {};\n        for (const lorebookName of oldArray) {\n            newObject[lorebookName] = []; // 按照新格式，值为一个空数组\n        }\n        variables.initialized_lorebooks = newObject;\n    }\n    if (!variables.stat_data) {\n        variables.stat_data = {};\n    }\n    if (!variables.schema) {\n        variables.schema = { extensible: false, properties: {}, type: 'object' };\n    }\n    // 加载 InitVar 数据\n    const is_updated = await loadInitVarData(variables);\n    // --- 一次性清理所有魔法字符串 ---\n    if (is_updated) {\n        // 递归遍历整个 stat_data，移除所有魔法字符串\n        const cleanData = (data) => {\n            if (Array.isArray(data)) {\n                // 使用 filter 创建一个不含标记的新数组\n                const cleanedArray = data.filter(item => item !== _schema__WEBPACK_IMPORTED_MODULE_2__.EXTENSIBLE_MARKER);\n                // 递归清理数组内的对象或数组\n                cleanedArray.forEach(cleanData);\n                return cleanedArray;\n            }\n            if (_.isObject(data)) {\n                const newObj = {};\n                const typedData = data; // 类型断言\n                for (const key in data) {\n                    // 递归清理子节点，并将结果赋给新对象\n                    newObj[key] = cleanData(typedData[key]);\n                }\n                return newObj;\n            }\n            return data;\n        };\n        // 在生成 Schema 之前，先清理一遍 stat_data\n        // 这里需要先生成 Schema，再清理数据\n        // 所以还是得用克隆\n    }\n    // 在所有 lorebook 初始化完成后，生成最终的模式\n    if (is_updated || !variables.schema || _.isEmpty(variables.schema)) {\n        // 1. 克隆数据用于 Schema 生成\n        const dataForSchema = structuredClone(variables.stat_data);\n        // 2. generateSchema 会读取并移除克隆体中的标记，生成正确的 schema\n        // 对于增量场景，会以之前的 schema 为基础生成。\n        const generated_schema = (0,_schema__WEBPACK_IMPORTED_MODULE_2__.generateSchema)(dataForSchema, variables.schema);\n        // 使用类型守卫确保生成的 schema 是 ObjectSchemaNode\n        if ((0,_variable_def__WEBPACK_IMPORTED_MODULE_1__.isObjectSchema)(generated_schema)) {\n            if (_.has(variables.stat_data, '$meta.strictTemplate'))\n                generated_schema.strictTemplate = variables.stat_data['$meta']\n                    ?.strictTemplate;\n            if (_.has(variables.stat_data, '$meta.concatTemplateArray'))\n                generated_schema.concatTemplateArray = variables.stat_data['$meta']\n                    ?.concatTemplateArray;\n            if (_.has(variables.stat_data, '$meta.strictSet'))\n                generated_schema.strictSet = variables.stat_data['$meta']?.strictSet;\n            variables.schema = generated_schema;\n        }\n        else {\n            console.error('Generated schema is not an object schema, which is unexpected for stat_data root');\n        }\n        // 3. 现在，清理真实的 stat_data，让它在后续操作中保持干净\n        (0,_schema__WEBPACK_IMPORTED_MODULE_2__.cleanUpMetadata)(variables.stat_data);\n    }\n    if (!is_updated) {\n        return;\n    }\n    console.info(`Init chat variables.`);\n    await updateVariablesWith(data => _.assign(data, variables));\n    if (getLastMessageId() == 0) {\n        const last_msg = getChatMessages(0, { include_swipes: true })[0];\n        // 更新所有 swipes\n        await setChatMessages([\n            {\n                // last_msg 不一定存在 message_id\n                message_id: 0,\n                swipes_data: await Promise.all(last_msg.swipes.map(async (swipe) => {\n                    const current_data = structuredClone(variables);\n                    // 此处调用的是新版 updateVariables，它将支持更多命令\n                    // 不再需要手动调用 substitudeMacros，updateVariables 会处理\n                    await (0,_function__WEBPACK_IMPORTED_MODULE_0__.updateVariables)(swipe, current_data);\n                    console.log(`变量初始化完成`);\n                    return current_data;\n                })),\n            },\n        ]);\n    }\n    else {\n        // 非开局直接更新到最后一条即可，也并不需要重新结算当前的变量\n        // @ts-expect-error 该函数可用\n        await setChatMessage({ data: variables }, getLastMessageId());\n    }\n    try {\n        // 输出构建信息\n        toastr.info(`有新的世界书初始化变量被加载，当前使用世界书: ${YAML.stringify(variables.initialized_lorebooks)}`, '变量初始化成功');\n    }\n    catch (_e) {\n        /* empty */\n    }\n    // 更新 lorebook 设置\n    await updateLorebookSettings();\n}\n/**\n * 获取所有启用的 lorebook 列表\n */\nasync function getEnabledLorebookList() {\n    const lorebook_settings = await getLorebookSettings();\n    const enabled_lorebook_list = [...lorebook_settings.selected_global_lorebooks];\n    const char_lorebook = await getCurrentCharPrimaryLorebook();\n    if (char_lorebook !== null) {\n        enabled_lorebook_list.push(char_lorebook);\n    }\n    return enabled_lorebook_list;\n}\n/**\n * 从 lorebook 中加载所有 InitVar 数据并合并到提供的 GameData 中\n */\nasync function loadInitVarData(mvu_data, lorebook_list) {\n    const enabled_lorebook_list = lorebook_list || (await getEnabledLorebookList());\n    let is_updated = false;\n    // 确保 initialized_lorebooks 是对象格式\n    if (!mvu_data.initialized_lorebooks || Array.isArray(mvu_data.initialized_lorebooks)) {\n        mvu_data.initialized_lorebooks = {};\n    }\n    for (const current_lorebook of enabled_lorebook_list) {\n        // 适配 beta 分支的对象结构\n        if (_.has(mvu_data.initialized_lorebooks, current_lorebook))\n            continue;\n        mvu_data.initialized_lorebooks[current_lorebook] = [];\n        const init_entries = (await getLorebookEntries(current_lorebook));\n        for (const entry of init_entries) {\n            if (entry.comment?.toLowerCase().includes('[initvar]')) {\n                const content = substitudeMacros(entry.content);\n                let parsedData = null;\n                let parseError = null;\n                // Try YAML first (which also handles JSON)\n                try {\n                    parsedData = YAML.parseDocument(content, { merge: true }).toJS();\n                }\n                catch (e) {\n                    // Try JSON5\n                    try {\n                        // eslint-disable-next-line import-x/no-named-as-default-member\n                        parsedData = json5__WEBPACK_IMPORTED_MODULE_3__[\"default\"].parse(content);\n                    }\n                    catch (e2) {\n                        // Try TOML\n                        try {\n                            parsedData = toml__WEBPACK_IMPORTED_MODULE_4__[\"default\"].parse(content);\n                        }\n                        catch (e3) {\n                            parseError = new Error(`Failed to parse content as YAML/JSON, JSON5, or TOML: ${e3}`);\n                        }\n                    }\n                }\n                if (parseError) {\n                    console.error(`Failed to parse lorebook entry[${entry.comment}]: ${parseError}`);\n                    toastr.error(parseError.message, 'Failed to parse lorebook entry', {\n                        timeOut: 5000,\n                    });\n                    throw parseError;\n                }\n                if (parsedData) {\n                    mvu_data.stat_data = _.merge(mvu_data.stat_data, parsedData);\n                }\n            }\n        }\n        is_updated = true;\n    }\n    return is_updated;\n}\n/**\n * 创建一个新的空 GameData 对象\n */\nfunction createEmptyGameData() {\n    return {\n        display_data: {},\n        initialized_lorebooks: {}, // 适配 beta 分支的对象结构\n        stat_data: {},\n        delta_data: {},\n        schema: {\n            type: 'object',\n            properties: {},\n        }, // beta 分支新增的 schema 字段\n    };\n}\n/**\n * 获取最后一条消息的变量数据\n */\nasync function getLastMessageVariables() {\n    let last_chat_msg = [];\n    try {\n        last_chat_msg = (await getChatMessages(-2, {\n            role: 'assistant',\n            include_swipes: true,\n        }));\n    }\n    catch (e) {\n        // 在第一行时，必定发生异常。\n    }\n    if (!last_chat_msg || last_chat_msg.length <= 0) {\n        const first_msg = await getChatMessages(0, {\n            include_swipes: true,\n        });\n        if (first_msg && first_msg.length > 0) {\n            last_chat_msg = first_msg;\n        }\n        else {\n            throw new Error('不存在任何一条消息');\n        }\n    }\n    const last_msg = last_chat_msg[0];\n    const variables = last_msg.swipes_data[last_msg.swipe_id];\n    return { message: last_msg, variables };\n}\n/**\n * 更新 lorebook 设置为推荐配置\n */\nasync function updateLorebookSettings() {\n    /*Ref:https://github.com/lolo-desu/lolocard/blob/master/src/%E6%97%A5%E8%AE%B0%E7%BB%9C%E7%BB%9C/%E8%84%9A%E6%9C%AC/%E8%B0%83%E6%95%B4%E4%B8%96%E7%95%8C%E4%B9%A6%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE.ts\n     */\n    const dst_setting = {\n        scan_depth: 2,\n        context_percentage: 100,\n        budget_cap: 0,\n        min_activations: 0,\n        max_depth: 0,\n        max_recursion_steps: 0,\n        insertion_strategy: 'character_first',\n        include_names: false,\n        recursive: true,\n        case_sensitive: false,\n        match_whole_words: false,\n        use_group_scoring: false,\n        overflow_alert: false,\n    };\n    const settings = getLorebookSettings();\n    if (!_.isEqual(_.merge({}, settings, dst_setting), settings)) {\n        setLorebookSettings(dst_setting);\n    }\n}\n//window.initCheck = initCheck;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/variable_init.ts\n\n}");
  },
  "compare-versions": 
  /*!***************************************************************************!*\
  !*** external "https://testingcf.jsdelivr.net/npm/compare-versions/+esm" ***!
  \***************************************************************************/ module => {
    module.exports = __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_compare_versions_esm_4fbc8a69__;
  },
  json5: 
  /*!****************************************************************!*\
  !*** external "https://testingcf.jsdelivr.net/npm/json5/+esm" ***!
  \****************************************************************/ module => {
    module.exports = __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_json5_esm_143ca249__;
  },
  mathjs: 
  /*!*****************************************************************!*\
  !*** external "https://testingcf.jsdelivr.net/npm/mathjs/+esm" ***!
  \*****************************************************************/ module => {
    module.exports = __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_mathjs_esm_aec644b1__;
  },
  pinia: 
  /*!****************************************************************!*\
  !*** external "https://testingcf.jsdelivr.net/npm/pinia/+esm" ***!
  \****************************************************************/ module => {
    module.exports = __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_pinia_esm_b723a504__;
  },
  toml: 
  /*!***************************************************************!*\
  !*** external "https://testingcf.jsdelivr.net/npm/toml/+esm" ***!
  \***************************************************************/ module => {
    module.exports = __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_toml_esm_005ece54__;
  },
  vue: 
  /*!**********************!*\
  !*** external "Vue" ***!
  \**********************/ module => {
    module.exports = Vue;
  },
  zod: 
  /*!********************!*\
  !*** external "z" ***!
  \********************/ module => {
    module.exports = z;
  }
};

var __webpack_module_cache__ = {};

function __webpack_require__(moduleId) {
  var cachedModule = __webpack_module_cache__[moduleId];
  if (cachedModule !== undefined) {
    return cachedModule.exports;
  }
  var module = __webpack_module_cache__[moduleId] = {
    exports: {}
  };
  __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
  return module.exports;
}

(() => {
  __webpack_require__.n = module => {
    var getter = module && module.__esModule ? () => module["default"] : () => module;
    __webpack_require__.d(getter, {
      a: getter
    });
    return getter;
  };
})();

(() => {
  __webpack_require__.d = (exports, definition) => {
    for (var key in definition) {
      if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: definition[key]
        });
      }
    }
  };
})();

(() => {
  __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
})();

(() => {
  __webpack_require__.r = exports => {
    if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
      Object.defineProperty(exports, Symbol.toStringTag, {
        value: "Module"
      });
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  };
})();

var __webpack_exports__ = __webpack_require__("./src/main.ts");